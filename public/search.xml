<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.数据结构——线性表</title>
    <url>/2021/05/23/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>2.Ruby的条件判断</title>
    <url>/2021/05/23/2-Ruby%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>3.Ruby的循环</title>
    <url>/2021/05/23/3-Ruby%E7%9A%84%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>4.Ruby的方法</title>
    <url>/2021/05/23/4-Ruby%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Ruby的对象，变量和常量</title>
    <url>/2021/05/23/1-Ruby%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>7.Ruby的错误处理与异常</title>
    <url>/2021/05/23/7-Ruby%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8E%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Array&amp;Hash&amp;Symbol</title>
    <url>/2021/05/04/Array_Hash_Symbol/</url>
    <content><![CDATA[<p><strong>Array(数组):顺序且有序的集合类型，Ruby中使用方括号来获取数组元素，索引使用数字，从0开始</strong></p>
<p><strong>Hash(哈希or散列):使用键值操作的集合类型，哈希中的索引不局限于使用数字，Hash中的索引也被称为键，使用花括号包含键值对的形式表示</strong></p>
<p><strong>Symbol(符号):Ruby中特有的数据类型，rails中经常用到，使用symbol会比使用字符串更有效率，比如“是否相等”这类问题，字符串是按字母一个一个的比较，而symbol只需进行一次操作，适合用来作为Hash的键（索引）</strong></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用[]来创建数组</span><br><span class="line">2.7.2 :002 &gt; nums &#x3D; [1,2,3,4,5]</span><br><span class="line"> &#x3D;&gt; [1, 2, 3, 4, 5] </span><br><span class="line">2.7.2 :003 &gt; strs &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line"> &#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用Array.new</span><br><span class="line">2.7.2 :004 &gt; a &#x3D; Array.new</span><br><span class="line"> &#x3D;&gt; [] </span><br><span class="line">2.7.2 :005 &gt; p a</span><br><span class="line">[]</span><br><span class="line"> &#x3D;&gt; [] </span><br><span class="line">2.7.2 :006 &gt; a &#x3D;Array.new(5)</span><br><span class="line"> &#x3D;&gt; [nil, nil, nil, nil, nil] </span><br><span class="line">2.7.2 :007 &gt; a &#x3D;Array.new(5,0)</span><br><span class="line"> &#x3D;&gt; [0, 0, 0, 0, 0] </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># %w创建不包含空白的字符串数组，%i创建元素为符号的数组</span><br><span class="line">2.7.2 :008 &gt; lang &#x3D; %w(Ruby java python ssm nginx docker)</span><br><span class="line"> &#x3D;&gt; [&quot;Ruby&quot;, &quot;java&quot;, &quot;python&quot;, &quot;ssm&quot;, &quot;nginx&quot;, &quot;docker&quot;] </span><br><span class="line">2.7.2 :009 &gt; p lang</span><br><span class="line">[&quot;Ruby&quot;, &quot;java&quot;, &quot;python&quot;, &quot;ssm&quot;, &quot;nginx&quot;, &quot;docker&quot;]</span><br><span class="line"> &#x3D;&gt; [&quot;Ruby&quot;, &quot;java&quot;, &quot;python&quot;, &quot;ssm&quot;, &quot;nginx&quot;, &quot;docker&quot;] </span><br><span class="line">2.7.2 :010 &gt; lang &#x3D; %i(Ruby java python ssm nginx docker)</span><br><span class="line"> &#x3D;&gt; [:Ruby, :java, :python, :ssm, :nginx, :docker] </span><br><span class="line">2.7.2 :011 &gt; p lang</span><br><span class="line">[:Ruby, :java, :python, :ssm, :nginx, :docker]</span><br><span class="line"> &#x3D;&gt; [:Ruby, :java, :python, :ssm, :nginx, :docker] </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用to_a方法把其他对象转换为数组</span><br><span class="line">2.7.2 :012 &gt; smartphone &#x3D; &#123;xiaomi: &quot;小米&quot;,huawei: &quot;华为&quot;&#125;</span><br><span class="line"> &#x3D;&gt; &#123;:xiaomi&#x3D;&gt;&quot;小米&quot;, :huawei&#x3D;&gt;&quot;华为&quot;&#125; </span><br><span class="line">2.7.2 :016 &gt; t &#x3D; smartphone.to_a</span><br><span class="line"> &#x3D;&gt; [[:xiaomi, &quot;小米&quot;], [:huawei, &quot;华为&quot;]] </span><br><span class="line">2.7.2 :018 &gt; t.is_a? Array</span><br><span class="line"> &#x3D;&gt; true </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对用逗号或者空白隔开的字符串使用split方法</span><br><span class="line">2.7.2 :019 &gt; text &#x3D; &quot;one&quot;,&quot;two&quot;,&quot;three&quot;.split(&#39;,&#39;)</span><br><span class="line"> &#x3D;&gt; [&quot;one&quot;, &quot;two&quot;, [&quot;three&quot;]] </span><br><span class="line">2.7.2 :020 &gt; text &#x3D; &quot;one,two,three&quot;.split(&#39;,&#39;)</span><br><span class="line"> &#x3D;&gt; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] </span><br><span class="line">2.7.2 :022 &gt; p text</span><br><span class="line">[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span><br><span class="line"> &#x3D;&gt; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] </span><br></pre></td></tr></table></figure>
<h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过[]指定索引，获取相应的元素</span><br><span class="line">2.7.2 :023 &gt; a &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line"> &#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] </span><br><span class="line">2.7.2 :024 &gt; a[1]</span><br><span class="line"> &#x3D;&gt; &quot;b&quot; </span><br><span class="line"># 形如a[n..m]，若m比数组长度大，返回的结果与指定的数组最后一个元素是一样的</span><br><span class="line">2.7.2 :025 &gt; a[1..4]</span><br><span class="line"> &#x3D;&gt; [&quot;b&quot;, &quot;c&quot;, &quot;d&quot;] </span><br><span class="line"># 从某个元素开始，获取多个元素</span><br><span class="line">2.7.2 :026 &gt; a[1,2]</span><br><span class="line"> &#x3D;&gt; [&quot;b&quot;, &quot;c&quot;] </span><br><span class="line"># 还可使用at，slice方法</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用a[n] &#x3D; item来替换元素</span><br><span class="line"></span><br><span class="line">a &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">a[2,4] &#x3D; [&quot;C&quot;,&quot;D&quot;,&quot;E&quot;]</span><br><span class="line">p a</span><br><span class="line"></span><br><span class="line">output----[&quot;a&quot;,&quot;b&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;]</span><br><span class="line"></span><br><span class="line">a &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;]</span><br><span class="line">a[2..4] &#x3D; [&quot;C&quot;,&quot;D&quot;,&quot;E&quot;]</span><br><span class="line">p a</span><br><span class="line"></span><br><span class="line">output---- [&quot;a&quot;,&quot;b&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;f&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 插入元素</span></span><br><span class="line">irb(main):003:0&gt; a = [&quot;q&quot;,&quot;s&quot;,&quot;d&quot;]</span><br><span class="line">irb(main):006:0&gt; a[2,0] = [&quot;X&quot;,&quot;Y&quot;]</span><br><span class="line">irb(main):007:0&gt; a</span><br><span class="line">=&gt; [&quot;q&quot;, &quot;s&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过多个索引创建数组</span></span><br><span class="line">irb(main):008:0&gt; a = %w(a b c d e d)</span><br><span class="line">irb(main):009:0&gt; a</span><br><span class="line">=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;]</span><br><span class="line">irb(main):010:0&gt; a.values_at(1,3,5)</span><br><span class="line">=&gt; [&quot;b&quot;, &quot;d&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure>
<h3 id="作为集合与作为列的数组"><a href="#作为集合与作为列的数组" class="headerlink" title="作为集合与作为列的数组"></a>作为集合与作为列的数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 交集&amp;并集</span><br><span class="line">irb(main):011:0&gt; ary &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">irb(main):012:0&gt; ary1 &#x3D; [&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">irb(main):013:0&gt; ary &amp; ary1</span><br><span class="line">&#x3D;&gt; [&quot;b&quot;, &quot;c&quot;]</span><br><span class="line">irb(main):014:0&gt; ary | ary1</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">irb(main):015:0&gt; ary1-ary</span><br><span class="line">&#x3D;&gt; [&quot;d&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):016:0&gt; ary+ary1</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对于数组开头的元素</span><br><span class="line">irb(main):022:0&gt; a</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;f&quot;]</span><br><span class="line">irb(main):023:0&gt; a.unshift(&quot;1&quot;)</span><br><span class="line">&#x3D;&gt; [&quot;1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;f&quot;]</span><br><span class="line">irb(main):024:0&gt; a.shift</span><br><span class="line">&#x3D;&gt; &quot;1&quot;</span><br><span class="line">irb(main):025:0&gt; a</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;f&quot;]</span><br><span class="line"></span><br><span class="line"># 对于数组末尾的元素</span><br><span class="line">irb(main):026:0&gt; a</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;f&quot;]</span><br><span class="line">irb(main):027:0&gt; a.push(&quot;df&quot;)</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;f&quot;, &quot;df&quot;]</span><br><span class="line">irb(main):028:0&gt; a.pop</span><br><span class="line">&#x3D;&gt; &quot;df&quot;</span><br><span class="line">irb(main):029:0&gt; a</span><br><span class="line">&#x3D;&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;f&quot;]</span><br></pre></td></tr></table></figure>
<h3 id="主要的数组方法"><a href="#主要的数组方法" class="headerlink" title="主要的数组方法"></a>主要的数组方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):033:0&gt; a &#x3D; [1,2,3,4,5,1,3,6]</span><br><span class="line"># 数组开头添加元素</span><br><span class="line">irb(main):034:0&gt; a.unshift(12)</span><br><span class="line">&#x3D;&gt; [12, 1, 2, 3, 4, 5, 1, 3, 6]</span><br><span class="line"># 数组末尾添加元素</span><br><span class="line">irb(main):035:0&gt; a &lt;&lt; 980</span><br><span class="line">&#x3D;&gt; [12, 1, 2, 3, 4, 5, 1, 3, 6, 980]</span><br><span class="line"># 连接两个数组</span><br><span class="line">irb(main):037:0&gt; a.concat([8,3,5])</span><br><span class="line">&#x3D;&gt; [12, 1, 2, 3, 4, 5, 1, 3, 6, 980, 8, 3, 5]</span><br><span class="line">irb(main):038:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 1, 2, 3, 4, 5, 1, 3, 6, 980, 8, 3, 5]</span><br><span class="line"># 把第2，3，4个元素换为一个0</span><br><span class="line">irb(main):039:0&gt; a[2..4]&#x3D;0</span><br><span class="line">irb(main):040:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 1, 0, 5, 1, 3, 6, 980, 8, 3, 5]</span><br><span class="line"># 1-3的元素换为一个9</span><br><span class="line">irb(main):041:0&gt; a[1,3] &#x3D; 9</span><br><span class="line">irb(main):042:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 9, 1, 3, 6, 980, 8, 3, 5]</span><br><span class="line">&#96;&#96;&#96;&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<h3 id="数组内元素的删除"><a href="#数组内元素的删除" class="headerlink" title="数组内元素的删除"></a>数组内元素的删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):060:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 9, 1, 3, 6, 980, 8, 3, 5]</span><br><span class="line">irb(main):061:0&gt; a.delete(1)</span><br><span class="line">&#x3D;&gt; 1</span><br><span class="line">irb(main):062:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 9, 3, 6, 980, 8, 3, 5]</span><br><span class="line">irb(main):063:0&gt; a.delete_at(1)</span><br><span class="line">&#x3D;&gt; 9</span><br><span class="line">irb(main):064:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 3, 6, 980, 8, 3, 5]</span><br><span class="line">irb(main):065:0&gt; a.delete_if&#123;|i| i&lt;5&#125;</span><br><span class="line">&#x3D;&gt; [12, 6, 980, 8, 5]</span><br><span class="line">irb(main):066:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 6, 980, 8, 5]</span><br><span class="line">irb(main):067:0&gt; a[2,0] &#x3D; [1,2,3,4,5]</span><br><span class="line">irb(main):068:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 6, 1, 2, 3, 4, 5, 980, 8, 5]</span><br><span class="line">irb(main):069:0&gt; a.reject&#123;|i| i&lt;2&#125;</span><br><span class="line">&#x3D;&gt; [12, 6, 2, 3, 4, 5, 980, 8, 5]</span><br><span class="line">irb(main):070:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 6, 1, 2, 3, 4, 5, 980, 8, 5]</span><br><span class="line">irb(main):071:0&gt; a.reject!&#123;|i| i&lt;2&#125;</span><br><span class="line">&#x3D;&gt; [12, 6, 2, 3, 4, 5, 980, 8, 5]</span><br><span class="line">irb(main):072:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 6, 2, 3, 4, 5, 980, 8, 5]</span><br><span class="line">irb(main):073:0&gt; a.slice!(1,2)</span><br><span class="line">&#x3D;&gt; [6, 2]</span><br><span class="line">irb(main):074:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 3, 4, 5, 980, 8, 5]</span><br><span class="line">irb(main):075:0&gt; a.uniq!</span><br><span class="line">&#x3D;&gt; [12, 3, 4, 5, 980, 8]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):076:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 3, 4, 5, 980, 8]</span><br><span class="line">irb(main):077:0&gt; a[2,0]&#x3D;[1,2,3,4,5,3,42,5,3]</span><br><span class="line">irb(main):078:0&gt; a</span><br><span class="line">&#x3D;&gt; [12, 3, 1, 2, 3, 4, 5, 3, 42, 5, 3, 4, 5, 980, 8]</span><br><span class="line">irb(main):079:0&gt; a.collect!&#123;|i| i*2&#125;</span><br><span class="line">&#x3D;&gt; [24, 6, 2, 4, 6, 8, 10, 6, 84, 10, 6, 8, 10, 1960, 16]</span><br><span class="line">irb(main):080:0&gt; a.fill(0,2..5)</span><br><span class="line">&#x3D;&gt; [24, 6, 0, 0, 0, 0, 10, 6, 84, 10, 6, 8, 10, 1960, 16]</span><br><span class="line">irb(main):081:0&gt; a.reverse</span><br><span class="line">&#x3D;&gt; [16, 1960, 10, 8, 6, 10, 84, 6, 10, 0, 0, 0, 0, 6, 24]</span><br><span class="line">irb(main):082:0&gt; a.sort!</span><br><span class="line">&#x3D;&gt; [0, 0, 0, 0, 6, 6, 6, 8, 10, 10, 10, 16, 24, 84, 1960]</span><br><span class="line">irb(main):084:0&gt; a.sort_by&#123;|i| -i&#125;</span><br><span class="line">&#x3D;&gt; [1960, 84, 24, 16, 10, 10, 10, 8, 6, 6, 6, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure>
<h3 id="处理数组中的元素"><a href="#处理数组中的元素" class="headerlink" title="处理数组中的元素"></a>处理数组中的元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):116:0&gt; a</span><br><span class="line">&#x3D;&gt; [0, 0, 0, 0, 6, 6, 6, 8, 10, 10, 10, 16, 24, 84, 1960]</span><br><span class="line">irb(main):117:0&gt; sum &#x3D;0</span><br><span class="line">irb(main):118:1* a.each do |i|</span><br><span class="line">irb(main):119:1*   sum+&#x3D;i</span><br><span class="line">irb(main):120:0&gt; end</span><br><span class="line">&#x3D;&gt; [0, 0, 0, 0, 6, 6, 6, 8, 10, 10, 10, 16, 24, 84, 1960]</span><br><span class="line">irb(main):122:0&gt; p sum</span><br><span class="line">2140</span><br><span class="line">&#x3D;&gt; 2140</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):128:0&gt; b&#x3D;[[1,2,3],[2,3,4],[3,4,5]]</span><br><span class="line">irb(main):129:0&gt; b</span><br><span class="line">&#x3D;&gt; [[1, 2, 3], [2, 3, 4], [3, 4, 5]]</span><br><span class="line">irb(main):131:0&gt; b&#x3D;Array.new(3,[3,4,5])</span><br><span class="line">irb(main):132:0&gt; b</span><br><span class="line">&#x3D;&gt; [[3, 4, 5], [3, 4, 5], [3, 4, 5]]</span><br></pre></td></tr></table></figure>
<h3 id="同时访问多个数组"><a href="#同时访问多个数组" class="headerlink" title="同时访问多个数组"></a>同时访问多个数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):164:0&gt; a</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br><span class="line">irb(main):165:0&gt; b</span><br><span class="line">&#x3D;&gt; [1, 2, 2]</span><br><span class="line">irb(main):166:0&gt; c</span><br><span class="line">&#x3D;&gt; [1, 2, 1]</span><br><span class="line">irb(main):167:0&gt; result &#x3D; []</span><br><span class="line">irb(main):168:1* a.zip(b,c) do |a ,b, c|</span><br><span class="line">irb(main):169:1*   result &lt;&lt; a+b+c</span><br><span class="line">irb(main):170:0&gt; end</span><br><span class="line">&#x3D;&gt; nil</span><br><span class="line">irb(main):171:0&gt; result</span><br><span class="line">&#x3D;&gt; [3, 6, 6]</span><br><span class="line">irb(main):172:0&gt; </span><br></pre></td></tr></table></figure>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h3 id="Hash的创建"><a href="#Hash的创建" class="headerlink" title="Hash的创建"></a>Hash的创建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):182:0&gt; h1 &#x3D; &#123;&quot;a&quot;&#x3D;&gt;&quot;b&quot;,&quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):183:0&gt; h1</span><br><span class="line">&#x3D;&gt; &#123;&quot;a&quot;&#x3D;&gt;&quot;b&quot;, &quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):184:0&gt; h1[&quot;a&quot;]</span><br><span class="line">&#x3D;&gt; &quot;b&quot;</span><br><span class="line">irb(main):185:0&gt; h2 &#x3D; &#123;a:&quot;b&quot;,c:&quot;d&quot;&#125;</span><br><span class="line">irb(main):186:0&gt; h2</span><br><span class="line">&#x3D;&gt; &#123;:a&#x3D;&gt;&quot;b&quot;, :c&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):187:0&gt; h2[:a]</span><br><span class="line">&#x3D;&gt; &quot;b&quot;</span><br></pre></td></tr></table></figure>
<h3 id="值的获取与设定"><a href="#值的获取与设定" class="headerlink" title="值的获取与设定"></a>值的获取与设定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):188:0&gt; h &#x3D; Hash.new</span><br><span class="line">irb(main):189:0&gt; h[&quot;r&quot;]&#x3D;&quot;ruby&quot;</span><br><span class="line">irb(main):190:0&gt; h[&quot;r&quot;]</span><br><span class="line">&#x3D;&gt; &quot;ruby&quot;</span><br><span class="line">irb(main):192:0&gt; h.store(&quot;r&quot;,&quot;ruby&quot;)</span><br><span class="line">&#x3D;&gt; &quot;ruby&quot;</span><br><span class="line">irb(main):193:0&gt; h.fetch(&quot;r&quot;)</span><br><span class="line">&#x3D;&gt; &quot;ruby&quot;</span><br><span class="line">irb(main):194:0&gt; h.fetch(&quot;N&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">        5: from &#x2F;usr&#x2F;bin&#x2F;irb:23:in &#96;&lt;main&gt;&#39;</span><br><span class="line">        4: from &#x2F;usr&#x2F;bin&#x2F;irb:23:in &#96;load&#39;</span><br><span class="line">        3: from &#x2F;usr&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;2.7.0&#x2F;gems&#x2F;irb-1.2.1&#x2F;exe&#x2F;irb:11:in &#96;&lt;top (required)&gt;&#39;</span><br><span class="line">        2: from (irb):194</span><br><span class="line">        1: from (irb):194:in &#96;fetch&#39;</span><br><span class="line">KeyError (key not found: &quot;N&quot;)</span><br><span class="line">irb(main):195:0&gt; h.fetch(&quot;N&quot;,&quot;(undef)&quot;)</span><br><span class="line">&#x3D;&gt; &quot;(undef)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="对Hash的查看"><a href="#对Hash的查看" class="headerlink" title="对Hash的查看"></a>对Hash的查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):201:0&gt; h3 &#x3D; Hash.new(1)</span><br><span class="line">irb(main):202:0&gt; h3[&quot;a&quot;]&#x3D;10</span><br><span class="line">irb(main):205:0&gt; p h3[&quot;x&quot;]</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):213:0&gt; h1</span><br><span class="line">&#x3D;&gt; &#123;&quot;a&quot;&#x3D;&gt;&quot;b&quot;, &quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):214:0&gt; h1.key?(&quot;a&quot;)</span><br><span class="line">&#x3D;&gt; true</span><br></pre></td></tr></table></figure>
<h3 id="键值的删除"><a href="#键值的删除" class="headerlink" title="键值的删除"></a>键值的删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):218:0&gt; h1</span><br><span class="line">&#x3D;&gt; &#123;&quot;a&quot;&#x3D;&gt;&quot;b&quot;, &quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):219:0&gt; h1[&quot;a&quot;]</span><br><span class="line">&#x3D;&gt; &quot;b&quot;</span><br><span class="line">irb(main):220:0&gt; h1.delete(&quot;a&quot;)</span><br><span class="line">&#x3D;&gt; &quot;b&quot;</span><br><span class="line">irb(main):221:0&gt; h1</span><br><span class="line">&#x3D;&gt; &#123;&quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始化散列"><a href="#初始化散列" class="headerlink" title="初始化散列"></a>初始化散列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):222:0&gt; h1</span><br><span class="line">&#x3D;&gt; &#123;&quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):223:0&gt; h1.clear</span><br><span class="line">&#x3D;&gt; &#123;&#125;</span><br><span class="line">irb(main):224:0&gt; h1.size</span><br><span class="line">&#x3D;&gt; 0</span><br></pre></td></tr></table></figure>
<h3 id="合并散列"><a href="#合并散列" class="headerlink" title="合并散列"></a>合并散列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">irb(main):228:0&gt; h1</span><br><span class="line">&#x3D;&gt; &#123;&quot;a&quot;&#x3D;&gt;&quot;b&quot;, &quot;c&quot;&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):229:0&gt; h2</span><br><span class="line">&#x3D;&gt; &#123;:a&#x3D;&gt;&quot;b&quot;, :c&#x3D;&gt;&quot;d&quot;&#125;</span><br><span class="line">irb(main):230:0&gt; h1.merge(h2)</span><br><span class="line">&#x3D;&gt; &#123;&quot;a&quot;&#x3D;&gt;&quot;b&quot;, &quot;c&quot;&#x3D;&gt;&quot;d&quot;, :a&#x3D;&gt;&quot;b&quot;, :c&#x3D;&gt;&quot;d&quot;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>6.Ruby的运算符</title>
    <url>/2021/05/23/6-Ruby%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>5.Ruby的类和模块</title>
    <url>/2021/05/23/5-Ruby%E7%9A%84%E7%B1%BB%E5%92%8C%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>《Ruby元编程》</title>
    <url>/2021/05/04/Metaprogramming%20Ruby%202/</url>
    <content><![CDATA[<h1 id="元这个字眼"><a href="#元这个字眼" class="headerlink" title="元这个字眼"></a>元这个字眼</h1><h1 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h1><p>Ruby的世界除了对象，还有其他的语言构件，比如class，module，instance variable等，元编程操作的就是这些语言构件。</p>
<p>所有这些语言构件存在的系统称之为对象模型。</p>
<h2 id="打开类"><a href="#打开类" class="headerlink" title="打开类"></a>打开类</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :011 &gt; def to_alphanumeric(s)</span><br><span class="line">2.7.2 :012 &gt;   s.gsub(/[^\w\s]/,&#x27;&#x27;)</span><br><span class="line">2.7.2 :013 &gt; end</span><br><span class="line"> =&gt; :to_alphanumeric </span><br><span class="line">2.7.2 :014 &gt; to_alphanumeric(&quot;hello, %% world&quot;)</span><br><span class="line"> =&gt; &quot;hello  world&quot; </span><br></pre></td></tr></table></figure>

<p><strong>更好的方法是让字符串本身来做这种转换</strong></p>
<p><strong>可以去String类植入to_alphanumeric方法</strong></p>
<h3 id="类定义揭秘"><a href="#类定义揭秘" class="headerlink" title="类定义揭秘"></a>类定义揭秘</h3><p>Ruby中，定义类的语句和其他语句没有本质区别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :015 &gt; 3.times do</span><br><span class="line">2.7.2 :016 &gt;   class C</span><br><span class="line">2.7.2 :017 &gt;     puts &quot;Hello Longbiu&quot;</span><br><span class="line">2.7.2 :018 &gt;   end</span><br><span class="line">2.7.2 :019 &gt; end</span><br><span class="line">Hello Longbiu</span><br><span class="line">Hello Longbiu</span><br><span class="line">Hello Longbiu</span><br><span class="line"> =&gt; 3 </span><br></pre></td></tr></table></figure>

<p>Ruby的class关键字更像是一个作用域操作符，而不是类型声明语句。class关键字的核心任务是把你带到类的上下文中，让你可以在里面定义方法。</p>
<p><strong>重新打开已经存在的类并对之进行动态修改——打开类（open class）</strong></p>
<h3 id="打开类的问题"><a href="#打开类的问题" class="headerlink" title="打开类的问题"></a>打开类的问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :005 &gt; [].methods.grep /^re/</span><br><span class="line"> =&gt; [:reject!, :repeated_permutation, :repeated_combination, :reject, :reverse_each, :replace, :reverse, :reverse!, :reduce, :remove_instance_variable, :respond_to?] </span><br></pre></td></tr></table></figure>

<p>方法名冲突时可能会出现bug，这种粗暴的修改类的方法也叫做——<strong>猴子补丁(Monkeypatch)</strong></p>
<p>一般来说，添加新方法比修改已有的方法安全。</p>
<h2 id="类的真相"><a href="#类的真相" class="headerlink" title="类的真相"></a>类的真相</h2><h3 id="对象中有什么"><a href="#对象中有什么" class="headerlink" title="对象中有什么"></a>对象中有什么</h3><p><img src="/img/Metaprogramming/image-20210521101716315.png" alt="image-20210521101716315"></p>
<p>假如说，my_method()是MyClass的一个实例方法，这就意味着这个方法定义在MyClass中，需要定义一个MyClass的实例才能调用它。</p>
<p>同一个类的对象共享同样的方法，但不共享实例变量。</p>
<h3 id="类的真相-1"><a href="#类的真相-1" class="headerlink" title="类的真相"></a>类的真相</h3><p>类本身也是对象。</p>
<p>其他语言只允许你读取类的相关信息，而Ruby允许你在运行时修改这些信息。</p>
<p><strong>Ruby的类继承自它的超类</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :006 &gt; Array.superclass</span><br><span class="line"> =&gt; Object </span><br><span class="line">2.7.2 :007 &gt; Object.superclass</span><br><span class="line"> =&gt; BasicObject </span><br><span class="line">2.7.2 :008 &gt; BasicObject.superclass</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :009 &gt; Class.superclass</span><br><span class="line"> =&gt; Module </span><br></pre></td></tr></table></figure>

<p>Ruby中，类与模块这两个概念十分接近，保留这两个概念的主要原因是为了获得代码的清晰性。</p>
<p>把自己的代码include到别的代码——Module</p>
<p>希望某段代码被实例化或被继承——Class</p>
<p><img src="/img/Metaprogramming/image-20210521103307143.png" alt="image-20210521103307143"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :010 &gt; class MyClass;</span><br><span class="line">2.7.2 :011 &gt; end</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :012 &gt; obj1 = MyClass.new</span><br><span class="line"> =&gt; #&lt;MyClass:0x00007f8fa4353dc0&gt; </span><br><span class="line">2.7.2 :013 &gt; obj2=MyClass.new</span><br><span class="line"> =&gt; #&lt;MyClass:0x00007f8fa43f14d0&gt; </span><br><span class="line">2.7.2 :014 &gt; MyClass.superclass</span><br><span class="line"> =&gt; Object </span><br><span class="line">2.7.2 :016 &gt; Class.new(MyClass)</span><br><span class="line"> =&gt; #&lt;Class:0x00007f8fa42d7608&gt; </span><br><span class="line">2.7.2 :017 &gt; Class.new(MyClass).superclass</span><br><span class="line"> =&gt; MyClass </span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>任何以大写字母开头的引用(包括类名和模块名)都是常量。</p>
<p>Ruby中，常量和变量的区别在于它们的scope不同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :018 &gt; module MyModule</span><br><span class="line">2.7.2 :019 &gt;   MyConstant = &quot;A&quot;</span><br><span class="line">2.7.2 :020 &gt;   class MyClass</span><br><span class="line">2.7.2 :021 &gt;     MyConstant = &quot;B&quot;</span><br><span class="line">2.7.2 :022 &gt;   end</span><br><span class="line">2.7.2 :023 &gt; end</span><br></pre></td></tr></table></figure>

<p>我们可以使用Module来组织常量</p>
<h3 id="对象和类的小结"><a href="#对象和类的小结" class="headerlink" title="对象和类的小结"></a>对象和类的小结</h3><table>
<thead>
<tr>
<th></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>对象</td>
<td>一组实例变量+指向其类的引用</td>
</tr>
<tr>
<td>类</td>
<td>一个对象+一组实例方法+对其superclass的引用</td>
</tr>
</tbody></table>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bookworm</span></span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Text</span></span></span><br></pre></td></tr></table></figure>

<h2 id="缺失的连接线"><a href="#缺失的连接线" class="headerlink" title="缺失的连接线"></a>缺失的连接线</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :026 &gt; Object.class</span><br><span class="line"> =&gt; Class </span><br><span class="line">2.7.2 :027 &gt; Module.superclass</span><br><span class="line"> =&gt; Object </span><br><span class="line">2.7.2 :028 &gt; Class.class</span><br><span class="line"> =&gt; Class </span><br></pre></td></tr></table></figure>

<h2 id="调用方法时发生了什么？"><a href="#调用方法时发生了什么？" class="headerlink" title="调用方法时发生了什么？"></a>调用方法时发生了什么？</h2><ol>
<li><strong>方法查找</strong></li>
<li><strong>执行方法</strong></li>
</ol>
<h3 id="方法查找"><a href="#方法查找" class="headerlink" title="方法查找"></a>方法查找</h3><p>调用一个方法前，Ruby会在对象的类中查找那个方法</p>
<p><strong>两个概念：receiver+ancestors chain</strong></p>
<p>receiver就是你调用方法所在的对象</p>
<p><strong>Ruby首先在接受者的类中查找，然后顺着祖先链向上查找，直到找到这个方法为止</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :037 &gt; class MyClass</span><br><span class="line">2.7.2 :038 &gt;   def my_method;</span><br><span class="line">2.7.2 :039 &gt;     &#x27;my_method()&#x27;;</span><br><span class="line">2.7.2 :040 &gt;   end</span><br><span class="line">2.7.2 :041 &gt; end</span><br><span class="line"> =&gt; :my_method </span><br><span class="line">2.7.2 :042 &gt; class MySubclass &lt; MyClass</span><br><span class="line">2.7.2 :043 &gt; end</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :044 &gt; obj = MySubclass.new</span><br><span class="line"> =&gt; #&lt;MySubclass:0x00007f8fa44b33c8&gt; </span><br><span class="line">2.7.2 :045 &gt; obj.my_method()</span><br><span class="line"> =&gt; &quot;my_method()&quot; </span><br></pre></td></tr></table></figure>

<p><strong>“向右一步，再向上”——先向右一步来到接收者所在的类，然后沿着祖先链向上查找。</strong></p>
<p><strong>模块与方法查找</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :046 &gt; module M1</span><br><span class="line">2.7.2 :047 &gt;   def my_method</span><br><span class="line">2.7.2 :048 &gt;     &quot;M1#my_method()&quot;</span><br><span class="line">2.7.2 :049 &gt;   end</span><br><span class="line">2.7.2 :050 &gt; end</span><br><span class="line"> =&gt; :my_method </span><br><span class="line">2.7.2 :051 &gt; class C</span><br><span class="line">2.7.2 :052 &gt;   include M1</span><br><span class="line">2.7.2 :053 &gt; end</span><br><span class="line"> =&gt; C </span><br><span class="line">2.7.2 :054 &gt; class D &lt; C;</span><br><span class="line">2.7.2 :055 &gt; end</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :056 &gt; D.ancestors</span><br><span class="line"> =&gt; [D, C, M1, Object, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject] </span><br></pre></td></tr></table></figure>

<p>使用prepend方法，可以把module插入ancestors chain中包含它的该类的下方，而不是像include方法那样插入到上方。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :057 &gt; class C2</span><br><span class="line">2.7.2 :058 &gt;   prepend M1</span><br><span class="line">2.7.2 :059 &gt; end</span><br><span class="line"> =&gt; C2 </span><br><span class="line">2.7.2 :060 &gt; class D2 &lt; C2;</span><br><span class="line">2.7.2 :061 &gt; end</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :062 &gt; D2.ancestors</span><br><span class="line"> =&gt; [D2, M1, C2, Object, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject] </span><br></pre></td></tr></table></figure>

<p><strong>多重包含</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :063 &gt; module M1;</span><br><span class="line">2.7.2 :064 &gt; end</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :065 &gt; module M2</span><br><span class="line">2.7.2 :066 &gt;   include M1</span><br><span class="line">2.7.2 :067 &gt; end</span><br><span class="line"> =&gt; M2 </span><br><span class="line">2.7.2 :068 &gt; module M3</span><br><span class="line">2.7.2 :069 &gt;   prepend M1</span><br><span class="line">2.7.2 :070 &gt;   include M2</span><br><span class="line">2.7.2 :071 &gt; end</span><br><span class="line"> =&gt; M3 </span><br><span class="line">2.7.2 :072 &gt; M3.ancestors</span><br><span class="line"> =&gt; [M1, M3, M2] </span><br></pre></td></tr></table></figure>

<p>如果该module已经存在于祖先链中，那么Ruby会悄悄忽略这个include或prepend指令。</p>
<p><strong>Kernel模块</strong></p>
<p>print方法其实是Kernel模块的私有实例方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :075 &gt; Kernel.private_instance_methods.grep(/^pr/)</span><br><span class="line"> =&gt; [:proc, :printf, :print] </span><br></pre></td></tr></table></figure>

<p>Object类包含了kernel模块，所以无论哪个对象都可以随意调用Kernel模块的方法。</p>
<p><strong>内核方法</strong>——给Kernel模块增加一个方法</p>
<h3 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h3><p>当前对象用self表示，因此可以用self关键字来对他进行访问。任何时刻，只有一个对象能充当当前对象，而且没有哪个对象可以长期充当此角色。</p>
<p><strong>顶层上下文——top level context</strong></p>
<p>对象main有时被称为顶层上下文—-此时开发者处在堆栈的顶层，要没还没有调用任何方法，要么调用的方法已经返回。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :079 &gt; self</span><br><span class="line"> =&gt; main </span><br><span class="line">2.7.2 :080 &gt; self.class</span><br><span class="line"> =&gt; Object </span><br></pre></td></tr></table></figure>

<p>在类和模块定义之中，self的角色由这个类或者模块本身担任。</p>
<h3 id="细化"><a href="#细化" class="headerlink" title="细化"></a>细化</h3><p>细化解决的问题是：解决破坏性的猴子补丁</p>
<p><strong>细化</strong>用法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :081 &gt; module StringExtensions</span><br><span class="line">2.7.2 :082 &gt;   refine String do</span><br><span class="line">2.7.2 :083 &gt;     def to_alphanumeric</span><br><span class="line">2.7.2 :084 &gt;       gsub(/[^\w\s]/,&#x27;&#x27;)</span><br><span class="line">2.7.2 :085 &gt;     end</span><br><span class="line">2.7.2 :086 &gt;   end</span><br><span class="line">2.7.2 :087 &gt; end</span><br><span class="line"> =&gt; #&lt;refinement:String@StringExtensions&gt;</span><br></pre></td></tr></table></figure>

<p>细化在默认情况下不生效，为了使细化生效，必须调用using方法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :081 &gt; module StringExtensions</span><br><span class="line">2.7.2 :082 &gt;   refine String do</span><br><span class="line">2.7.2 :083 &gt;     def to_alphanumeric</span><br><span class="line">2.7.2 :084 &gt;       gsub(/[^\w\s]/,&#x27;&#x27;)</span><br><span class="line">2.7.2 :085 &gt;     end</span><br><span class="line">2.7.2 :086 &gt;   end</span><br><span class="line">2.7.2 :087 &gt; end</span><br><span class="line"> =&gt; #&lt;refinement:String@StringExtensions&gt; </span><br><span class="line">2.7.2 :088 &gt; module StringStuff</span><br><span class="line">2.7.2 :089 &gt;   using StringExtensions</span><br><span class="line">2.7.2 :090 &gt;   &quot;my_string..&quot;.to_alphanumeric</span><br><span class="line">2.7.2 :091 &gt; end</span><br><span class="line"> =&gt; &quot;my_string&quot; </span><br><span class="line">2.7.2 :092 &gt; &quot;my_string...##&quot;.to_alphanumeric</span><br><span class="line">Traceback (most recent call last):</span><br></pre></td></tr></table></figure>

<p>细化只在两种场合有效：refine代码内部，从using语句的位置开始到模块结束。</p>
<p>细化并非全局性的，所以它不会带来类所具有的问题，可以让细化只作用在你希望生效的地方。</p>
<h2 id="混乱的模块"><a href="#混乱的模块" class="headerlink" title="混乱的模块"></a>混乱的模块</h2><h2 id="对象模型小结"><a href="#对象模型小结" class="headerlink" title="对象模型小结"></a>对象模型小结</h2><ul>
<li>对象由一组实例变量和类的引用组成。</li>
<li>对象的方法存在于对象所属的类中（对类来说是实例方法）。类本身是Class类的对象。类的名字只是一个常量。</li>
<li>Class类是Module的子类。一个模块基本上就是由一组方法组成的包。类除了具有模块的特性之外，还可以被实例化（使用new方法） ，或者按一定的层次结构来组织（使用superclass方法）。</li>
<li>常量像文件系统一样，是按照树形结构组织的。其中，模块和类的名字扮演目录的角色，其他普通的常量则扮演文件的角色。</li>
<li>每个类都有一个祖先链，这个链从每个类自己开始，向上直到Basicobject结束。</li>
<li>调用方法时， Ruby首先向右找到接收者所属的类，然后向上查找祖先链，直到找到该方法或到达链的顶端为止。</li>
<li>在类中包含一个模块（使用include方法）时，这个模块会被插入祖先链中，位置就在类的正上方；而使用prepend方法包含一个模块时，这个模块也会被插入祖先链中，位置在类的正下方。</li>
<li>调用一个方法时，接收者会扮演self的角色。</li>
<li>定义一个模块（或类）时，该模块会扮演self的角色。实例变量永远被认定为self的实例变量。</li>
<li>任何没有明确指定接收者的方法调用，都当做是调用self的方法。</li>
<li>细化就像在原来的类上添加了一块补丁，而且它会覆盖正常的方法查找。此外，细化只在程序的部分区域生效：从using语句的位置开始，直到模块结束，或者直到文件结束。</li>
</ul>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><strong>static type checking</strong></p>
<p>Java——Java的编译器会控制代码之间的交谈，对于每一次方法的调用，编译器都会检查接受对象是否有一个匹配的方法，这就叫做——<strong>静态类型检查</strong></p>
<p>所以Java也叫做静态语言</p>
<p><strong>动态语言包括Python&amp;Ruby</strong></p>
<p>在某个对象上调用特定的方法时，系统不会发出警告，直到真正的调用此方法时，才会提示无法响应调用。</p>
<h2 id="代码繁复的问题"><a href="#代码繁复的问题" class="headerlink" title="代码繁复的问题"></a>代码繁复的问题</h2><h3 id="老系统"><a href="#老系统" class="headerlink" title="老系统"></a>老系统</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">DS类下面有很多很多方法！都是拿取对应信息的，看起来就很繁复的样子！</span><br></pre></td></tr></table></figure>

<h3 id="代码的优雅化🐶"><a href="#代码的优雅化🐶" class="headerlink" title="代码的优雅化🐶"></a>代码的优雅化🐶</h3><p><strong>动态方法</strong></p>
<p><strong>method missing</strong></p>
<h2 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h2><p>调用一个方法——给一个对象发送一个消息</p>
<h3 id="动态调用方法"><a href="#动态调用方法" class="headerlink" title="动态调用方法"></a>动态调用方法</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">2.7.2 :008 &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="meta">2.7.2 :009 &gt;</span>   <span class="function"><span class="keyword">def</span> <span class="title">my_method</span><span class="params">(my_arg)</span></span></span><br><span class="line"><span class="meta">2.7.2 :010 &gt;</span>     my_arg * <span class="number">2</span></span><br><span class="line"><span class="meta">2.7.2 :011 &gt;</span>   end</span><br><span class="line"><span class="meta">2.7.2 :012 &gt;</span> end</span><br><span class="line"> =&gt; <span class="symbol">:my_method</span> </span><br><span class="line"><span class="meta">2.7.2 :013 &gt;</span> obj = MyClass</span><br><span class="line"> =&gt; MyClass </span><br><span class="line"><span class="meta">2.7.2 :014 &gt;</span> obj = MyClass.new</span><br><span class="line"> =&gt; #&lt;MyClass:0x00007f8d721c8cc8&gt; </span><br><span class="line"><span class="meta">2.7.2 :015 &gt;</span> obj.send(<span class="symbol">:my_method</span>,<span class="number">3</span>)</span><br><span class="line"> =&gt; <span class="number">6</span> </span><br><span class="line"><span class="meta">2.7.2 :016 &gt;</span> obj.my_method(<span class="number">3</span>)</span><br><span class="line"> =&gt; <span class="number">6</span> </span><br></pre></td></tr></table></figure>

<p><strong>send方法里所调用的方法成为了参数</strong></p>
<p><strong>Symbol</strong>是不可修改的，&amp;，特别适合用来表示方法名。</p>
<h3 id="动态定义方法"><a href="#动态定义方法" class="headerlink" title="动态定义方法"></a>动态定义方法</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">2.7.2 :001 &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="meta">2.7.2 :002 &gt;</span>   define_method <span class="symbol">:my_method</span> do <span class="params">| my_arg|</span></span><br><span class="line"><span class="meta">2.7.2 :003 &gt;</span>   	my_arg*<span class="number">3</span></span><br><span class="line"><span class="meta">2.7.2 :004 &gt;</span>   end</span><br><span class="line"><span class="meta">2.7.2 :005 &gt;</span> end</span><br><span class="line"> =&gt; <span class="symbol">:my_method</span> </span><br><span class="line"><span class="meta">2.7.2 :006 &gt;</span> obj = MyClass.new</span><br><span class="line"> =&gt; #&lt;MyClass:0x00007f8d6f67a990&gt; </span><br><span class="line"><span class="meta">2.7.2 :007 &gt;</span> obj.my_method(<span class="number">2</span>)</span><br><span class="line"> =&gt; <span class="number">6</span> </span><br></pre></td></tr></table></figure>

<p>这种在运行时定义方法的技术称为动态方法——<strong>Dynamic Method</strong></p>
<h3 id="重构Computer类"><a href="#重构Computer类" class="headerlink" title="重构Computer类"></a>重构Computer类</h3><p>核心就是接收String || Symbol 作为参数，并调用方法。</p>
<h2 id="method-missing方法"><a href="#method-missing方法" class="headerlink" title="method_missing方法"></a>method_missing方法</h2><p>什么是动态语言，show me the code</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">2.7.2 :020 &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Lawyer</span></span></span><br><span class="line"><span class="meta">2.7.2 :021 &gt;</span> end</span><br><span class="line"> =&gt; nil </span><br><span class="line"><span class="meta">2.7.2 :022 &gt;</span> nick = Lawyer.new</span><br><span class="line"> =&gt; #&lt;Lawyer:0x00007f8d6bce27f0&gt; </span><br><span class="line"><span class="meta">2.7.2 :023 &gt;</span> nick.talk_simple</span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">        <span class="number">1</span>: from (irb)<span class="symbol">:</span><span class="number">23</span></span><br><span class="line">NoMethodError (undefined method <span class="string">`talk_simple&#x27; for #&lt;Lawyer:0x00007f8d6bce27f0&gt;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">2.7.2 :025 &gt;</span> Lawyer.ancestors</span><br><span class="line"> =&gt; [Lawyer, ActiveSupport::Dependencies::ZeitwerkIntegration::RequireDependency, ActiveSupport::ForkTracker::CoreExtPrivate, ActiveSupport::ForkTracker::CoreExt, ActiveSupport::ToJsonWithActiveSupportEncoder, Object, JSON::Ext::Generator::GeneratorMethods::Object, ActiveSupport::Dependencies::Loadable, ActiveSupport::Tryable, Kernel, BasicObject] </span><br></pre></td></tr></table></figure>

<h3 id="覆写method-missing方法"><a href="#覆写method-missing方法" class="headerlink" title="覆写method_missing方法"></a>覆写method_missing方法</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">2.7.2 :026 &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Lawyer</span></span></span><br><span class="line"><span class="meta">2.7.2 :027 &gt;</span>   <span class="function"><span class="keyword">def</span> <span class="title">method_missing</span><span class="params">(method, *args)</span></span></span><br><span class="line"><span class="meta">2.7.2 :028 &gt;</span>     puts <span class="string">&quot;You called: <span class="subst">#&#123;method&#125;</span> (<span class="subst">#&#123;args.join(<span class="string">&#x27;,&#x27;</span>)&#125;</span>)&quot;</span></span><br><span class="line"><span class="meta">2.7.2 :029 &gt;</span>   end</span><br><span class="line"><span class="meta">2.7.2 :030 &gt;</span> end</span><br><span class="line"> =&gt; <span class="symbol">:method_missing</span> </span><br><span class="line"><span class="meta">2.7.2 :032 &gt;</span> lawyer = Lawyer.new</span><br><span class="line"> =&gt; #&lt;Lawyer:0x00007f8d6be08710&gt; </span><br><span class="line"><span class="meta">2.7.2 :034 &gt;</span> lawyer.send(<span class="symbol">:talk_simple</span>,<span class="number">2</span>)</span><br><span class="line">You <span class="symbol">called:</span> talk_simple (<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="幽灵方法"><a href="#幽灵方法" class="headerlink" title="幽灵方法"></a>幽灵方法</h3><p>因为要调用的方法其实不存在，所以也叫它幽灵方法。</p>
<h2 id="消灭bug"><a href="#消灭bug" class="headerlink" title="消灭bug"></a>消灭bug</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :121 &gt; class Roulette</span><br><span class="line">2.7.2 :122 &gt;   def method_missing(name, *args)</span><br><span class="line">2.7.2 :123 &gt;     person = name.to_s.capitalize</span><br><span class="line">2.7.2 :124 &gt;     3.times do</span><br><span class="line">2.7.2 :125 &gt;       number = rand(10) + 1</span><br><span class="line">2.7.2 :126 &gt;       puts &quot;#&#123;number&#125;----&quot;</span><br><span class="line">2.7.2 :127 &gt;     end</span><br><span class="line">2.7.2 :128 &gt;     puts  &quot;#&#123;person&#125; got a #&#123;number&#125;&quot;</span><br><span class="line">2.7.2 :129 &gt;   end</span><br><span class="line">2.7.2 :130 &gt; end</span><br></pre></td></tr></table></figure>

<p><img src="/img/Metaprogramming/image-20210518225149082.png" alt="image-20210518225149082"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :156 &gt; class Roulette</span><br><span class="line">2.7.2 :157 &gt;   def method_missing(name, *args)</span><br><span class="line">2.7.2 :158 &gt;     person = name.to_s.capitalize</span><br><span class="line">2.7.2 :159 &gt;     super unless %w[Bob Tim Longbiu].include? p</span><br><span class="line">erson</span><br><span class="line">2.7.2 :160 &gt;     number = 0</span><br><span class="line">2.7.2 :161 &gt;     3.times do</span><br><span class="line">2.7.2 :162 &gt;       number = rand(10) +1</span><br><span class="line">2.7.2 :163 &gt;       puts &quot;#&#123;number&#125;---&quot;</span><br><span class="line">2.7.2 :164 &gt;     end</span><br><span class="line">2.7.2 :165 &gt;     &quot;#&#123;person&#125; got a #&#123;number&#125;&quot;</span><br><span class="line">2.7.2 :166 &gt;   end</span><br><span class="line">2.7.2 :167 &gt; end</span><br></pre></td></tr></table></figure>

<h2 id="白板类"><a href="#白板类" class="headerlink" title="白板类"></a>白板类</h2><p>调用类的某个方法返回nil时，可以使用此条语句列出Object中所有以d开头的实例方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.instance_methods.grep &#x2F;^d&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="BasicObject"><a href="#BasicObject" class="headerlink" title="BasicObject"></a>BasicObject</h3><p>继承BasicObject类是最简单的定义白板类的方法。</p>
<h3 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h3><table>
<thead>
<tr>
<th>name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>undef_method</td>
<td>删除所有（包括继承来的）方法</td>
</tr>
<tr>
<td>remove_method</td>
<td>仅删除接受者自己的方法</td>
</tr>
</tbody></table>
<h3 id="修改Computer"><a href="#修改Computer" class="headerlink" title="修改Computer"></a>修改Computer</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> &lt; BasicObject</span></span><br><span class="line">	……</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>幽灵方法产生风险的根本原因是它们并非真正的方法，它们只是对方法调用的拦截。</p>
<p>有动态方法则是普通的方法，不过它们不是用def定义，而是用define_method定义，它们的行为跟其他方法没什么两样。</p>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>块可以用来控制<strong>作用域(scope)</strong>,作用域是变量和方法可用性范围。</p>
<h2 id="学习代码块"><a href="#学习代码块" class="headerlink" title="学习代码块"></a>学习代码块</h2><h3 id="代码块学习路线"><a href="#代码块学习路线" class="headerlink" title="代码块学习路线"></a>代码块学习路线</h3><ul>
<li>代码块的基础知识</li>
<li>作用域的基础知识：用代码块携带变量穿越作用域</li>
<li>通过传递块给instance_eval方法来控制作用域</li>
<li>怎样把块转换为诸如Proc和lambda这样的可调用对象，供以后调用</li>
</ul>
<h3 id="代码块基础知识"><a href="#代码块基础知识" class="headerlink" title="代码块基础知识"></a>代码块基础知识</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_method</span><span class="params">(a,b)</span></span></span><br><span class="line">	a+<span class="keyword">yield</span>(a,b)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :103 &gt; def a_method(a,b)</span><br><span class="line">2.7.2 :104 &gt;   a+yield(a,b)</span><br><span class="line">2.7.2 :105 &gt; end</span><br><span class="line"> =&gt; :a_method </span><br><span class="line">2.7.2 :106 &gt; a_method(1,2) &#123;|x,y| (x+y)*3&#125;</span><br><span class="line"> =&gt; 10 </span><br></pre></td></tr></table></figure>

<p>代码块可以用大括号定义，也可以用do……end关键字定义，通常来说，只有一行的块用大括号，而多行的块用do……end。</p>
<p>只有调用一个方法时，才可以定义一个块。块会被直接传递给这个方法，该方法可以用yield关键字调用这个块。</p>
<p><strong>使用Kernel#block_given?方法询问当前的方法调用是否包含块</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :107 &gt; def a_method</span><br><span class="line">2.7.2 :108 &gt;   return yield if block_given?</span><br><span class="line">2.7.2 :109 &gt;   &#x27;no block&#x27;</span><br><span class="line">2.7.2 :110 &gt; end</span><br><span class="line"> =&gt; :a_method </span><br><span class="line">2.7.2 :111 &gt; a_method</span><br><span class="line"> =&gt; &quot;no block&quot; </span><br><span class="line">2.7.2 :112 &gt; a_method &#123; &quot;here is a block&quot; &#125;</span><br><span class="line"> =&gt; &quot;here is a block&quot; </span><br></pre></td></tr></table></figure>

<h2 id="Ruby的-符号"><a href="#Ruby的-符号" class="headerlink" title="Ruby的#符号"></a><del>Ruby的#符号</del></h2><h3 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a><del>using关键字</del></h3><h2 id="代码块是闭包"><a href="#代码块是闭包" class="headerlink" title="代码块是闭包"></a>代码块是闭包</h2><p>代码块还可以把变量偷偷带出原来的作用域。</p>
<p>代码块不能独立的运行。<img src="/img/Metaprogramming/screenshot-20210521-170353.png" alt="screenshot-20210521-170353"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :128 &gt; def my_method</span><br><span class="line">2.7.2 :129 &gt;   x = &quot;goodbye&quot;</span><br><span class="line">2.7.2 :130 &gt;   yield(&quot;cruel&quot;)</span><br><span class="line">2.7.2 :131 &gt; end</span><br><span class="line"> =&gt; :my_method </span><br><span class="line">2.7.2 :132 &gt; x = &quot;hello&quot;</span><br><span class="line"> =&gt; &quot;hello&quot; </span><br><span class="line">2.7.2 :133 &gt; my_method &#123; |y| &quot;#&#123;x&#125;, #&#123;y&#125; world&quot; &#125;</span><br><span class="line"> =&gt; &quot;hello, cruel world&quot; </span><br><span class="line">2.7.2 :134 &gt; my_method &#123; |x| &quot;#&#123;x&#125;, world&quot; &#125;</span><br><span class="line"> =&gt; &quot;cruel, world&quot; </span><br></pre></td></tr></table></figure>

<p>绑定在代码块里的变量在代码块结束之后，也跟着结束了。基于这样的特性，代码块也叫做闭包——closure。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><strong>此书里一段很魔幻的话</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">设想你是一个微型调试器（debugger） ，正沿着代码穿过一段Ruby程序。你从一条语句蹦到另一条语句，直到遇到一个断点。看看周围的环境，这就是你的作用域。</span><br><span class="line"></span><br><span class="line">作用域里到处都是绑定。你的脚下有一堆局部变量。抬头向上看，你会发现自己站在一个对象里，它有自己的方法和实例变量。这个对象就是当前对象，也称为self。不远处有一棵挂满常量的树，你可以用它们来确定自己的位置。更远的地方，还有一组全局变量。</span><br></pre></td></tr></table></figure>

<p><strong>Ruby的作用域之间是截然分开的，一旦进入一个新的作用域，原先的绑定会被替换成一组新的绑定。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :149 &gt; def a_scope</span><br><span class="line">2.7.2 :150 &gt;   $var = &quot;some value&quot;</span><br><span class="line">2.7.2 :151 &gt; end</span><br><span class="line"> =&gt; :a_scope </span><br><span class="line">2.7.2 :152 &gt; def another_scope</span><br><span class="line">2.7.2 :153 &gt;   $var</span><br><span class="line">2.7.2 :154 &gt; end</span><br><span class="line"> =&gt; :another_scope </span><br><span class="line">2.7.2 :155 &gt; a_scope</span><br><span class="line"> =&gt; &quot;some value&quot; </span><br><span class="line">2.7.2 :156 &gt; another_scope</span><br><span class="line"> =&gt; &quot;some value&quot; </span><br></pre></td></tr></table></figure>

<p>任何人都可以修改全局变量，开发者几乎无法确定是谁修改了它们。所以尽量不用$全局变量。有时顶级实例变量代替全局变量。</p>
<h3 id="作用域门"><a href="#作用域门" class="headerlink" title="作用域门"></a>作用域门</h3><p>程序会在三个地方关闭前一个作用域，同时打开一个新的作用域：</p>
<ul>
<li>类定义</li>
<li>模块定义</li>
<li>方法</li>
</ul>
<p>我们可以这样说：class，module，def关键字都对应一个作用域门。</p>
<h3 id="扁平化作用域"><a href="#扁平化作用域" class="headerlink" title="扁平化作用域"></a>扁平化作用域</h3><p><strong>使用Class.new和define_method来穿越作用域门</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :170 &gt; my_var = &quot;Success&quot;</span><br><span class="line"> =&gt; &quot;Success&quot; </span><br><span class="line">2.7.2 :163 &gt; MyClass = Class.new do</span><br><span class="line">2.7.2 :164 &gt;   puts &quot;#&#123;my_var&#125; in the class definition!&quot;</span><br><span class="line">2.7.2 :165 &gt;   define_method :my_method do</span><br><span class="line">2.7.2 :166 &gt;   &quot;# &#123;my_var&#125; in the method&quot;</span><br><span class="line">2.7.2 :167 &gt;   end</span><br><span class="line">2.7.2 :168 &gt; end</span><br><span class="line">Success in the class definition!</span><br><span class="line">(irb):163: warning: already initialized constant MyClass</span><br><span class="line">(irb):158: warning: previous definition of MyClass was here</span><br><span class="line"> =&gt; MyClass </span><br></pre></td></tr></table></figure>

<p><strong>共享作用域</strong></p>
<h3 id="闭包小结"><a href="#闭包小结" class="headerlink" title="闭包小结"></a>闭包小结</h3><p>每个Ruby作用域都包含一组绑定，不同作用域之间被作用域门分隔开来。</p>
<p>……</p>
<h2 id="instance-eval方法"><a href="#instance-eval方法" class="headerlink" title="instance_eval方法"></a>instance_eval方法</h2><p>这是另外一种混合代码和绑定的方式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :214 &gt; class MyClass</span><br><span class="line">2.7.2 :215 &gt;   def initialize</span><br><span class="line">2.7.2 :216 &gt;     @v = 1</span><br><span class="line">2.7.2 :217 &gt;   end</span><br><span class="line">2.7.2 :218 &gt; end</span><br><span class="line"> =&gt; :initialize </span><br><span class="line">2.7.2 :219 &gt; obj = MyClass.new</span><br><span class="line"> =&gt; #&lt;MyClass:0x00007f8fa39d4380 @v=1&gt; </span><br><span class="line">2.7.2 :220 &gt; obj.instance_eval do</span><br><span class="line">2.7.2 :221 &gt;   self</span><br><span class="line">2.7.2 :222 &gt;   @v</span><br><span class="line">2.7.2 :223 &gt; end</span><br><span class="line"> =&gt; 1 </span><br><span class="line">2.7.2 :224 &gt; v = 2</span><br><span class="line"> =&gt; 2 </span><br><span class="line">2.7.2 :225 &gt; obj.instance_eval &#123; @v = v &#125;</span><br><span class="line"> =&gt; 2 </span><br><span class="line">2.7.2 :226 &gt; obj.instance_eval &#123; @v&#125;</span><br><span class="line"> =&gt; 2 </span><br></pre></td></tr></table></figure>

<p>我们把传递给instance_eval方法的代码块称为<strong>上下文探针</strong>，因为它就像是一个深入到对象中的代码片段，并可以对那个对象进行操作。</p>
<h3 id="打破封装"><a href="#打破封装" class="headerlink" title="打破封装"></a>打破封装</h3><p>Instance_exec方法稍微灵活一些，允许对代码块传入参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :256 &gt; class C</span><br><span class="line">2.7.2 :257 &gt;   def initialize</span><br><span class="line">2.7.2 :258 &gt;     @x=1</span><br><span class="line">2.7.2 :259 &gt;   end</span><br><span class="line">2.7.2 :260 &gt; end</span><br><span class="line"> =&gt; :initialize </span><br><span class="line">2.7.2 :261 &gt; class D</span><br><span class="line">2.7.2 :262 &gt;   def twisted_method</span><br><span class="line">2.7.2 :263 &gt;     @y = 2</span><br><span class="line">2.7.2 :264 &gt;     C.new.instance_eval &#123; &quot;@x: #&#123;@x&#125;, @y: #&#123;@y&#125;&quot; &#125;</span><br><span class="line">2.7.2 :265 &gt;   end</span><br><span class="line">2.7.2 :266 &gt; end</span><br><span class="line"> =&gt; :twisted_method </span><br><span class="line">2.7.2 :267 &gt; D.new.twisted_method</span><br><span class="line"> =&gt; &quot;@x: 1, @y: &quot; </span><br></pre></td></tr></table></figure>

<p><strong>如上代码所示：instance_eval方法把receiver变成当前对象self时，调用者的实例变量就落在了作用域范围外面。</strong></p>
<p><em><strong>Instance_exec方法可以解决此问题</strong></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :275 &gt; class D</span><br><span class="line">2.7.2 :276 &gt;   def twisted_method</span><br><span class="line">2.7.2 :277 &gt;     @y = 2</span><br><span class="line">2.7.2 :278 &gt;     C.new.instance_exec(@y) &#123;|y| &quot;@x: #&#123;@x&#125;, @y: #&#123;y&#125;&quot; &#125;</span><br><span class="line">2.7.2 :279 &gt;   end</span><br><span class="line">2.7.2 :280 &gt; end</span><br><span class="line"> =&gt; :twisted_method </span><br><span class="line">2.7.2 :281 &gt; D.new.twisted_method</span><br><span class="line"> =&gt; &quot;@x: 1, @y: 2&quot; </span><br></pre></td></tr></table></figure>

<h3 id="洁净室"><a href="#洁净室" class="headerlink" title="洁净室"></a>洁净室</h3><p>洁净室只是一个用来执行块的环境。它可以提供若干有用的方法供代码块调用。但是，一个理想化的洁净室是不应该有任何方法或者实例变量的。因为这样的话，其中的方法名或实例变量名有可能和代码块从其环境中带来的名字冲突。</p>
<p>因此，BasicObject的实例往往用来充当洁净室，<strong>因为它是白板类</strong>，几乎没有任何方法。</p>
<h2 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h2><p>从底层看，使用代码块的两步：</p>
<ul>
<li>将代码打包备用</li>
<li>调用代码块，执行代码</li>
</ul>
<p>这种打包代码，之后调用的机制主要有：</p>
<ul>
<li>使用proc，proc是由块转换而来的对象</li>
<li>使用lambda，它是proc的变种</li>
<li>使用方法</li>
</ul>
<h3 id="Proc对象"><a href="#Proc对象" class="headerlink" title="Proc对象"></a>Proc对象</h3><p>Ruby中的绝大多数东西都是对象，但是代码块不是。那么想存储一个块供以后执行则需要一个对象。</p>
<p>Ruby在标准库中提供了一个名为proc的类。proc就是由块转换而来的对象。</p>
<p>开发者可以把代码块传给Proc.new方法来创建一个proc，并使用Proc#call方法来执行这个由代码块转换而来的对象——延迟执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :002 &gt; inc  = Proc.new &#123; |x| x+1&#125;</span><br><span class="line"> =&gt; #&lt;Proc:0x00007fde808a7620 (irb):2&gt; </span><br><span class="line">2.7.2 :003 &gt; inc.call(2)</span><br><span class="line"> =&gt; 3 </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :004 &gt; dec = lambda &#123; |x| x-1 &#125;</span><br><span class="line"> =&gt; #&lt;Proc:0x00007fde8087c100 (irb):4 (lambda)&gt; </span><br><span class="line">2.7.2 :005 &gt; dec.class</span><br><span class="line"> =&gt; Proc </span><br><span class="line">2.7.2 :006 &gt; dec.call(2)</span><br><span class="line"> =&gt; 1 </span><br></pre></td></tr></table></figure>

<p><em>p = -&gt;(x) {x+1}<em><strong>等价于</strong></em>p=lambda{|x| x+1}</em></p>
<p><strong>使用&amp;可以实现Proc和代码块的互相转换</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :010 &gt; p = my_method&#123;|name| &quot;hello #&#123;name&#125;&quot;&#125;</span><br><span class="line"> =&gt; #&lt;Proc:0x00007fde7aba5c38 (irb):10&gt; </span><br><span class="line">2.7.2 :011 &gt; p.class</span><br><span class="line"> =&gt; Proc </span><br><span class="line">2.7.2 :012 &gt; p.call(&quot;Bill&quot;)</span><br><span class="line"> =&gt; &quot;hello Bill&quot; </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :013 &gt; def my_method(greeting)</span><br><span class="line">2.7.2 :014 &gt;   &quot;#&#123;greeting&#125;, #&#123;yield&#125;&quot;</span><br><span class="line">2.7.2 :015 &gt; end</span><br><span class="line"> =&gt; :my_method </span><br><span class="line">2.7.2 :017 &gt; my_proc = proc&#123;&quot;Bill&quot;&#125;</span><br><span class="line"> =&gt; #&lt;Proc:0x00007fde80c98310 (irb):17&gt; </span><br><span class="line">2.7.2 :018 &gt; my_method(&quot;hello&quot;,&amp;my_proc)</span><br><span class="line"> =&gt; &quot;hello, Bill&quot; </span><br></pre></td></tr></table></figure>

<p>调用如上的my_method方法时，&amp;操作符会把my_proc转换为代码块，再把代码块传给这个方法。</p>
<h3 id="Proc与Lambda的对比"><a href="#Proc与Lambda的对比" class="headerlink" title="Proc与Lambda的对比"></a>Proc与Lambda的对比</h3><p><strong>使用Proc#lambda？方法检测Proc是不是lambda</strong></p>
<p>Proc和lambda的重要差别有两个：</p>
<ul>
<li>return关键字</li>
<li>参数校验</li>
</ul>
<p>lambda中，return仅表示从这个lambda中返回</p>
<p>proc中，return表示从定义proc的作用域中返回</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :034 &gt; p = Proc.new &#123; |a,b| [a,b]&#125;</span><br><span class="line"> =&gt; #&lt;Proc:0x00007fde80c60910 (irb):34&gt; </span><br><span class="line">2.7.2 :035 &gt; p.arity</span><br><span class="line"> =&gt; 2 </span><br><span class="line">2.7.2 :036 &gt; p.call(1,2,3)</span><br><span class="line"> =&gt; [1, 2] </span><br><span class="line">2.7.2 :037 &gt; p.call(1)</span><br><span class="line"> =&gt; [1, nil] </span><br></pre></td></tr></table></figure>

<p>简单说：proc会把传来的参数调整成自己期望的形式，而lambda假如和自己所期望的形式不同，则抛出错误。</p>
<p>整体来说：lambda更直观，因为它更像是一个方法，它对参数数量要求严格，而且调用return时仅从代码中返回。</p>
<h3 id="Method对象"><a href="#Method对象" class="headerlink" title="Method对象"></a>Method对象</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :038 &gt; class MyClass</span><br><span class="line">2.7.2 :039 &gt;   def initialize(value)</span><br><span class="line">2.7.2 :040 &gt;     @x=value</span><br><span class="line">2.7.2 :041 &gt;   end</span><br><span class="line">2.7.2 :042 &gt;   def my_method</span><br><span class="line">2.7.2 :043 &gt;     @x</span><br><span class="line">2.7.2 :044 &gt;   end</span><br><span class="line">2.7.2 :045 &gt; end</span><br><span class="line"> =&gt; :my_method </span><br><span class="line">2.7.2 :046 &gt; object = MyClass.new(1)</span><br><span class="line"> =&gt; #&lt;MyClass:0x00007fde7b071a50 @x=1&gt; </span><br><span class="line">2.7.2 :048 &gt; m = object.method :my_method</span><br><span class="line"> =&gt; #&lt;Method: MyClass#my_method() (irb):42&gt; </span><br><span class="line">2.7.2 :049 &gt; m.call</span><br><span class="line"> =&gt; 1 </span><br></pre></td></tr></table></figure>

<p><strong>通过调用Kernel#method方法，可以获得一个用Method对象表示的方法，可以在以后使用Method#call方法对它进行调用。</strong></p>
<p>Method对象类似代码块或者lambda，实际上，可以通过Method#to_proc方法把Method对象转换为Proc。另外还可以通过define_method方法把代码块转换为方法。</p>
<h3 id="可调用对象小结"><a href="#可调用对象小结" class="headerlink" title="可调用对象小结"></a>可调用对象小结</h3><p>可调用对象是可以执行的代码片段，有以下几种：</p>
<ul>
<li>代码块（它们不是真正的“对象” ，但是它们是“可调用的” ）：在定义它们的作用域中执行。</li>
<li>proc： Proc类的对象跟代码块一样，也在定义自身的作用域中执行。</li>
<li>lambda：也是Proc类的对象，但是跟普通的proc有细微的差别。它跟块和proc一样都是闭包，因此也在定义自身的作用域中执行。</li>
<li>方法：绑定于一个对象，在所绑定对象的作用域中执行。它们也可以与这个作用域解除绑定，然后再重新绑定到另一个对象的作用域上。</li>
</ul>
<h2 id="编写领域专属语言-DSL"><a href="#编写领域专属语言-DSL" class="headerlink" title="编写领域专属语言(DSL)"></a>编写领域专属语言(DSL)</h2><h3 id="第一个领域专属语言"><a href="#第一个领域专属语言" class="headerlink" title="第一个领域专属语言"></a>第一个领域专属语言</h3><h2 id="改良的DSL"><a href="#改良的DSL" class="headerlink" title="改良的DSL"></a>改良的DSL</h2><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><h1 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h1><p><strong>定义RUby类实际上是在运行代码</strong></p>
<p><strong>宏类可以用来修改类</strong></p>
<p><strong>环绕别名可以在其他方法前后封装额外代码</strong></p>
<p>Ruby最优雅的特性之一：<strong>单体类</strong></p>
<h2 id="揭秘类定义"><a href="#揭秘类定义" class="headerlink" title="揭秘类定义"></a>揭秘类定义</h2><h3 id="深入类定义"><a href="#深入类定义" class="headerlink" title="深入类定义"></a>深入类定义</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.2 :061 &gt; class MyClass</span><br><span class="line">2.7.2 :062 &gt;   puts &quot;hello&quot;</span><br><span class="line">2.7.2 :063 &gt; end</span><br><span class="line">hello</span><br><span class="line"> =&gt; nil </span><br><span class="line">2.7.2 :064 &gt; result = class MyClass</span><br><span class="line">2.7.2 :065 &gt;   self</span><br><span class="line">2.7.2 :066 &gt; end</span><br><span class="line"> =&gt; MyClass </span><br><span class="line">2.7.2 :067 &gt; result</span><br><span class="line"> =&gt; MyClass </span><br></pre></td></tr></table></figure>

<h3 id="当前类"><a href="#当前类" class="headerlink" title="当前类"></a>当前类</h3><p>不管处在Ruby程序的哪个位置，总存在一个当前对象：self。同样也纵使有一个当前类（或模块）存在。</p>
<p><strong>class_eval方法</strong></p>
<p>class_eval方法会在一个已存在类的上下文中执行一个块。</p>
<p>class_eval会同时修改self和当前类</p>
<ul>
<li><p>Ruby解释器总是追踪当前类（或模块）的引用。所有使用def定义的方法都成为当前类的实例方法。</p>
</li>
<li><p>在类定义中，当前类就是self—正在定义的类。</p>
</li>
<li><p>如果你有一个类的引用，则可以用class_eval （或module—eval）方法打开这个类。</p>
</li>
</ul>
<h3 id="类实例变量"><a href="#类实例变量" class="headerlink" title="类实例变量"></a>类实例变量</h3><p>Ruby解释器假定所有的实例变量都属于当前对象self，在类定义时也如此！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):002:1* class MyClass</span><br><span class="line">irb(main):003:1*   @my_var = 1</span><br><span class="line">irb(main):004:2*   def self.read;</span><br><span class="line">irb(main):005:2*     @my_var;</span><br><span class="line">irb(main):006:1*   end</span><br><span class="line">irb(main):007:2*   def write;</span><br><span class="line">irb(main):008:2*     @my_var = 2;</span><br><span class="line">irb(main):009:1*   end</span><br><span class="line">irb(main):010:2*   def read;</span><br><span class="line">irb(main):011:2*     @my_var;</span><br><span class="line">irb(main):012:1*   end</span><br><span class="line">irb(main):013:0&gt; end</span><br><span class="line">=&gt; :read</span><br><span class="line">irb(main):014:0&gt; obj = MyClass.new</span><br><span class="line">irb(main):015:0&gt; obj.read</span><br><span class="line">=&gt; nil</span><br><span class="line">irb(main):016:0&gt; obj.write</span><br><span class="line">=&gt; 2</span><br><span class="line">irb(main):017:0&gt; obj.read</span><br><span class="line">=&gt; 2</span><br><span class="line">irb(main):018:0&gt; MyClass.read</span><br><span class="line">=&gt; 1</span><br></pre></td></tr></table></figure>

<p>其中一个@my_var变量定义于obj充当self的时刻，它是obj对象的实例变量。</p>
<p>另外一个@my_var变量定义于MyClass充当self的时刻，它是MyClass的实例变量，也就是<strong>类实例变量</strong></p>
<p>一个类实例变量只可以被类本身所访问，而不能被类的实例或者子类所访问。</p>
<p><strong>类变量</strong></p>
<p>​    类变量以@@打头，它们可以被子类或者类的实例所使用。</p>
<h2 id="Taboo类"><a href="#Taboo类" class="headerlink" title="Taboo类"></a><del>Taboo类</del></h2><h2 id="单件方法"><a href="#单件方法" class="headerlink" title="单件方法"></a>单件方法</h2><h3 id="使用单件方法"><a href="#使用单件方法" class="headerlink" title="使用单件方法"></a>使用单件方法</h3><h3 id="类方法的真相"><a href="#类方法的真相" class="headerlink" title="类方法的真相"></a>类方法的真相</h3><h3 id="类宏"><a href="#类宏" class="headerlink" title="类宏"></a>类宏</h3><h2 id="单件类"><a href="#单件类" class="headerlink" title="单件类"></a>单件类</h2><h3 id="单件方法的神奇之处"><a href="#单件方法的神奇之处" class="headerlink" title="单件方法的神奇之处"></a>单件方法的神奇之处</h3><h3 id="揭秘单件类"><a href="#揭秘单件类" class="headerlink" title="揭秘单件类"></a>揭秘单件类</h3><h3 id="补充方法查找"><a href="#补充方法查找" class="headerlink" title="补充方法查找"></a>补充方法查找</h3><h2 id="模块的麻烦"><a href="#模块的麻烦" class="headerlink" title="模块的麻烦"></a>模块的麻烦</h2><h2 id="方法包装器"><a href="#方法包装器" class="headerlink" title="方法包装器"></a>方法包装器</h2><h3 id="方法别名"><a href="#方法别名" class="headerlink" title="方法别名"></a>方法别名</h3><h3 id="更多的方法包装器"><a href="#更多的方法包装器" class="headerlink" title="更多的方法包装器"></a>更多的方法包装器</h3><h3 id="解决Amazon难题"><a href="#解决Amazon难题" class="headerlink" title="解决Amazon难题"></a>解决Amazon难题</h3><h2 id="打破数学规律"><a href="#打破数学规律" class="headerlink" title="打破数学规律"></a>打破数学规律</h2><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><h1 id="编写代码的代码"><a href="#编写代码的代码" class="headerlink" title="编写代码的代码"></a>编写代码的代码</h1><h2 id="通向周末的编程之路"><a href="#通向周末的编程之路" class="headerlink" title="通向周末的编程之路"></a>通向周末的编程之路</h2><h3 id="老板的任务"><a href="#老板的任务" class="headerlink" title="老板的任务"></a>老板的任务</h3><h3 id="开发计划"><a href="#开发计划" class="headerlink" title="开发计划"></a>开发计划</h3><h2 id="Kernel-eval方法"><a href="#Kernel-eval方法" class="headerlink" title="Kernel#eval方法"></a>Kernel#eval方法</h2><h3 id="REST-Client的例子"><a href="#REST-Client的例子" class="headerlink" title="REST Client的例子"></a>REST Client的例子</h3><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><h3 id="irb的例子"><a href="#irb的例子" class="headerlink" title="irb的例子"></a>irb的例子</h3><h3 id="对比代码字符串与块"><a href="#对比代码字符串与块" class="headerlink" title="对比代码字符串与块"></a>对比代码字符串与块</h3><h3 id="eval方法的麻烦"><a href="#eval方法的麻烦" class="headerlink" title="eval方法的麻烦"></a>eval方法的麻烦</h3><h2 id="校验过的属性-第一步"><a href="#校验过的属性-第一步" class="headerlink" title="校验过的属性(第一步)"></a>校验过的属性(第一步)</h2><h2 id="校验过的属性-第二步"><a href="#校验过的属性-第二步" class="headerlink" title="校验过的属性(第二步)"></a>校验过的属性(第二步)</h2><h2 id="校验过的属性-第三步"><a href="#校验过的属性-第三步" class="headerlink" title="校验过的属性(第三步)"></a>校验过的属性(第三步)</h2><h2 id="校验过的属性-第四步"><a href="#校验过的属性-第四步" class="headerlink" title="校验过的属性(第四步)"></a>校验过的属性(第四步)</h2><h2 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h2><h3 id="更多钩子方法"><a href="#更多钩子方法" class="headerlink" title="更多钩子方法"></a>更多钩子方法</h3><h3 id="VCR的例子"><a href="#VCR的例子" class="headerlink" title="VCR的例子"></a>VCR的例子</h3><h2 id="校验过的属性-第五步"><a href="#校验过的属性-第五步" class="headerlink" title="校验过的属性(第五步)"></a>校验过的属性(第五步)</h2><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p><strong>根本没有什么元编程，从来只有编程而已</strong></p>
<h1 id="准备Rails之旅"><a href="#准备Rails之旅" class="headerlink" title="准备Rails之旅"></a>准备Rails之旅</h1><h1 id="Active-Record的设计"><a href="#Active-Record的设计" class="headerlink" title="Active Record的设计"></a>Active Record的设计</h1><h1 id="Active-Support的Concern模块"><a href="#Active-Support的Concern模块" class="headerlink" title="Active Support的Concern模块"></a>Active Support的Concern模块</h1><h1 id="alias-method-chain方法沉浮表"><a href="#alias-method-chain方法沉浮表" class="headerlink" title="alias_method_chain方法沉浮表"></a>alias_method_chain方法沉浮表</h1><h1 id="属性方法的发展"><a href="#属性方法的发展" class="headerlink" title="属性方法的发展"></a>属性方法的发展</h1><h1 id="最后的思考"><a href="#最后的思考" class="headerlink" title="最后的思考"></a>最后的思考</h1><h1 id="附录（思考）"><a href="#附录（思考）" class="headerlink" title="附录（思考）"></a>附录（思考）</h1><h2 id="include-amp-extend的使用场景"><a href="#include-amp-extend的使用场景" class="headerlink" title="include&amp;extend的使用场景"></a>include&amp;extend的使用场景</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">使用<span class="keyword">include</span>把一个<span class="class"><span class="keyword">module</span>包含在一个<span class="title">class</span>||<span class="title">module</span>中，使用.<span class="title">ancestors</span>可以发现，<span class="title">include</span>进来的<span class="title">class</span>||<span class="title">module</span>在上面,一般使用<span class="title">include</span>把自己写的<span class="title">module</span>包含进来</span></span><br><span class="line"><span class="symbol">eg:</span></span><br><span class="line"></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">001</span><span class="symbol">:</span><span class="number">1</span>* <span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">002</span><span class="symbol">:</span><span class="number">1</span>*   <span class="string">&quot;this is A&quot;</span></span><br><span class="line"><span class="meta">irb(main):003:0&gt;</span> end</span><br><span class="line">=&gt; <span class="string">&quot;this is A&quot;</span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">004</span><span class="symbol">:</span><span class="number">1</span>* <span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">005</span><span class="symbol">:</span><span class="number">1</span>*   <span class="keyword">include</span> A</span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">006</span><span class="symbol">:</span><span class="number">1</span>*   <span class="string">&quot;this is B&quot;</span></span><br><span class="line"><span class="meta">irb(main):007:0&gt;</span> end</span><br><span class="line">=&gt; <span class="string">&quot;this is B&quot;</span></span><br><span class="line"><span class="meta">irb(main):008:0&gt;</span> B.ancestors</span><br><span class="line">=&gt; [B, A, Object, Kernel, BasicObject]</span><br><span class="line"></span><br><span class="line">使用extend,继承其他<span class="class"><span class="keyword">module</span>，一般使用<span class="title">extend</span>继承<span class="title">ruby</span>自带的<span class="title">module</span>&amp;<span class="title">gem</span>包的<span class="title">module</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">001</span><span class="symbol">:</span><span class="number">1</span>* <span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">002</span><span class="symbol">:</span><span class="number">1</span>*   <span class="string">&quot;this is A&quot;</span></span><br><span class="line"><span class="meta">irb(main):003:0&gt;</span> end</span><br><span class="line">=&gt; <span class="string">&quot;this is A&quot;</span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">004</span><span class="symbol">:</span><span class="number">1</span>* <span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">005</span><span class="symbol">:</span><span class="number">1</span>*   extend A</span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">006</span><span class="symbol">:</span><span class="number">1</span>*   <span class="string">&quot;this is B&quot;</span></span><br><span class="line"><span class="meta">irb(main):007:0&gt;</span> end</span><br><span class="line">=&gt; <span class="string">&quot;this is B&quot;</span></span><br><span class="line"><span class="meta">irb(main):008:0&gt;</span> B.ancestors</span><br><span class="line">=&gt; [B, Object, Kernel, BasicObject]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="动态创建对象-amp-动态调用方法"><a href="#动态创建对象-amp-动态调用方法" class="headerlink" title="动态创建对象&amp;动态调用方法"></a>动态创建对象&amp;动态调用方法</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">动态创建对象，已知，可以把方法，类看成是对象</span><br><span class="line">所以----</span><br><span class="line"><span class="number">1</span>.动态创建方法----define_method</span><br><span class="line">一般会使用define_method结合method_missing来编写DRY代码！也就是把重复的代码干掉！</span><br><span class="line"></span><br><span class="line"><span class="meta">2.7.2 :001 &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span></span></span><br><span class="line"><span class="meta">2.7.2 :002 &gt;</span>   </span><br><span class="line"><span class="meta">2.7.2 :003 &gt;</span>   <span class="function"><span class="keyword">def</span> <span class="title">coding_frontend</span></span></span><br><span class="line"><span class="meta">2.7.2 :004 &gt;</span>     p <span class="string">&quot;writing frontend&quot;</span></span><br><span class="line"><span class="meta">2.7.2 :005 &gt;</span>   end</span><br><span class="line"><span class="meta">2.7.2 :006 &gt;</span>   </span><br><span class="line"><span class="meta">2.7.2 :007 &gt;</span>   <span class="function"><span class="keyword">def</span> <span class="title">coding_backend</span></span></span><br><span class="line"><span class="meta">2.7.2 :008 &gt;</span>     p <span class="string">&quot;writing backend&quot;</span></span><br><span class="line"><span class="meta">2.7.2 :009 &gt;</span>   end</span><br><span class="line"><span class="meta">2.7.2 :010 &gt;</span>   </span><br><span class="line"><span class="meta">2.7.2 :011 &gt;</span> end</span><br><span class="line"> =&gt; <span class="symbol">:coding_backend</span> </span><br><span class="line"><span class="meta">2.7.2 :012 &gt;</span> developer = Developer.new</span><br><span class="line"> =&gt; #&lt;Developer:0x00007f9168453d68&gt; </span><br><span class="line"><span class="meta">2.7.2 :013 &gt;</span> developer.coding_frontend</span><br><span class="line"><span class="string">&quot;writing frontend&quot;</span></span><br><span class="line"> =&gt; <span class="string">&quot;writing frontend&quot;</span> </span><br><span class="line"><span class="meta">2.7.2 :014 &gt;</span> developer.coding_backend</span><br><span class="line"><span class="string">&quot;writing backend&quot;</span></span><br><span class="line"> =&gt; <span class="string">&quot;writing backend&quot;</span> </span><br><span class="line"><span class="meta">2.7.2 :015 &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span></span></span><br><span class="line"><span class="meta">2.7.2 :016 &gt;</span>   </span><br><span class="line"><span class="meta">2.7.2 :017 &gt;</span>   [<span class="string">&quot;frontend&quot;</span>, <span class="string">&quot;backend&quot;</span>].each do <span class="params">|method|</span></span><br><span class="line"><span class="meta">2.7.2 :018 &gt;</span>     define_method <span class="string">&quot;coding_<span class="subst">#&#123;method&#125;</span>&quot;</span> do</span><br><span class="line"><span class="meta">2.7.2 :019 &gt;</span>     p <span class="string">&quot;writing &quot;</span> + method.to_s</span><br><span class="line"><span class="meta">2.7.2 :020 &gt;</span>     end</span><br><span class="line"><span class="meta">2.7.2 :021 &gt;</span>   end</span><br><span class="line"><span class="meta">2.7.2 :022 &gt;</span>   </span><br><span class="line"><span class="meta">2.7.2 :023 &gt;</span> end</span><br><span class="line"> =&gt; [<span class="string">&quot;frontend&quot;</span>, <span class="string">&quot;backend&quot;</span>] </span><br><span class="line"><span class="meta">2.7.2 :024 &gt;</span> developer = Developer.new</span><br><span class="line"> =&gt; #&lt;Developer:0x00007f916c9be178&gt; </span><br><span class="line"><span class="meta">2.7.2 :025 &gt;</span> developer.coding_frontend</span><br><span class="line"><span class="string">&quot;writing frontend&quot;</span></span><br><span class="line"> =&gt; <span class="string">&quot;writing frontend&quot;</span> </span><br><span class="line"><span class="meta">2.7.2 :026 &gt;</span> developer.coding_backend</span><br><span class="line"><span class="string">&quot;writing backend&quot;</span></span><br><span class="line"> =&gt; <span class="string">&quot;writing backend&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.动态创建类----class_eval&amp;instance_eval</span><br><span class="line"></span><br><span class="line">动态调用方法，作用是可以消除繁复的代码</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">调用一个方法实际上是给一个对象发送一条消息！</span><br><span class="line"></span><br><span class="line">Calling Methods Dynamically</span><br><span class="line"></span><br><span class="line">常规的操作是使用点标志符(.)</span><br><span class="line"></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">001</span><span class="symbol">:</span><span class="number">1</span>* <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">002</span><span class="symbol">:</span><span class="number">2</span>*   <span class="function"><span class="keyword">def</span> <span class="title">my_method</span><span class="params">(my_arg)</span></span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">003</span><span class="symbol">:</span><span class="number">2</span>*     my_arg * <span class="number">2</span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">004</span><span class="symbol">:</span><span class="number">1</span>*   <span class="keyword">end</span></span><br><span class="line"><span class="meta">irb(main):005:0&gt;</span> end</span><br><span class="line">=&gt; <span class="symbol">:my_method</span></span><br><span class="line"><span class="meta">irb(main):006:0&gt;</span> obj = MyClass.new</span><br><span class="line"><span class="meta">irb(main):007:0&gt;</span> obj.my_method(<span class="number">3</span>)</span><br><span class="line">=&gt; <span class="number">6</span></span><br><span class="line"><span class="meta">irb(main):009:0&gt;</span> obj.send(<span class="symbol">:my_method</span>,<span class="number">3</span>)</span><br><span class="line">=&gt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line">在send方法中，想调用的方法变成了参数，可以动态派发！</span><br><span class="line"></span><br><span class="line">值得注意的是在动态调用方法中，方法是以Symbol的形式作为参数的，因为Symbol是不可修改的，所以将方法名表示为Symbol，<span class="keyword">and</span>  String同样也可以作为方法的参数！</span><br><span class="line"></span><br><span class="line">last but <span class="keyword">not</span> least ----</span><br><span class="line"></span><br><span class="line">.send甚至可以调用私有方法，假如不想这么做，可以使用.public_send方法！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="动态执行脚本"><a href="#动态执行脚本" class="headerlink" title="动态执行脚本"></a>动态执行脚本</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># eval</span></span><br><span class="line">代码执行最直接的方法，也是最直接的方式，就是使用eval</span><br><span class="line"><span class="meta">irb(main):009:0&gt;</span> eval(<span class="string">&quot;3-1&quot;</span>)</span><br><span class="line">=&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># instance_eval</span></span><br><span class="line">将暂时的变化带入对象的上下文中</span><br><span class="line"></span><br><span class="line"><span class="comment"># class_eval(module_eval)</span></span><br><span class="line">临时性的进入类定义块的上下文</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>8.Ruby的块</title>
    <url>/2021/05/23/8-Ruby%E7%9A%84%E5%9D%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql45讲</title>
    <url>/2021/05/03/Mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/</url>
    <content><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="基础架构：一条sql语句是如何执行的？"><a href="#基础架构：一条sql语句是如何执行的？" class="headerlink" title="基础架构：一条sql语句是如何执行的？"></a>基础架构：一条sql语句是如何执行的？</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>；</span><br></pre></td></tr></table></figure>

<p><img src="/img/image-20210406035934530.png" alt="image-20210406035934530"></p>
<p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p>
<p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p>
<p>也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，</p>
<h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>优化器蛮funny的</p>
<p>那么</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">join</span> t2 <span class="keyword">using</span>(ID)  <span class="keyword">where</span> t1.c<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> t2.d<span class="operator">=</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>对于这条sql语句，</p>
<p>既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。</p>
<p>也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/img/image-20210406042010501.png" alt="image-20210406042010501"></p>
<p>那么，小结中问题的答案是<strong>分析器</strong>！</p>
<p>原文如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">MySQL 从你输入的&quot;select&quot;这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</span><br></pre></td></tr></table></figure>

<h2 id="日志系统：一条sql更新语句是如何执行的？"><a href="#日志系统：一条sql更新语句是如何执行的？" class="headerlink" title="日志系统：一条sql更新语句是如何执行的？"></a>日志系统：一条sql更新语句是如何执行的？</h2><p><strong>MySQL 可以恢复到半个月内任意一秒的状态</strong></p>
<p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 ID 和一个整型字段 c：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> T(ID <span class="type">int</span> <span class="keyword">primary</span> key, c <span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p>如果要将 ID=2 这一行的值加 1，SQL 语句就会这么写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> update T <span class="keyword">set</span> c<span class="operator">=</span>c<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。</p>
<p>每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。</p>
<p>而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。</p>
<p><img src="/img/16a7950217b3f0f4ed02db5db59562a7.png" alt="img"></p>
<p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p>
<p>write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p>
<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p>
<p>这两种日志有以下三点不同。</p>
<p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p>
<p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p>
<p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>
<p><img src="/img/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="img"></p>
<p>为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。</p>
<p>要说明这个问题，我们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？</p>
<p><strong>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：</strong></p>
<p>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；</p>
<p>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。</p>
<h3 id="两阶段提交的必要性"><a href="#两阶段提交的必要性" class="headerlink" title="两阶段提交的必要性"></a>两阶段提交的必要性</h3><p>先写 redo log 后写 binlog。</p>
<p>假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</p>
<p>先写 binlog 后写 redo log。</p>
<p>如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同</p>
<p>不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</p>
<p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p>
<p><strong>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</strong></p>
<p><strong>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</strong></p>
<p><strong>两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案</strong></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/img/image-20210407133928244.png" alt="image-20210407133928244"></p>
<p>比如说工单系统最好是一天一备份，因为工单系统每天都会产生大量数据，而且这些数据比较重要</p>
<p>反过来说也是一样！</p>
<p>那么—-</p>
<p>redolog是记录数据页做了什么改动，而binlog有两种模式-statement格式是记sql语句，然后row格式是记录行的内容。</p>
<p>redolog是物理的，binlog是逻辑的！</p>
<p>之所以是两阶段提交：是因为redolog完成prepare之后，假如binlog失败，那么事务本身会回滚，两阶段是为了保证一致性。</p>
<p>假如写binlog之前崩溃了，那么会在重启恢复之后发现没有commit，此时进行回滚、</p>
<p>假如是commit之前崩溃了，虽然它没有commit，但是它满足了prepare完整和binlog完整，所以重启之后会自动的commit！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>from 极客时间</tag>
      </tags>
  </entry>
  <entry>
    <title>Proc类</title>
    <url>/2021/05/05/Proc/</url>
    <content><![CDATA[<h1 id="Proc类"><a href="#Proc类" class="headerlink" title="Proc类"></a>Proc类</h1><h2 id="Proc类是个啥"><a href="#Proc类是个啥" class="headerlink" title="Proc类是个啥"></a>Proc类是个啥</h2><p>用来使块对象化的类！</p>
<h3 id="创建Proc对象"><a href="#创建Proc对象" class="headerlink" title="创建Proc对象"></a>创建Proc对象</h3><h4 id="Proc-new"><a href="#Proc-new" class="headerlink" title="Proc.new()"></a>Proc.new()</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">irb(main)<span class="symbol">:</span><span class="number">001</span><span class="symbol">:</span><span class="number">1</span>* hello1 = Proc.new <span class="keyword">do</span> <span class="params">|name|</span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">002</span><span class="symbol">:</span><span class="number">1</span>*   puts <span class="string">&quot;Hello, <span class="subst">#&#123;name&#125;</span>.&quot;</span></span><br><span class="line"><span class="meta">irb(main):003:0&gt;</span> end</span><br><span class="line"><span class="meta">irb(main):004:0&gt;</span> hello1.call(<span class="string">&quot;Ruby&quot;</span>)</span><br><span class="line">Hello, Ruby.</span><br></pre></td></tr></table></figure>

<h4 id="proc"><a href="#proc" class="headerlink" title="proc{}"></a>proc{}</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">irb(main)<span class="symbol">:</span><span class="number">005</span><span class="symbol">:</span><span class="number">1</span>* hello = <span class="built_in">proc</span> <span class="keyword">do</span> <span class="params">|name|</span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">006</span><span class="symbol">:</span><span class="number">1</span>*   <span class="string">&quot;hello, <span class="subst">#&#123;name&#125;</span>.&quot;</span></span><br><span class="line"><span class="meta">irb(main):007:0&gt;</span> end</span><br><span class="line"><span class="meta">irb(main):008:0&gt;</span> hello.call(<span class="string">&quot;ruby&quot;</span>)</span><br><span class="line">=&gt; <span class="string">&quot;hello, ruby.&quot;</span></span><br></pre></td></tr></table></figure>

<p>调用call方法时的参数会作为块变量，块中最后一个表达式的值则为Proc#call的返回值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):009:0&gt; hello[&quot;ruby&quot;]</span><br><span class="line">=&gt; &quot;hello, ruby.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>通过lambda方法创建的Proc对象的行为会更接近方法。</p>
<p>and</p>
<p>Lambda表达式对参数数量的检查更严格，and，Proc对象调用call方法时，参数数量和块变量的数量可以不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):010:1* proc = Proc.new do |a,b,c|</span><br><span class="line">irb(main):012:0&gt; end</span><br><span class="line">=&gt; #&lt;Proc:0x00005601b8e140f0 (irb):10&gt;</span><br><span class="line">irb(main):014:0&gt; proc.class</span><br><span class="line">=&gt; Proc</span><br><span class="line">irb(main):015:0&gt; proc.call(1,2)</span><br><span class="line">=&gt; [1, 2, nil]</span><br><span class="line"></span><br><span class="line">irb(main):019:0* lambda = lambda do |a,b,c|</span><br><span class="line">irb(main):020:0*   [a,b,c]</span><br><span class="line">irb(main):021:-&gt; end</span><br><span class="line">irb(main):022:0&gt; lambda</span><br><span class="line">=&gt; #&lt;Proc:0x00005601b8e1d718 (irb):19 (lambda)&gt;</span><br><span class="line">irb(main):026:0&gt; lambda.call(1,2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">        6: from /usr/bin/irb:23:in `&lt;main&gt;&#x27;</span><br><span class="line">        5: from /usr/bin/irb:23:in `load&#x27;</span><br><span class="line">        4: from /usr/lib/ruby/gems/2.7.0/gems/irb-1.2.1/exe/irb:11:in `&lt;top (required)&gt;&#x27;</span><br><span class="line">        3: from (irb):25</span><br><span class="line">        2: from (irb):26:in `rescue in irb_binding&#x27;</span><br><span class="line">        1: from (irb):19:in `block in irb_binding&#x27;</span><br><span class="line">ArgumentError (wrong number of arguments (given 2, expected 3))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="to-proc方法"><a href="#to-proc方法" class="headerlink" title="to_proc方法"></a>to_proc方法</h3><p>在方法中指定块时，如果以“&amp;对象”的形式传递参数，对象.to_proc就会被自动调用，从而生成Proc对象。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):029:0&gt; [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;].map(&amp;:to_i)</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">irb(main):030:0&gt; [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;].map&#123;|i| i.to_i&#125;</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>符号&amp;会触发:to_i 的 to_proc 方法, to_proc 执行后会返回一个 proc 实例</p>
<p>一个类名排序的例子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):031:0&gt; [Integer,String,Array,Hash,File,IO].sort_by(&amp;:name)</span><br><span class="line">=&gt; [Array, File, Hash, IO, Integer, String]</span><br></pre></td></tr></table></figure>

<p>一个计数器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):032:1* def counter</span><br><span class="line">irb(main):033:1*   c=0</span><br><span class="line">irb(main):034:2*   Proc.new do</span><br><span class="line">irb(main):035:2*     c+=1</span><br><span class="line">irb(main):036:1*   end</span><br><span class="line">irb(main):037:0&gt; end</span><br><span class="line">=&gt; :counter</span><br><span class="line">irb(main):038:0&gt; c1 = counter</span><br><span class="line">irb(main):039:0&gt; c1.call</span><br><span class="line">=&gt; 1</span><br><span class="line">irb(main):040:0&gt; c1.call</span><br><span class="line">=&gt; 2</span><br><span class="line">irb(main):041:0&gt; c1.call</span><br><span class="line">=&gt; 3</span><br><span class="line">irb(main):042:0&gt; c2 = counter</span><br><span class="line">irb(main):043:0&gt; c2.call</span><br><span class="line">=&gt; 1</span><br><span class="line">irb(main):044:0&gt; c2.call</span><br><span class="line">=&gt; 2</span><br><span class="line">irb(main):045:0&gt; c1.call</span><br><span class="line">=&gt; 4</span><br></pre></td></tr></table></figure>

<p>两个变量对引用的Proc对象分别保存并处理了调用counter方法时初始化的本地变量</p>
<p>像Proc对象这样，将处理内容，变量等环境同时保存的对象，被成为闭包。</p>
<p>使用Proc对象可以通过少量代码实现处理对象化。</p>
<h3 id="Proc的实例方法"><a href="#Proc的实例方法" class="headerlink" title="Proc的实例方法"></a>Proc的实例方法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):048:0&gt; prc = Proc.new&#123;|a,b| a+b&#125;</span><br><span class="line">irb(main):049:0&gt; prc.call(1,2)</span><br><span class="line">=&gt; 3</span><br><span class="line">irb(main):050:0&gt; prc[1,2]</span><br><span class="line">=&gt; 3</span><br><span class="line">irb(main):051:0&gt; prc.yield(5,6)</span><br><span class="line">=&gt; 11</span><br><span class="line">irb(main):052:0&gt; prc.(3,4)</span><br><span class="line">=&gt; 7</span><br><span class="line">irb(main):053:0&gt; prc === [1,4]</span><br><span class="line">=&gt; 5</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):098:0&gt; fizz = proc&#123; |n| n%3==0&#125;</span><br><span class="line">irb(main):099:0&gt; buzz = proc&#123; |n| n%5==0&#125;</span><br><span class="line">irb(main):100:0&gt; fizzbuzz = proc&#123;|n| fizz[n] &amp;&amp; buzz[n]&#125;</span><br><span class="line"></span><br><span class="line">irb(main):090:1* (1..100).each do |i|</span><br><span class="line">irb(main):091:2*   case i</span><br><span class="line">irb(main):092:2*   when fizzbuzz then puts &quot;Fizz Buzz&quot;</span><br><span class="line">irb(main):093:2*   when fizz then puts &quot;Fizz&quot;</span><br><span class="line">irb(main):094:2*   when buzz then  puts &quot;Buzz&quot;</span><br><span class="line">irb(main):095:2*   else puts i</span><br><span class="line">irb(main):096:1*   end</span><br><span class="line">irb(main):097:0&gt; end</span><br></pre></td></tr></table></figure>

<h3 id="prc-arrity"><a href="#prc-arrity" class="headerlink" title="prc.arrity"></a>prc.arrity</h3><p>此方法可以返回作为call方法的参数的块变量的个数，以“|*args|”的形式指定块变量时，返回-1</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">irb(main):004:0&gt;</span> prc0 = Proc.new&#123;nil&#125;</span><br><span class="line"><span class="meta">irb(main):005:0&gt;</span> prc1 = Proc.new&#123;<span class="params">|a|</span> a&#125;</span><br><span class="line"><span class="meta">irb(main):006:0&gt;</span> prc2 = Proc.new&#123;<span class="params">|a,b|</span> a+b&#125;</span><br><span class="line"><span class="meta">irb(main):007:0&gt;</span> prc3 = Proc.new&#123;<span class="params">|a,b,c|</span> a+b+c&#125;</span><br><span class="line"><span class="meta">irb(main):008:0&gt;</span> prc4 = Proc.new&#123;<span class="params">|*args|</span> args&#125;</span><br><span class="line"><span class="meta">irb(main):009:0&gt;</span> prc0.arity</span><br><span class="line">=&gt; <span class="number">0</span></span><br><span class="line"><span class="meta">irb(main):010:0&gt;</span> prc1.arity</span><br><span class="line">=&gt; <span class="number">1</span></span><br><span class="line"><span class="meta">irb(main):011:0&gt;</span> prc2.arity</span><br><span class="line">=&gt; <span class="number">2</span></span><br><span class="line"><span class="meta">irb(main):012:0&gt;</span> prc3.arity</span><br><span class="line">=&gt; <span class="number">3</span></span><br><span class="line"><span class="meta">irb(main):013:0&gt;</span> prc4.arity</span><br><span class="line">=&gt; -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="prc-parameters"><a href="#prc-parameters" class="headerlink" title="prc.parameters"></a>prc.parameters</h3><p>使用此方法可以返回“[种类，变量名]”形式的数组的列表</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">irb(main):015:0&gt;</span> prc0.parameters</span><br><span class="line">=&gt; []</span><br><span class="line"><span class="meta">irb(main):016:0&gt;</span> prc1.parameters</span><br><span class="line">=&gt; [[<span class="symbol">:opt</span>, <span class="symbol">:a</span>]]</span><br><span class="line"><span class="meta">irb(main):017:0&gt;</span> prc2.parameters</span><br><span class="line">=&gt; [[<span class="symbol">:opt</span>, <span class="symbol">:a</span>], [<span class="symbol">:opt</span>, <span class="symbol">:b</span>]]</span><br><span class="line"><span class="meta">irb(main):018:0&gt;</span> prc3.parameters</span><br><span class="line">=&gt; [[<span class="symbol">:opt</span>, <span class="symbol">:a</span>], [<span class="symbol">:opt</span>, <span class="symbol">:b</span>], [<span class="symbol">:opt</span>, <span class="symbol">:c</span>]]</span><br><span class="line"><span class="meta">irb(main):019:0&gt;</span> prc4.parameters</span><br><span class="line">=&gt; [[<span class="symbol">:rest</span>, <span class="symbol">:args</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="prc-source-location"><a href="#prc-source-location" class="headerlink" title="prc.source_location"></a>prc.source_location</h3><p>返回定义prc的程序的位置，返回值为“[代码文件名，行编号]”形式的数组</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">irb(main):020:0&gt;</span> prc0.source_location</span><br><span class="line">=&gt; [<span class="string">&quot;(irb)&quot;</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">irb(main):021:0&gt;</span> prc1.source_location</span><br><span class="line">=&gt; [<span class="string">&quot;(irb)&quot;</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">irb(main):022:0&gt;</span> prc2.source_location</span><br><span class="line">=&gt; [<span class="string">&quot;(irb)&quot;</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):024:0&gt; to_class.call(&quot;test&quot;)</span><br><span class="line">=&gt; String</span><br><span class="line">irb(main):025:0&gt; to_class.call(123)</span><br><span class="line">=&gt; Integer</span><br><span class="line">irb(main):026:0&gt; to_class.call(2**100)</span><br><span class="line">=&gt; Integer</span><br></pre></td></tr></table></figure>



<h3 id="Proc-amp-Lambda"><a href="#Proc-amp-Lambda" class="headerlink" title="Proc&amp;Lambda"></a>Proc&amp;Lambda</h3><ol>
<li><p>对参数的容忍程度不同，lambda比较严格，Proc比较宽松，数量有差异也不会报错</p>
</li>
<li><p>回传的scope不同，Proc里面的return会结束整个method，而lambda的return只会结束lambda本身。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">irb(main):061:1* def method_proc</span><br><span class="line">irb(main):062:1*   thing = Proc.new&#123; return 1 &#125;</span><br><span class="line">irb(main):063:1*   thing.call</span><br><span class="line">irb(main):064:1*   puts &quot;hi proc&quot;</span><br><span class="line">irb(main):065:1*   return 2</span><br><span class="line">irb(main):066:0&gt; end</span><br><span class="line">=&gt; :method_proc</span><br><span class="line">irb(main):067:1* def method_lambda</span><br><span class="line">irb(main):068:1*   thing = lambda&#123; return 1 &#125;</span><br><span class="line">irb(main):069:1*   thing.call</span><br><span class="line">irb(main):070:1*   puts &quot;hi lambda&quot;</span><br><span class="line">irb(main):071:1*   return 2</span><br><span class="line">irb(main):072:0&gt; end</span><br><span class="line">=&gt; :method_lambda</span><br><span class="line">irb(main):073:0&gt; method_proc</span><br><span class="line">=&gt; 1</span><br><span class="line">irb(main):074:0&gt; method_lambda</span><br><span class="line">hi lambda</span><br><span class="line">=&gt; 2</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ruby</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/01/hello-world/</url>
    <content><![CDATA[<div align=center>

<h1><img src="https://emojis.slackmojis.com/emojis/images/1531849430/4246/blob-sunglasses.gif?1531849430" width="30"/> Hey! Nice to see you 👋</h1>


<p>Welcome to my blog! </br> I'm longbiu, developer from <b>Changsha, China</b></p>
<p>I want to be a <b>Fullstack developer<img src="https://www.flaticon.com/premium-icon/icons/svg/3242/3242257.svg"width="35"/></b></p>


</div>
]]></content>
  </entry>
  <entry>
    <title>vscode theme</title>
    <url>/2021/05/20/vscode-theme/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>Name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Tokyo Night</td>
</tr>
<tr>
<td>2</td>
<td>SynthWave ‘84</td>
</tr>
<tr>
<td>3</td>
<td>Flat UI</td>
</tr>
</tbody></table>
<p><img src="/img/vscode-theme/image-20210520224536810.png" alt="image-20210520224536810"></p>
<p><img src="/img/vscode-theme/image-20210520224601310.png" alt="image-20210520224601310"></p>
<p><img src="/img/vscode-theme/image-20210520224635558.png" alt="image-20210520224635558"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>颜值正义</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式概览</title>
    <url>/2021/05/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>三小时mysql</title>
    <url>/2021/05/02/%E4%B8%89%E5%B0%8F%E6%97%B6mysql/</url>
    <content><![CDATA[<h1 id="3小时Mysql入门"><a href="#3小时Mysql入门" class="headerlink" title="3小时Mysql入门"></a><a href="https://www.bilibili.com/video/BV1iJ411m7Fj">3小时Mysql入门</a></h1><h2 id="sql语句中-lt-gt-与-作用一样"><a href="#sql语句中-lt-gt-与-作用一样" class="headerlink" title="sql语句中&lt;&gt;与!=作用一样"></a>sql语句中&lt;&gt;与!=作用一样</h2><h2 id="REGEXP–正则"><a href="#REGEXP–正则" class="headerlink" title="REGEXP–正则"></a>REGEXP–正则</h2><ol>
<li><p>REGEXP ‘[gim]e’—-搜索ge ie me</p>
</li>
<li><p>REGEXP ‘[a-h]e’</p>
</li>
<li><p>where中，^—-beginning    $—-end    |—-logical or</p>
</li>
<li><p>excise</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> first_name REGEXP <span class="string">&#x27;elka|ambur&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> first_name REGEXP <span class="string">&#x27;ey$|on$&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> first_name REGEXP <span class="string">&#x27;^my|se&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> first_name REGEXP <span class="string">&#x27;b[ru]&#x27;</span></span><br><span class="line"># (br<span class="operator">|</span>bu)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> shipper_id <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 按first_name升序排列</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name</span><br><span class="line"></span><br><span class="line"># 按first_name降序排列</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"># 先对state进行排序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> state first_name</span><br><span class="line"></span><br><span class="line"># 使用数字排序会产生不好的结果，应该避免</span><br><span class="line"># 得到按first_name<span class="operator">&amp;</span>last_name排序的数据，并新增point字段，且数据全为<span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> first_name,last_name,<span class="number">10</span> <span class="keyword">AS</span> point</span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 拿到<span class="number">300</span>条数据，不足则那最大的</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line">limit <span class="number">300</span></span><br><span class="line"></span><br><span class="line"># 从第六条数据开始，取<span class="number">3</span>条数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line">limit <span class="number">6</span>，<span class="number">3</span></span><br><span class="line"></span><br><span class="line"># 积分倒序排列，取前三</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> points <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 从orders<span class="operator">&amp;</span>customers拿数据</span><br><span class="line"><span class="keyword">select</span> order_id, orders.customer_id, first_name, last_name</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">join</span> customers</span><br><span class="line">	<span class="keyword">on</span> orders.customer_id <span class="operator">=</span> customers.customer_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">equals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> order_id, orders.customer_id, first_name, last_name</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">join</span> customers c</span><br><span class="line">	<span class="keyword">on</span> orders.customer_id <span class="operator">=</span> c.customer_id    </span><br><span class="line">	</span><br><span class="line"># 关联的表可以使用<span class="keyword">join</span> <span class="keyword">on</span>来进行操作</span><br></pre></td></tr></table></figure>

<h2 id="LEFT-JOIN-amp-RIGHT-JOIN"><a href="#LEFT-JOIN-amp-RIGHT-JOIN" class="headerlink" title="LEFT_JOIN&amp;RIGHT_JOIN"></a>LEFT_JOIN&amp;RIGHT_JOIN</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 左连接和右连接</span><br><span class="line"># 简单理解就是满足左边条件的保存，右边可以为空；反过来也一样</span><br><span class="line"># 两张表的数据都显示了，但是缺少的不显示</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student s <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class c <span class="keyword">ON</span> s.class_id <span class="operator">=</span> c.id</span><br><span class="line"></span><br><span class="line"># 获取所有的产品信息，包括从没订购的产品也会显示</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> products p</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> order_items oi</span><br><span class="line">	<span class="keyword">on</span> p.product_id <span class="operator">=</span> oi.product_id</span><br><span class="line">	</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	c.customer_id,</span><br><span class="line">	c.first_name,</span><br><span class="line">	o.order_id,</span><br><span class="line">	sh.name <span class="keyword">AS</span> shipper</span><br><span class="line"><span class="keyword">from</span> customers c</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> orders o</span><br><span class="line">	<span class="keyword">on</span> c.customer_id <span class="operator">=</span> o.customer_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> shippers sh</span><br><span class="line">	<span class="keyword">on</span> o.shipper_id <span class="operator">=</span> sh.shipper_id</span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> c.customer_id</span><br></pre></td></tr></table></figure>

<h2 id="USING"><a href="#USING" class="headerlink" title="USING"></a>USING</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># o.customer_id <span class="operator">=</span> c.customer_id</span><br><span class="line"># <span class="number">0.</span>shipper_id <span class="operator">=</span> sh.shipper_id</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	o.order_id</span><br><span class="line">	c.first_name</span><br><span class="line">	sh.name <span class="keyword">as</span> shipper</span><br><span class="line"><span class="keyword">from</span> orders o</span><br><span class="line"><span class="keyword">join</span> customers c</span><br><span class="line">	<span class="keyword">using</span> (customer_id)</span><br><span class="line"><span class="keyword">join</span> shippers sh</span><br><span class="line">	<span class="keyword">using</span> (shipper_id)</span><br></pre></td></tr></table></figure>

<h2 id="NATURAL-JOIN"><a href="#NATURAL-JOIN" class="headerlink" title="NATURAL JOIN"></a>NATURAL JOIN</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 自然关联，数据库去猜你要那些公共列（字段）</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	o.order_id</span><br><span class="line">	c.first_name</span><br><span class="line">	sh.name <span class="keyword">as</span> shipper</span><br><span class="line"><span class="keyword">from</span> orders o</span><br><span class="line"><span class="keyword">natural</span> <span class="keyword">join</span> customers c</span><br></pre></td></tr></table></figure>

<h2 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	o.order_id</span><br><span class="line">	p.name</span><br><span class="line"><span class="keyword">from</span> customers c</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> products p</span><br><span class="line"></span><br><span class="line"><span class="keyword">equals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	o.order_id</span><br><span class="line">	p.name</span><br><span class="line"><span class="keyword">from</span> customers c, products p </span><br></pre></td></tr></table></figure>

<h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 多张表的连接</span><br></pre></td></tr></table></figure>

<h2 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers</span><br><span class="line"><span class="keyword">values</span> (<span class="keyword">DEFAULT</span>, <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;smith&#x27;</span>, <span class="keyword">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers()</span><br><span class="line"><span class="keyword">values</span> (<span class="keyword">DEFAULT</span>, <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;smith&#x27;</span>, <span class="keyword">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> shippers (name)</span><br><span class="line"><span class="keyword">values</span> (&quot;asdf&quot;),</span><br><span class="line">		(&quot;asdjf&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="last-insert-id"><a href="#last-insert-id" class="headerlink" title="last_insert_id"></a>last_insert_id</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 字面意思，返回一个最后的id</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_items</span><br><span class="line"><span class="keyword">values</span> (LAST_INSERT_ID(),<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 新建一个表，数据<span class="keyword">as</span> same <span class="keyword">as</span> orders</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders_archived <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders</span><br><span class="line"></span><br><span class="line"># 复制一部分数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders_archived <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> ……</span><br></pre></td></tr></table></figure>

<h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update invoices</span><br><span class="line"><span class="keyword">set</span> payment_total <span class="operator">=</span> <span class="number">10</span>, payment_date <span class="operator">=</span> <span class="string">&#x27;2021-09-09&#x27;</span></span><br><span class="line"><span class="keyword">where</span> invoice_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">update invoices</span><br><span class="line"><span class="keyword">set</span> payment_total <span class="operator">=</span> <span class="number">10</span>, payment_date <span class="operator">=</span> <span class="string">&#x27;2021-09-09&#x27;</span></span><br><span class="line"><span class="keyword">where</span> invoice_id <span class="operator">=</span> (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">update invoices</span><br><span class="line"><span class="keyword">set</span> payment_total <span class="operator">=</span> <span class="number">10</span>, payment_date <span class="operator">=</span> <span class="string">&#x27;2021-09-09&#x27;</span></span><br><span class="line"><span class="keyword">where</span> invoice_id <span class="operator">=</span> (</span><br><span class="line">					<span class="keyword">select</span> client_id</span><br><span class="line">					<span class="keyword">from</span> clients</span><br><span class="line">					<span class="keyword">where</span> state <span class="keyword">in</span> (<span class="string">&#x27;ca&#x27;</span>,<span class="string">&#x27;ny&#x27;</span>)) </span><br></pre></td></tr></table></figure>

<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> invoices</span><br><span class="line"><span class="keyword">where</span> client_id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about/index.html</url>
    <content><![CDATA[<div align=center>

<h1><img src="https://emojis.slackmojis.com/emojis/images/1531849430/4246/blob-sunglasses.gif?1531849430" width="30"/> Hey! Nice to see you 👋</h1>


<p>Welcome to my blog! </br> I'm longbiu, developer from <b>Changsha, China</b></p>
<p>I want to be a <b>Fullstack developer<img src="https://www.flaticon.com/premium-icon/icons/svg/3242/3242257.svg"width="35"/></b></p>


</div>

<br>
<div>
  <svg class="pie-chart"></svg>
  <script src="https://cdn.jsdelivr.net/npm/chart.xkcd@1.1/dist/chart.xkcd.min.js"></script>
  <script>
    const svg = document.querySelector('.pie-chart');
    const pieChart = new chartXkcd.Pie(svg, {
      title: 'Programming language', // optional
      data: {
        labels: ['Python', 'Ruby', 'Java', 'Javascript', 'Html', 'Css'],
        datasets: [{
          data: [300, 400, 200, 100, 50, 50],
        }],
      },
      options: { // optional
        innerRadius: 0.5,
        legendPosition: chartXkcd.config.positionType.upRight,
      },
    });
  </script>
  
</div>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/aliyun.css</url>
    <content><![CDATA[@font-face {
  font-family: "iconfont"; /* Project id 2561014 */
  src: url('//at.alicdn.com/t/font_2561014_ewlx6jq2xgj.woff2?t=1621501122272') format('woff2'),
       url('//at.alicdn.com/t/font_2561014_ewlx6jq2xgj.woff?t=1621501122272') format('woff'),
       url('//at.alicdn.com/t/font_2561014_ewlx6jq2xgj.ttf?t=1621501122272') format('truetype');
}

.iconfont {
  font-family: "iconfont" !important;
  font-size: 16px;
  font-style: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-bilibili-fill:before {
  content: "\eea8";
}

.icon-qq:before {
  content: "\e620";
}

]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/link/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/index.css</url>
    <content><![CDATA[/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html {
  line-height: 1.15;
  -webkit-text-size-adjust: 100%
}

body {
  margin: 0
}

main {
  display: block
}

h1 {
  font-size: 2em;
  margin: .67em 0
}

hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible
}

pre {
  font-family: monospace, monospace;
  font-size: 1em
}

a {
  background-color: transparent
}

abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  text-decoration: underline dotted
}

b,
strong {
  font-weight: bolder
}

code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em
}

small {
  font-size: 80%
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline
}

sub {
  bottom: -.25em
}

sup {
  top: -.5em
}

img {
  border-style: none
}

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0
}

button,
input {
  overflow: visible
}

button,
select {
  text-transform: none
}

[type=button],
[type=reset],
[type=submit],
button {
  -webkit-appearance: button
}

[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner,
button::-moz-focus-inner {
  border-style: none;
  padding: 0
}

[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring,
button:-moz-focusring {
  outline: 1px dotted ButtonText
}

fieldset {
  padding: .35em .75em .625em
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal
}

progress {
  vertical-align: baseline
}

textarea {
  overflow: auto
}

[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  padding: 0
}

[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto
}

[type=search] {
  -webkit-appearance: textfield;
  outline-offset: -2px
}

[type=search]::-webkit-search-decoration {
  -webkit-appearance: none
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit
}

details {
  display: block
}

summary {
  display: list-item
}

template {
  display: none
}

[hidden] {
  display: none
}
.limit-one-line,
#article-container .flink .flink-list > .flink-list-item a .flink-item-name,
#article-container .flink .flink-list > .flink-list-item a .flink-item-desc,
#aside-content .card-info .card-info-data > .card-info-data-item a .headline,
#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span,
#aside-content .card-categories ul.card-category-list > .card-category-list-item a span,
#pagination .prev_info,
#pagination .next_info,
#sidebar #sidebar-menus .site-data .data-item .data-item-link > a > div,
#sidebar #sidebar-menus .menus_items .site-page {
  overflow: hidden;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.limit-more-line,
.article-sort-item-title,
#recent-posts > .recent-post-item >.recent-post-info > .article-title,
#recent-posts > .recent-post-item >.recent-post-info > .content,
#error-wrap .error-content .error-info .error_subtitle,
#aside-content .aside-list > .aside-list-item .content > .name,
#aside-content .aside-list > .aside-list-item .content > .title,
#aside-content .aside-list > .aside-list-item .content > .comment,
#post-info .post-title,
.relatedPosts > .relatedPosts-list .content .title,
figure.gallery-group p,
figure.gallery-group .gallery-group-name {
  display: -webkit-box;
  overflow: hidden;
  -webkit-box-orient: vertical;
}
.fontawesomeIcon,
hr:before,
#article-container.post-content h1:before,
#article-container.post-content h2:before,
#article-container.post-content h3:before,
#article-container.post-content h4:before,
#article-container.post-content h5:before,
#article-container.post-content h6:before,
#post .post-copyright:before,
#post .post-outdate-notice:before,
.note:not(.no-icon)::before {
  display: inline-block;
  font-weight: 600;
  font-style: normal;
  font-variant: normal;
  font-family: 'Font Awesome 5 Free';
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
}
#content-inner,
#footer {
  -webkit-animation: bottom-top 1s;
  -moz-animation: bottom-top 1s;
  -o-animation: bottom-top 1s;
  -ms-animation: bottom-top 1s;
  animation: bottom-top 1s;
}
#page-header {
  -webkit-animation: header-effect 1s;
  -moz-animation: header-effect 1s;
  -o-animation: header-effect 1s;
  -ms-animation: header-effect 1s;
  animation: header-effect 1s;
}
#site-title,
#site-subtitle {
  -webkit-animation: titlescale 1s;
  -moz-animation: titlescale 1s;
  -o-animation: titlescale 1s;
  -ms-animation: titlescale 1s;
  animation: titlescale 1s;
}
#nav.show {
  -webkit-animation: headerNoOpacity 1s;
  -moz-animation: headerNoOpacity 1s;
  -o-animation: headerNoOpacity 1s;
  -ms-animation: headerNoOpacity 1s;
  animation: headerNoOpacity 1s;
}
canvas:not(#ribbon-canvas),
#web_bg {
  -webkit-animation: to_show 4s;
  -moz-animation: to_show 4s;
  -o-animation: to_show 4s;
  -ms-animation: to_show 4s;
  animation: to_show 4s;
}
#ribbon-canvas {
  -webkit-animation: ribbon_to_show 4s;
  -moz-animation: ribbon_to_show 4s;
  -o-animation: ribbon_to_show 4s;
  -ms-animation: ribbon_to_show 4s;
  animation: ribbon_to_show 4s;
}
#sidebar-menus.open > :nth-child(1) {
  -webkit-animation: sidebarItem 0.2s;
  -moz-animation: sidebarItem 0.2s;
  -o-animation: sidebarItem 0.2s;
  -ms-animation: sidebarItem 0.2s;
  animation: sidebarItem 0.2s;
}
#sidebar-menus.open > :nth-child(2) {
  -webkit-animation: sidebarItem 0.4s;
  -moz-animation: sidebarItem 0.4s;
  -o-animation: sidebarItem 0.4s;
  -ms-animation: sidebarItem 0.4s;
  animation: sidebarItem 0.4s;
}
#sidebar-menus.open > :nth-child(3) {
  -webkit-animation: sidebarItem 0.6s;
  -moz-animation: sidebarItem 0.6s;
  -o-animation: sidebarItem 0.6s;
  -ms-animation: sidebarItem 0.6s;
  animation: sidebarItem 0.6s;
}
#sidebar-menus.open > :nth-child(4) {
  -webkit-animation: sidebarItem 0.8s;
  -moz-animation: sidebarItem 0.8s;
  -o-animation: sidebarItem 0.8s;
  -ms-animation: sidebarItem 0.8s;
  animation: sidebarItem 0.8s;
}
.card-announcement-animation {
  color: #f00;
  -webkit-animation: announ_animation 0.8s linear infinite;
  -moz-animation: announ_animation 0.8s linear infinite;
  -o-animation: announ_animation 0.8s linear infinite;
  -ms-animation: announ_animation 0.8s linear infinite;
  animation: announ_animation 0.8s linear infinite;
}
.scroll-down-effects {
  -webkit-animation: scroll-down-effect 1.5s infinite;
  -moz-animation: scroll-down-effect 1.5s infinite;
  -o-animation: scroll-down-effect 1.5s infinite;
  -ms-animation: scroll-down-effect 1.5s infinite;
  animation: scroll-down-effect 1.5s infinite;
}
.reward-main {
  -webkit-animation: donate_effcet 0.3s 0.1s ease both;
  -moz-animation: donate_effcet 0.3s 0.1s ease both;
  -o-animation: donate_effcet 0.3s 0.1s ease both;
  -ms-animation: donate_effcet 0.3s 0.1s ease both;
  animation: donate_effcet 0.3s 0.1s ease both;
}
@-moz-keyframes scroll-down-effect {
  0% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
  50% {
    top: -16px;
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
}
@-webkit-keyframes scroll-down-effect {
  0% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
  50% {
    top: -16px;
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
}
@-o-keyframes scroll-down-effect {
  0% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
  50% {
    top: -16px;
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
}
@keyframes scroll-down-effect {
  0% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
  50% {
    top: -16px;
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    top: 0;
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
  }
}
@-moz-keyframes header-effect {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-webkit-keyframes header-effect {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-o-keyframes header-effect {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@keyframes header-effect {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-moz-keyframes headerNoOpacity {
  0% {
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-webkit-keyframes headerNoOpacity {
  0% {
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-o-keyframes headerNoOpacity {
  0% {
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@keyframes headerNoOpacity {
  0% {
    -webkit-transform: translateY(-50px);
    -moz-transform: translateY(-50px);
    -o-transform: translateY(-50px);
    -ms-transform: translateY(-50px);
    transform: translateY(-50px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-moz-keyframes bottom-top {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    margin-top: 50px;
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    margin-top: 0;
  }
}
@-webkit-keyframes bottom-top {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    margin-top: 50px;
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    margin-top: 0;
  }
}
@-o-keyframes bottom-top {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    margin-top: 50px;
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    margin-top: 0;
  }
}
@keyframes bottom-top {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    margin-top: 50px;
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    margin-top: 0;
  }
}
@-moz-keyframes titlescale {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@-webkit-keyframes titlescale {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@-o-keyframes titlescale {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@keyframes titlescale {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@-moz-keyframes search_close {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@-webkit-keyframes search_close {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@-o-keyframes search_close {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@keyframes search_close {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@-moz-keyframes to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
}
@-webkit-keyframes to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
}
@-o-keyframes to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
}
@keyframes to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
}
@-moz-keyframes to_hide {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
}
@-webkit-keyframes to_hide {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
}
@-o-keyframes to_hide {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
}
@keyframes to_hide {
  0% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
  }
  100% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
}
@-moz-keyframes ribbon_to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@-webkit-keyframes ribbon_to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@-o-keyframes ribbon_to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@keyframes ribbon_to_show {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@-moz-keyframes avatar_turn_around {
  from {
    -webkit-transform: rotate(0);
    -moz-transform: rotate(0);
    -o-transform: rotate(0);
    -ms-transform: rotate(0);
    transform: rotate(0);
  }
  to {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@-webkit-keyframes avatar_turn_around {
  from {
    -webkit-transform: rotate(0);
    -moz-transform: rotate(0);
    -o-transform: rotate(0);
    -ms-transform: rotate(0);
    transform: rotate(0);
  }
  to {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@-o-keyframes avatar_turn_around {
  from {
    -webkit-transform: rotate(0);
    -moz-transform: rotate(0);
    -o-transform: rotate(0);
    -ms-transform: rotate(0);
    transform: rotate(0);
  }
  to {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes avatar_turn_around {
  from {
    -webkit-transform: rotate(0);
    -moz-transform: rotate(0);
    -o-transform: rotate(0);
    -ms-transform: rotate(0);
    transform: rotate(0);
  }
  to {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@-moz-keyframes sub_menus {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(10px);
    -moz-transform: translateY(10px);
    -o-transform: translateY(10px);
    -ms-transform: translateY(10px);
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-webkit-keyframes sub_menus {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(10px);
    -moz-transform: translateY(10px);
    -o-transform: translateY(10px);
    -ms-transform: translateY(10px);
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-o-keyframes sub_menus {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(10px);
    -moz-transform: translateY(10px);
    -o-transform: translateY(10px);
    -ms-transform: translateY(10px);
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@keyframes sub_menus {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(10px);
    -moz-transform: translateY(10px);
    -o-transform: translateY(10px);
    -ms-transform: translateY(10px);
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-moz-keyframes donate_effcet {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-webkit-keyframes donate_effcet {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-o-keyframes donate_effcet {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@keyframes donate_effcet {
  0% {
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform: translateY(-20px);
    -moz-transform: translateY(-20px);
    -o-transform: translateY(-20px);
    -ms-transform: translateY(-20px);
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    -ms-filter: none;
    filter: none;
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-moz-keyframes announ_animation {
  0%, to {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -o-transform: scale(1.2);
    -ms-transform: scale(1.2);
    transform: scale(1.2);
  }
}
@-webkit-keyframes announ_animation {
  0%, to {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -o-transform: scale(1.2);
    -ms-transform: scale(1.2);
    transform: scale(1.2);
  }
}
@-o-keyframes announ_animation {
  0%, to {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -o-transform: scale(1.2);
    -ms-transform: scale(1.2);
    transform: scale(1.2);
  }
}
@keyframes announ_animation {
  0%, to {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.2);
    -moz-transform: scale(1.2);
    -o-transform: scale(1.2);
    -ms-transform: scale(1.2);
    transform: scale(1.2);
  }
}
@-moz-keyframes sidebarItem {
  0% {
    -webkit-transform: translateX(200px);
    -moz-transform: translateX(200px);
    -o-transform: translateX(200px);
    -ms-transform: translateX(200px);
    transform: translateX(200px);
  }
  100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
}
@-webkit-keyframes sidebarItem {
  0% {
    -webkit-transform: translateX(200px);
    -moz-transform: translateX(200px);
    -o-transform: translateX(200px);
    -ms-transform: translateX(200px);
    transform: translateX(200px);
  }
  100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
}
@-o-keyframes sidebarItem {
  0% {
    -webkit-transform: translateX(200px);
    -moz-transform: translateX(200px);
    -o-transform: translateX(200px);
    -ms-transform: translateX(200px);
    transform: translateX(200px);
  }
  100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
}
@keyframes sidebarItem {
  0% {
    -webkit-transform: translateX(200px);
    -moz-transform: translateX(200px);
    -o-transform: translateX(200px);
    -ms-transform: translateX(200px);
    transform: translateX(200px);
  }
  100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
}
:root {
  --global-font-size: 14px;
  --global-bg: #fff;
  --font-color: #4c4948;
  --hr-border: #d2ebfd;
  --hr-before-color: #bfe4fb;
  --search-bg: #f6f8fa;
  --search-input-color: #4c4948;
  --search-result-title: #4c4948;
  --preloader-bg: #37474f;
  --preloader-color: #fff;
  --tab-border-color: #f0f0f0;
  --tab-botton-bg: #f0f0f0;
  --tab-botton-color: #1f2d3d;
  --tab-button-hover-bg: #dcdcdc;
  --tab-button-active-bg: #fff;
  --card-bg: #fff;
  --sidebar-bg: #f6f8fa;
  --btn-hover-color: #ff7242;
  --btn-color: #fff;
  --btn-bg: #49b1f5;
  --text-bg-hover: #49b1f5;
  --light-grey: #eee;
  --white: #fff;
  --text-highlight-color: #1f2d3d;
  --blockquote-color: #6a737d;
  --blockquote-bg: rgba(73,177,245,0.1);
  --reward-pop: #f5f5f5;
  --toc-link-color: #666261;
  --card-box-shadow: 0 3px 8px 6px rgba(7,17,27,0.06);
  --card-hover-box-shadow: 0 3px 8px 6px rgba(7,17,27,0.15);
}
html {
  height: 100%;
  font-size: 20px;
}
body {
  position: relative;
  min-height: 100%;
  background: var(--global-bg);
  color: var(--font-color);
  font-size: var(--global-font-size);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Lato, Roboto, 'PingFang SC', 'Microsoft YaHei', sans-serif;
  line-height: 2;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}
*::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
*::-webkit-scrollbar-thumb {
  background: var(--btn-bg);
}
*::-webkit-scrollbar-track {
  background-color: transparent;
}
input::placeholder {
  color: var(--font-color);
}
h1,
h2,
h3,
h4,
h5,
h6 {
  position: relative;
  margin: 1rem 0 0.7rem;
  color: var(--text-highlight-color);
  font-weight: bold;
}
h1 code,
h2 code,
h3 code,
h4 code,
h5 code,
h6 code {
  font-size: inherit !important;
}
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
hr {
  position: relative;
  margin: 2rem auto;
  border: 2px dashed var(--hr-border);
  width: calc(100% - 4px);
}
hr:hover:before {
  left: calc(95% - 20px);
}
hr:before {
  position: absolute;
  top: -10px;
  left: 5%;
  z-index: 1;
  color: var(--hr-before-color);
  content: '\f0c4';
  font-size: 20px;
  line-height: 1;
  -webkit-transition: all 1s ease-in-out;
  -moz-transition: all 1s ease-in-out;
  -o-transition: all 1s ease-in-out;
  -ms-transition: all 1s ease-in-out;
  transition: all 1s ease-in-out;
}
.table-wrap {
  overflow-x: scroll;
  margin: 0 0 1rem;
}
table {
  display: table;
  width: 100%;
  border-spacing: 0;
  border-collapse: collapse;
  empty-cells: show;
}
table thead {
  background: rgba(153,169,191,0.1);
}
table th,
table td {
  padding: 0.3rem 0.6rem;
  border: 1px solid var(--light-grey);
  vertical-align: middle;
}
*::selection {
  background: #00c4b6;
  color: #f7f7f7;
}
button {
  padding: 0;
  outline: 0;
  border: none;
  background: none;
  cursor: pointer;
}
a {
  color: #99a9bf;
  text-decoration: none;
  word-wrap: break-word;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  -o-transition: all 0.2s;
  -ms-transition: all 0.2s;
  transition: all 0.2s;
  overflow-wrap: break-word;
}
a:hover {
  color: #49b1f5;
}
.is-center {
  text-align: center;
}
.copy-true {
  -webkit-user-select: all;
  -moz-user-select: all;
  -ms-user-select: all;
  user-select: all;
}
.pull-left {
  float: left;
}
.pull-right {
  float: right;
}
.button--animated {
  position: relative;
  z-index: 1;
  -webkit-transition: color 1s;
  -moz-transition: color 1s;
  -o-transition: color 1s;
  -ms-transition: color 1s;
  transition: color 1s;
}
.button--animated:before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
  background: var(--btn-hover-color);
  content: '';
  -webkit-transition: -webkit-transform 0.5s ease-out;
  -moz-transition: -moz-transform 0.5s ease-out;
  -o-transition: -o-transform 0.5s ease-out;
  -ms-transition: -ms-transform 0.5s ease-out;
  transition: transform 0.5s ease-out;
  -webkit-transform: scaleX(0);
  -moz-transform: scaleX(0);
  -o-transform: scaleX(0);
  -ms-transform: scaleX(0);
  transform: scaleX(0);
  -webkit-transform-origin: 0 50%;
  -moz-transform-origin: 0 50%;
  -o-transform-origin: 0 50%;
  -ms-transform-origin: 0 50%;
  transform-origin: 0 50%;
}
.button--animated:hover:before {
  -webkit-transition-timing-function: cubic-bezier(0.45, 1.64, 0.47, 0.66);
  -moz-transition-timing-function: cubic-bezier(0.45, 1.64, 0.47, 0.66);
  -o-transition-timing-function: cubic-bezier(0.45, 1.64, 0.47, 0.66);
  -ms-transition-timing-function: cubic-bezier(0.45, 1.64, 0.47, 0.66);
  transition-timing-function: cubic-bezier(0.45, 1.64, 0.47, 0.66);
  -webkit-transform: scaleX(1);
  -moz-transform: scaleX(1);
  -o-transform: scaleX(1);
  -ms-transform: scaleX(1);
  transform: scaleX(1);
}
img {
  max-width: 100%;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  -o-transition: all 0.2s;
  -ms-transition: all 0.2s;
  transition: all 0.2s;
}
img[src=''],
img:not([src]) {
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
}
.img-alt {
  margin: -0.5rem 0 0.5rem;
  color: #858585;
}
.img-alt:hover {
  text-decoration: none !important;
}
:root {
  --hl-color: #90a4ae;
  --hl-bg: #f6f8fa;
  --hltools-bg: #e6ebf1;
  --hltools-color: #90a4ae;
  --hlnumber-bg: #f6f8fa;
  --hlnumber-color: rgba(144,164,174,0.5);
  --hlscrollbar-bg: #dce4eb;
  --hlexpand-bg: linear-gradient(180deg, rgba(246,248,250,0.6), rgba(246,248,250,0.9));
}
#article-container pre,
#article-container figure.highlight {
  overflow: auto;
  margin: 0 0 1rem;
  padding: 0;
  background: var(--hl-bg);
  color: var(--hl-color);
  line-height: 1.6;
  counter-reset: line;
  white-space: pre-wrap;
}
blockquote {
  margin: 0 0 1rem;
  padding: 0.1rem 0.8rem;
  border-left: 0.2rem solid #49b1f5;
  background-color: var(--blockquote-bg);
  color: var(--blockquote-color);
}
blockquote a {
  word-break: break-all;
}
blockquote p {
  margin: 0 !important;
  padding: 0.5rem 0;
}
blockquote footer {
  padding: 0 0 0.5rem;
}
blockquote footer cite:before {
  padding: 0 0.3em;
  content: '—';
}
#article-container pre,
#article-container code {
  font-size: var(--global-font-size);
  font-family: consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', sans-serif !important;
}
#article-container code {
  padding: 0.1rem 0.2rem;
  background: rgba(27,31,35,0.05);
  color: #f47466;
}
#article-container pre {
  padding: 10px 20px;
}
#article-container pre code {
  padding: 0;
  background: none;
  color: var(--hl-color);
  text-shadow: none;
}
#article-container figure.highlight {
  position: relative;
}
#article-container figure.highlight pre {
  margin: 0;
  padding: 8px 0;
  border: none;
}
#article-container figure.highlight figcaption,
#article-container figure.highlight .caption {
  padding: 0.3rem 0 0.1rem 0.7rem;
  font-size: var(--global-font-size);
  line-height: 1em;
}
#article-container figure.highlight figcaption a,
#article-container figure.highlight .caption a {
  float: right;
  padding-right: 10px;
  color: var(--hl-color);
}
#article-container figure.highlight figcaption a:hover,
#article-container figure.highlight .caption a:hover {
  border-bottom-color: var(--hl-color);
}
#article-container .highlight-tools {
  position: relative;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  overflow: hidden;
  min-height: 1.2rem;
  height: 2.15em;
  background: var(--hltools-bg);
  color: var(--hltools-color);
  font-size: var(--global-font-size);
}
#article-container .highlight-tools.closed + table {
  display: none;
}
#article-container .highlight-tools .expand {
  position: absolute;
  padding: 0.4rem 0.7rem;
  cursor: pointer;
  -webkit-transition: -webkit-transform 0.3s;
  -moz-transition: -moz-transform 0.3s;
  -o-transition: -o-transform 0.3s;
  -ms-transition: -ms-transform 0.3s;
  transition: transform 0.3s;
}
#article-container .highlight-tools .expand + .code-lang {
  left: 1.7rem;
}
#article-container .highlight-tools .expand.closed {
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
  -webkit-transform: rotate(-90deg) !important;
  -moz-transform: rotate(-90deg) !important;
  -o-transform: rotate(-90deg) !important;
  -ms-transform: rotate(-90deg) !important;
  transform: rotate(-90deg) !important;
}
#article-container .highlight-tools .code-lang {
  position: absolute;
  left: 0.7rem;
  text-transform: uppercase;
  font-weight: bold;
  font-size: 1.15em;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
#article-container .highlight-tools .copy-notice {
  position: absolute;
  right: 1.7rem;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  -webkit-transition: opacity 0.4s;
  -moz-transition: opacity 0.4s;
  -o-transition: opacity 0.4s;
  -ms-transition: opacity 0.4s;
  transition: opacity 0.4s;
}
#article-container .highlight-tools .copy-button {
  position: absolute;
  right: 0.7rem;
  cursor: pointer;
  -webkit-transition: color 0.2s;
  -moz-transition: color 0.2s;
  -o-transition: color 0.2s;
  -ms-transition: color 0.2s;
  transition: color 0.2s;
}
#article-container .highlight-tools .copy-button:hover {
  color: #49b1f5;
}
#article-container .gutter {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
#article-container .gist table {
  width: auto;
}
#article-container .gist table td {
  border: none;
}
#article-container figure.highlight {
  margin: 0 0 1.2rem;
  border-radius: 7px;
  -webkit-box-shadow: 0 5px 10px 0 rgba(144,164,174,0.4);
  box-shadow: 0 5px 10px 0 rgba(144,164,174,0.4);
  -webkit-transform: translateZ(0);
}
#article-container figure.highlight .highlight-tools:after {
  position: absolute;
  left: 0.7rem;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: #fc625d;
  -webkit-box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;
  box-shadow: 20px 0 #fdbc40, 40px 0 #35cd4b;
  content: ' ';
}
#article-container figure.highlight .highlight-tools .expand {
  right: 0;
}
#article-container figure.highlight .highlight-tools .expand.closed {
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
  -webkit-transform: rotate(90deg) !important;
  -moz-transform: rotate(90deg) !important;
  -o-transform: rotate(90deg) !important;
  -ms-transform: rotate(90deg) !important;
  transform: rotate(90deg) !important;
}
#article-container figure.highlight .highlight-tools .expand ~ .copy-notice {
  right: 2.8rem;
}
#article-container figure.highlight .highlight-tools .expand ~ .copy-button {
  right: 1.8rem;
}
#article-container figure.highlight .highlight-tools .code-lang {
  left: 3.8rem !important;
}
@-moz-keyframes code-expand-key {
  0% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
  50% {
    opacity: 0.1;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=10)";
    filter: alpha(opacity=10);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@-webkit-keyframes code-expand-key {
  0% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
  50% {
    opacity: 0.1;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=10)";
    filter: alpha(opacity=10);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@-o-keyframes code-expand-key {
  0% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
  50% {
    opacity: 0.1;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=10)";
    filter: alpha(opacity=10);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
@keyframes code-expand-key {
  0% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
  50% {
    opacity: 0.1;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=10)";
    filter: alpha(opacity=10);
  }
  100% {
    opacity: 0.6;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
  }
}
.article-sort {
  margin-left: 0.5rem;
  padding-left: 1rem;
  border-left: 2px solid #aadafa;
}
.article-sort-title {
  position: relative;
  margin-left: 0.5rem;
  padding-bottom: 1rem;
  padding-left: 1rem;
  font-size: 1.72em;
}
.article-sort-title:hover:before {
  border-color: #ff7242;
}
.article-sort-title:before {
  position: absolute;
  top: calc(((100% - 1.8rem) / 2));
  left: -0.45rem;
  z-index: 1;
  width: 0.5rem;
  height: 0.5rem;
  border: 0.25rem solid #49b1f5;
  border-radius: 0.5rem;
  background: var(--card-bg);
  content: '';
  line-height: 0.5rem;
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}
.article-sort-title:after {
  position: absolute;
  bottom: 0;
  left: 0;
  z-index: 0;
  width: 0.1rem;
  height: 1.5em;
  background: #aadafa;
  content: '';
}
.article-sort-item {
  position: relative;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  margin: 0 0 1rem 0.5rem;
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}
.article-sort-item:hover:before {
  border-color: #ff7242;
}
.article-sort-item:before {
  position: absolute;
  left: calc(-1rem - 17px);
  width: 0.3rem;
  height: 0.3rem;
  border: 0.15rem solid #49b1f5;
  border-radius: 0.3rem;
  background: var(--card-bg);
  content: '';
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}
.article-sort-item.no-article-cover {
  height: 80px;
}
.article-sort-item.no-article-cover .article-sort-item-info {
  padding: 0;
}
.article-sort-item.year {
  font-size: 1.43em;
}
.article-sort-item.year:hover:before {
  border-color: #49b1f5;
}
.article-sort-item.year:before {
  border-color: #ff7242;
}
.article-sort-item-time {
  color: #858585;
  font-size: 95%;
}
.article-sort-item-time time {
  padding-left: 0.3rem;
  cursor: default;
}
.article-sort-item-title {
  color: var(--font-color);
  font-size: 1.1em;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
  -webkit-line-clamp: 2;
}
.article-sort-item-title:hover {
  color: #49b1f5;
  -webkit-transform: translateX(10px);
  -moz-transform: translateX(10px);
  -o-transform: translateX(10px);
  -ms-transform: translateX(10px);
  transform: translateX(10px);
}
.article-sort-item-img {
  overflow: hidden;
  width: 80px;
  height: 80px;
}
.article-sort-item-img img {
  width: 100%;
  height: 100%;
  -webkit-transition: all 0.6s;
  -moz-transition: all 0.6s;
  -o-transition: all 0.6s;
  -ms-transition: all 0.6s;
  transition: all 0.6s;
  object-fit: cover;
}
.article-sort-item-img img:hover {
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
.article-sort-item-info {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  padding: 0 0.8rem;
}
#page .category-lists {
  padding: 1rem 0 1.5rem;
}
@media screen and (max-width: 768px) {
  #page .category-lists {
    padding: 0;
  }
}
#page .category-lists .category-title {
  font-size: 2.57em;
}
@media screen and (max-width: 768px) {
  #page .category-lists .category-title {
    font-size: 2em;
  }
}
#page .category-lists .category-list a {
  color: var(--font-color);
}
#page .category-lists .category-list a:hover {
  color: #49b1f5;
}
#page .category-lists .category-list .category-list-count {
  margin-left: 0.4rem;
  color: #858585;
}
#page .category-lists .category-list .category-list-count:before {
  content: '(';
}
#page .category-lists .category-list .category-list-count:after {
  content: ')';
}
#page .category-lists ul {
  margin-top: 0.4rem;
  padding: 0 0 0 1rem;
  list-style: none;
  counter-reset: li;
}
#page .category-lists ul ul {
  padding-left: 0.2rem;
}
#page .category-lists ul li {
  position: relative;
  margin: 0.3rem 0;
  padding: 0.12em 0.4em 0.12em 1.4em;
}
#page .category-lists ul li:before {
  position: absolute;
  left: 0;
  cursor: pointer;
  -webkit-transition: all 0.3s ease-out;
  -moz-transition: all 0.3s ease-out;
  -o-transition: all 0.3s ease-out;
  -ms-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
  top: 0.7em;
  width: 0.43em;
  height: 0.43em;
  border: 0.215em solid #49b1f5;
  border-radius: 0.43em;
  background: transparent;
  content: '';
}
#page .category-lists ul li:hover:before {
  border-color: #ff7242;
}
.layout {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  margin: 0 auto;
  padding: 2rem 15px;
  max-width: 1200px;
}
@media screen and (max-width: 900px) {
  .layout {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -o-box-orient: vertical;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
  }
}
@media screen and (max-width: 768px) {
  .layout {
    padding: 1rem 5px;
  }
}
@media screen and (min-width: 2000px) {
  .layout {
    max-width: 1500px;
  }
}
.layout > div:first-child:not(.recent-posts) {
  -webkit-align-self: flex-start;
  align-self: flex-start;
  -ms-flex-item-align: start;
  padding: 50px 40px;
  border-radius: 8px;
  background: var(--card-bg);
  -webkit-box-shadow: var(--card-box-shadow);
  box-shadow: var(--card-box-shadow);
}
.layout > div:first-child:not(.recent-posts):hover {
  -webkit-box-shadow: var(--card-hover-box-shadow);
  box-shadow: var(--card-hover-box-shadow);
}
@media screen and (max-width: 768px) {
  .layout > div:first-child:not(.recent-posts) {
    padding: 1.8rem 0.7rem !important;
  }
}
.layout > div:first-child {
  width: 75%;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
@media screen and (max-width: 900px) {
  .layout > div:first-child {
    width: 100% !important;
  }
}
.layout.hide-aside {
  max-width: 1000px;
}
@media screen and (min-width: 2000px) {
  .layout.hide-aside {
    max-width: 1300px;
  }
}
.layout.hide-aside > div {
  width: 100% !important;
}
#article-container .flink .flink-desc {
  margin: 0.2rem 0 0.5rem;
}
#article-container .flink .flink-list {
  overflow: auto;
  padding: 10px 10px 0;
  text-align: center;
}
#article-container .flink .flink-list > .flink-list-item {
  position: relative;
  float: left;
  overflow: hidden;
  margin: 15px 7px;
  width: calc(100% / 3 - 15px);
  height: 90px;
  border-radius: 8px;
  line-height: 17px;
  -webkit-transform: translateZ(0);
}
@media screen and (max-width: 1024px) {
  #article-container .flink .flink-list > .flink-list-item {
    width: calc(50% - 15px) !important;
  }
}
@media screen and (max-width: 600px) {
  #article-container .flink .flink-list > .flink-list-item {
    width: calc(100% - 15px) !important;
  }
}
#article-container .flink .flink-list > .flink-list-item:hover img {
  -webkit-transform: rotate(360deg);
  -moz-transform: rotate(360deg);
  -o-transform: rotate(360deg);
  -ms-transform: rotate(360deg);
  transform: rotate(360deg);
}
#article-container .flink .flink-list > .flink-list-item:before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
  background: var(--text-bg-hover);
  content: '';
  -webkit-transition: -webkit-transform 0.3s ease-out;
  -moz-transition: -moz-transform 0.3s ease-out;
  -o-transition: -o-transform 0.3s ease-out;
  -ms-transition: -ms-transform 0.3s ease-out;
  transition: transform 0.3s ease-out;
  -webkit-transform: scale(0);
  -moz-transform: scale(0);
  -o-transform: scale(0);
  -ms-transform: scale(0);
  transform: scale(0);
}
#article-container .flink .flink-list > .flink-list-item:hover:before,
#article-container .flink .flink-list > .flink-list-item:focus:before,
#article-container .flink .flink-list > .flink-list-item:active:before {
  -webkit-transform: scale(1);
  -moz-transform: scale(1);
  -o-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}
#article-container .flink .flink-list > .flink-list-item a {
  color: var(--font-color);
  text-decoration: none;
}
#article-container .flink .flink-list > .flink-list-item a img {
  float: left;
  margin: 15px 10px;
  width: 60px;
  height: 60px;
  border-radius: 35px;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
#article-container .flink .flink-list > .flink-list-item a .img-alt {
  display: none;
}
#article-container .flink .flink-list > .flink-list-item a .flink-item-name {
  display: block;
  padding: 16px 10px 0 0;
  height: 40px;
  font-weight: bold;
  font-size: 1.43em;
}
#article-container .flink .flink-list > .flink-list-item a .flink-item-desc {
  display: block;
  padding: 16px 10px 16px 0;
  height: 50px;
  font-size: 0.93em;
}
#recent-posts > .recent-post-item:not(:first-child) {
  margin-top: 1rem;
}
#recent-posts > .recent-post-item {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -o-box-orient: horizontal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  height: 20em;
  border-radius: 12px 8px 8px 12px;
  background: var(--card-bg);
  -webkit-box-shadow: var(--card-box-shadow);
  box-shadow: var(--card-box-shadow);
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
@media screen and (max-width: 768px) {
  #recent-posts > .recent-post-item {
    border-radius: 12px 12px 8px 8px;
  }
}
#recent-posts > .recent-post-item:hover {
  -webkit-box-shadow: var(--card-hover-box-shadow);
  box-shadow: var(--card-hover-box-shadow);
}
#recent-posts > .recent-post-item:hover img.post_bg {
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
#recent-posts > .recent-post-item .left_radius {
  border-radius: 8px 0 0 8px;
}
#recent-posts > .recent-post-item .right_radius {
  border-radius: 8px 0 0 8px;
}
#recent-posts > .recent-post-item.ads-wrap {
  display: block !important;
  height: auto !important;
}
#recent-posts > .recent-post-item .post_cover {
  overflow: hidden;
  width: 45%;
  height: 100%;
  -webkit-mask-image: -webkit-radial-gradient(#fff, #000);
}
#recent-posts > .recent-post-item .post_cover img.post_bg {
  width: 100%;
  height: 100%;
  -webkit-transition: all 0.6s;
  -moz-transition: all 0.6s;
  -o-transition: all 0.6s;
  -ms-transition: all 0.6s;
  transition: all 0.6s;
  object-fit: cover;
}
#recent-posts > .recent-post-item .post_cover img.post_bg:hover {
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
#recent-posts > .recent-post-item >.recent-post-info {
  display: inline-block;
  overflow: hidden;
  padding: 0 40px;
  width: 55%;
}
#recent-posts > .recent-post-item >.recent-post-info.no-cover {
  width: 100%;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-title {
  margin-bottom: 0.3rem;
  color: var(--text-highlight-color);
  font-size: 1.72em;
  line-height: 1.4;
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
  -webkit-line-clamp: 2;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-title:hover {
  color: #49b1f5;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap {
  color: #858585;
  font-size: 90%;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap > .post-meta-date {
  cursor: default;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap .sticky {
  color: #ff7242;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap i {
  margin: 0 0.2rem 0 0;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap .article-meta-label {
  padding-right: 0.2rem;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap .article-meta__separator {
  margin: 0 0.3rem;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap .article-meta__link {
  margin: 0 0.2rem;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap .fa-angle-right {
  margin: 0 0.2rem;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap a {
  color: #858585;
}
#recent-posts > .recent-post-item >.recent-post-info > .article-meta-wrap a:hover {
  color: #49b1f5;
  text-decoration: underline;
}
#recent-posts > .recent-post-item >.recent-post-info > .content {
  margin-top: 0.3rem;
  -webkit-line-clamp: 3;
}
@media screen and (max-width: 768px) {
  #recent-posts .recent-post-item {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -o-box-orient: vertical;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
    height: auto !important;
  }
  #recent-posts .recent-post-item .post_cover {
    -webkit-box-ordinal-group: 1 !important;
    -moz-box-ordinal-group: 1 !important;
    -o-box-ordinal-group: 1 !important;
    -ms-flex-order: 1 !important;
    -webkit-order: 1 !important;
    order: 1 !important;
    width: 100%;
    height: 230px;
    border-radius: 8px 8px 0 0;
  }
  #recent-posts .recent-post-item .recent-post-info {
    -webkit-box-ordinal-group: 2 !important;
    -moz-box-ordinal-group: 2 !important;
    -o-box-ordinal-group: 2 !important;
    -ms-flex-order: 2 !important;
    -webkit-order: 2 !important;
    order: 2 !important;
    padding: 1rem 1rem 1.5rem;
    width: 100%;
  }
  #recent-posts .recent-post-item .recent-post-info.no-cover {
    padding: 1.5rem 1rem;
  }
  #recent-posts .recent-post-item .recent-post-info .article-title {
    font-size: 1.43em;
  }
  #recent-posts .recent-post-item .recent-post-info .content {
    height: auto;
  }
}
.tag-cloud-list a {
  display: inline-block;
  padding: 0 0.4rem;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
.tag-cloud-list a:hover {
  color: #49b1f5 !important;
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
@media screen and (max-width: 768px) {
  .tag-cloud-list a {
    zoom: 0.85;
  }
}
.tag-cloud-title {
  font-size: 2.57em;
}
@media screen and (max-width: 768px) {
  .tag-cloud-title {
    font-size: 2em;
  }
}
#error-wrap {
  position: absolute;
  top: 50%;
  right: 0;
  left: 0;
  margin: 0 auto;
  padding: 0 1rem;
  max-width: 1000px;
  -webkit-transform: translate(0, -50%);
  -moz-transform: translate(0, -50%);
  -o-transform: translate(0, -50%);
  -ms-transform: translate(0, -50%);
  transform: translate(0, -50%);
}
#error-wrap .error-content {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -o-box-orient: horizontal;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  margin: 0 1rem;
  height: 18rem;
  border-radius: 8px;
  background: var(--card-bg);
  -webkit-box-shadow: var(--card-box-shadow);
  box-shadow: var(--card-box-shadow);
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
#error-wrap .error-content:hover {
  -webkit-box-shadow: var(--card-hover-box-shadow);
  box-shadow: var(--card-hover-box-shadow);
}
@media screen and (max-width: 768px) {
  #error-wrap .error-content {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -o-box-orient: vertical;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
    margin: 0;
    height: 25rem;
  }
}
#error-wrap .error-content .error-img {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  height: 100%;
  border-top-left-radius: 8px;
  border-bottom-left-radius: 8px;
  background-color: #49b1f5;
  background-position: center;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
}
@media screen and (max-width: 768px) {
  #error-wrap .error-content .error-img {
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    -o-box-flex: 1;
    box-flex: 1;
    -webkit-flex: 1;
    -ms-flex: 1;
    flex: 1;
    width: 100%;
    border-top-right-radius: 8px;
    border-bottom-left-radius: 0;
  }
}
#error-wrap .error-content .error-info {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  padding: 0.5rem;
  text-align: center;
  font-size: 14px;
}
@media screen and (max-width: 768px) {
  #error-wrap .error-content .error-info {
    -webkit-box-flex: 1.1;
    -moz-box-flex: 1.1;
    -o-box-flex: 1.1;
    box-flex: 1.1;
    -webkit-flex: 1.1;
    -ms-flex: 1.1;
    flex: 1.1;
    width: 100%;
  }
}
#error-wrap .error-content .error-info .error_title {
  margin-top: -4rem;
  font-size: 9em;
}
@media screen and (max-width: 768px) {
  #error-wrap .error-content .error-info .error_title {
    margin-top: -3rem;
  }
}
#error-wrap .error-content .error-info .error_subtitle {
  margin-top: -3.5rem;
  word-break: break-word;
  font-size: 1.6em;
  -webkit-line-clamp: 2;
}
#error-wrap .error-content .error-info a {
  display: inline-block;
  margin-top: 0.5rem;
  padding: 0.3rem 1.5rem;
  background: var(--btn-bg);
  color: var(--btn-color);
}
#error-wrap .error-content .error-info a i {
  padding-right: 0.3rem;
}
#aside-content {
  width: 25%;
}
@media screen and (min-width: 900px) {
  #aside-content {
    padding-left: 15px;
  }
}
@media screen and (max-width: 900px) {
  #aside-content {
    width: 100%;
  }
}
#aside-content > .card-widget:first-child {
  margin-top: 0;
}
@media screen and (max-width: 900px) {
  #aside-content > .card-widget:first-child {
    margin-top: 1rem;
  }
}
#aside-content .card-widget {
  position: relative;
  overflow: hidden;
  margin-top: 1rem;
  padding: 1rem 1.2rem;
  border-radius: 8px;
  background: var(--card-bg);
  -webkit-box-shadow: var(--card-box-shadow);
  box-shadow: var(--card-box-shadow);
  -webkit-transition: box-shadow 0.3s;
  -moz-transition: box-shadow 0.3s;
  -o-transition: box-shadow 0.3s;
  -ms-transition: box-shadow 0.3s;
  transition: box-shadow 0.3s;
}
#aside-content .card-widget:hover {
  -webkit-box-shadow: var(--card-hover-box-shadow);
  box-shadow: var(--card-hover-box-shadow);
}
#aside-content .card-info img {
  width: 110px;
  height: 110px;
  border-radius: 70px;
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
}
#aside-content .card-info img:hover {
  -webkit-transform: rotate(360deg);
  -moz-transform: rotate(360deg);
  -o-transform: rotate(360deg);
  -ms-transform: rotate(360deg);
  transform: rotate(360deg);
}
#aside-content .card-info .author-info__name {
  font-weight: 500;
  font-size: 1.57em;
}
#aside-content .card-info .author-info__description {
  margin-top: -0.3rem;
}
#aside-content .card-info .card-info-data {
  display: table;
  margin: 0.7rem 0 0.2rem;
  width: 100%;
  table-layout: fixed;
}
#aside-content .card-info .card-info-data > .card-info-data-item {
  display: table-cell;
}
#aside-content .card-info .card-info-data > .card-info-data-item a .headline {
  color: var(--font-color);
  font-size: 1em;
}
#aside-content .card-info .card-info-data > .card-info-data-item a .length-num {
  margin-top: -0.3rem;
  color: var(--text-highlight-color);
  font-size: 1.4em;
}
#aside-content .card-info .card-info-social-icons {
  margin: 0.3rem 0 -0.3rem;
}
#aside-content .card-info .card-info-social-icons .social-icon {
  margin: 0 0.5rem;
  color: var(--font-color);
  font-size: 1.4em;
  cursor: pointer;
}
#aside-content .card-info .card-info-social-icons i {
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
#aside-content .card-info .card-info-social-icons i:hover {
  -webkit-transform: rotate(540deg);
  -moz-transform: rotate(540deg);
  -o-transform: rotate(540deg);
  -ms-transform: rotate(540deg);
  transform: rotate(540deg);
}
#aside-content .card-info #card-info-btn {
  display: block;
  margin-top: 0.7rem;
  background-color: var(--btn-bg);
  color: var(--btn-color);
  text-align: center;
  line-height: 2.4;
}
#aside-content .card-info #card-info-btn span {
  padding-left: 0.5rem;
}
#aside-content .item-headline {
  padding-bottom: 0.3rem;
  font-size: 1.2em;
}
#aside-content .item-headline span {
  margin-left: 0.5rem;
}
@media screen and (min-width: 900px) {
  #aside-content .sticky_layout {
    position: sticky;
    position: -webkit-sticky;
    top: 20px;
    -webkit-transition: top 0.3s;
    -moz-transition: top 0.3s;
    -o-transition: top 0.3s;
    -ms-transition: top 0.3s;
    transition: top 0.3s;
  }
}
#aside-content .card-tag-cloud a {
  display: inline-block;
  padding: 0 0.2rem;
}
#aside-content .card-tag-cloud a:hover {
  color: #49b1f5 !important;
}
#aside-content .aside-list > span {
  display: block;
  margin-bottom: 0.5rem;
  text-align: center;
}
#aside-content .aside-list > .aside-list-item {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  padding: 0.3rem 0;
}
#aside-content .aside-list > .aside-list-item:first-child {
  padding-top: 0;
}
#aside-content .aside-list > .aside-list-item:not(:last-child) {
  border-bottom: 1px dashed #f5f5f5;
}
#aside-content .aside-list > .aside-list-item:last-child {
  padding-bottom: 0;
}
#aside-content .aside-list > .aside-list-item .thumbnail {
  overflow: hidden;
  width: 4.2em;
  height: 4.2em;
}
#aside-content .aside-list > .aside-list-item .thumbnail > img {
  width: 100%;
  height: 100%;
  -webkit-transition: all 0.6s;
  -moz-transition: all 0.6s;
  -o-transition: all 0.6s;
  -ms-transition: all 0.6s;
  transition: all 0.6s;
  object-fit: cover;
}
#aside-content .aside-list > .aside-list-item .thumbnail > img:hover {
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
#aside-content .aside-list > .aside-list-item .content {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  padding-left: 10px;
  word-break: break-all;
}
#aside-content .aside-list > .aside-list-item .content > .name {
  -webkit-line-clamp: 1;
}
#aside-content .aside-list > .aside-list-item .content > time,
#aside-content .aside-list > .aside-list-item .content > .name {
  display: block;
  color: #858585;
  font-size: 85%;
}
#aside-content .aside-list > .aside-list-item .content > .title,
#aside-content .aside-list > .aside-list-item .content > .comment {
  color: var(--font-color);
  font-size: 95%;
  line-height: 1.5;
  -webkit-line-clamp: 2;
}
#aside-content .aside-list > .aside-list-item .content > .title:hover,
#aside-content .aside-list > .aside-list-item .content > .comment:hover {
  color: #49b1f5;
}
#aside-content .aside-list > .aside-list-item.no-cover {
  min-height: 4.4em;
}
#aside-content .card-archives ul.card-archive-list,
#aside-content .card-categories ul.card-category-list {
  margin: 0;
  padding: 0;
  list-style: none;
}
#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,
#aside-content .card-categories ul.card-category-list > .card-category-list-item a {
  display: inline-block;
  padding: 0.15rem 0.5rem;
  width: 100%;
  color: var(--font-color);
  -webkit-transition: all 0.4s;
  -moz-transition: all 0.4s;
  -o-transition: all 0.4s;
  -ms-transition: all 0.4s;
  transition: all 0.4s;
}
#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,
#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {
  padding: 0.15rem 0.85rem;
  background-color: var(--text-bg-hover);
}
#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span,
#aside-content .card-categories ul.card-category-list > .card-category-list-item a span {
  display: inline-block;
  vertical-align: bottom;
}
#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,
#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {
  width: 80%;
}
#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,
#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {
  width: 20%;
  text-align: right;
}
#aside-content .card-categories .card-category-list.child {
  padding: 0 0 0 0.8rem;
}
#aside-content .card-categories .card-category-list > .parent > a .card-category-list-name {
  width: 70% !important;
}
#aside-content .card-categories .card-category-list > .parent > a .card-category-list-count {
  width: calc(100% - 70% - 20px);
  text-align: right;
}
#aside-content .card-categories .card-category-list > .parent i {
  float: right;
  margin-right: -0.35rem;
  padding: 0.35rem;
  -webkit-transition: -webkit-transform 0.3s;
  -moz-transition: -moz-transform 0.3s;
  -o-transition: -o-transform 0.3s;
  -ms-transition: -ms-transform 0.3s;
  transition: transform 0.3s;
  -webkit-transform: rotate(0);
  -moz-transform: rotate(0);
  -o-transform: rotate(0);
  -ms-transform: rotate(0);
  transform: rotate(0);
}
#aside-content .card-categories .card-category-list > .parent i.expand {
  -webkit-transform: rotate(-90deg);
  -moz-transform: rotate(-90deg);
  -o-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  transform: rotate(-90deg);
}
#aside-content .card-webinfo .webinfo .webinfo-item {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  padding: 0.1rem 0.5rem 0;
}
#aside-content .card-webinfo .webinfo .webinfo-item div:first-child {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  padding-right: 1rem;
}
@media screen and (min-width: 901px) {
  #aside-content #card-toc {
    right: 0 !important;
  }
}
@media screen and (max-width: 900px) {
  #aside-content #card-toc {
    position: fixed;
    right: -100%;
    bottom: 30px;
    z-index: 100;
    max-height: calc(100% - 60px);
    width: 300px;
    opacity: 0;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
    filter: alpha(opacity=0);
    -webkit-transform-origin: right bottom;
    -moz-transform-origin: right bottom;
    -o-transform-origin: right bottom;
    -ms-transform-origin: right bottom;
    transform-origin: right bottom;
  }
}
#aside-content #card-toc .toc-content {
  overflow-y: auto;
  max-height: calc(100vh - 120px);
}
@media screen and (max-width: 900px) {
  #aside-content #card-toc .toc-content {
    max-height: calc(100vh - 140px);
  }
}
#aside-content #card-toc .toc-content .toc-child {
  display: none;
}
@media screen and (max-width: 900px) {
  #aside-content #card-toc .toc-content .toc-child {
    display: block !important;
  }
}
#aside-content #card-toc .toc-content .toc-item.active .toc-child {
  display: block;
}
#aside-content #card-toc .toc-content ol,
#aside-content #card-toc .toc-content li {
  list-style: none;
}
#aside-content #card-toc .toc-content > ol {
  padding: 0 !important;
}
#aside-content #card-toc .toc-content ol {
  margin: 0;
  padding-left: 0.4rem;
}
#aside-content #card-toc .toc-content .toc-link {
  display: block;
  padding-left: 0.3rem;
  border-left: 3px solid transparent;
  color: var(--toc-link-color);
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}
#aside-content #card-toc .toc-content .toc-link.active {
  border-left-color: #009d92;
  background: #00c4b6;
  color: #fff;
}
#aside-content #card-toc .toc-content:before {
  position: absolute;
  top: 0.6rem;
  right: 1.2rem;
  color: #a9a9a9;
  content: attr(progress-percentage);
  font-style: italic;
  font-size: 1.2rem;
}
#aside-content :only-child > .card-widget {
  margin-top: 0;
}
#aside-content .card-more-btn {
  float: right;
  color: inherit;
}
#aside-content .card-more-btn:hover {
  -webkit-animation: more-btn-move 1s infinite;
  -moz-animation: more-btn-move 1s infinite;
  -o-animation: more-btn-move 1s infinite;
  -ms-animation: more-btn-move 1s infinite;
  animation: more-btn-move 1s infinite;
}
@media screen and (min-width: 900px) {
  html.hide-aside .layout {
    -webkit-box-pack: center;
    -moz-box-pack: center;
    -o-box-pack: center;
    -ms-flex-pack: center;
    -webkit-justify-content: center;
    justify-content: center;
  }
  html.hide-aside .layout > .aside-content {
    display: none;
  }
  html.hide-aside .layout > div:first-child {
    width: 80%;
  }
}
.page .sticky_layout {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -o-box-orient: vertical;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}
@-moz-keyframes more-btn-move {
  0%, 100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
  50% {
    -webkit-transform: translateX(3px);
    -moz-transform: translateX(3px);
    -o-transform: translateX(3px);
    -ms-transform: translateX(3px);
    transform: translateX(3px);
  }
}
@-webkit-keyframes more-btn-move {
  0%, 100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
  50% {
    -webkit-transform: translateX(3px);
    -moz-transform: translateX(3px);
    -o-transform: translateX(3px);
    -ms-transform: translateX(3px);
    transform: translateX(3px);
  }
}
@-o-keyframes more-btn-move {
  0%, 100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
  50% {
    -webkit-transform: translateX(3px);
    -moz-transform: translateX(3px);
    -o-transform: translateX(3px);
    -ms-transform: translateX(3px);
    transform: translateX(3px);
  }
}
@keyframes more-btn-move {
  0%, 100% {
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -o-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
  50% {
    -webkit-transform: translateX(3px);
    -moz-transform: translateX(3px);
    -o-transform: translateX(3px);
    -ms-transform: translateX(3px);
    transform: translateX(3px);
  }
}
@-moz-keyframes toc-open {
  0% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@-webkit-keyframes toc-open {
  0% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@-o-keyframes toc-open {
  0% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@keyframes toc-open {
  0% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
}
@-moz-keyframes toc-close {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@-webkit-keyframes toc-close {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@-o-keyframes toc-close {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
@keyframes toc-close {
  0% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -o-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1);
  }
  100% {
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -o-transform: scale(0.7);
    -ms-transform: scale(0.7);
    transform: scale(0.7);
  }
}
#post-comment .comment-head {
  margin-bottom: 1rem;
}
#post-comment .comment-head .comment-headline {
  display: inline-block;
  vertical-align: middle;
  font-weight: 700;
  font-size: 1.43em;
}
#post-comment .comment-head #comment-switch {
  display: inline-block;
  float: right;
  margin: 0.1rem auto 0;
  padding: 0.2rem 0.8rem;
  width: max-content;
  border-radius: 8px;
  background: #f6f8fa;
}
#post-comment .comment-head #comment-switch .first-comment {
  color: #49b1f5;
}
#post-comment .comment-head #comment-switch .second-comment {
  color: #ff7242;
}
#post-comment .comment-head #comment-switch .switch-btn {
  position: relative;
  display: inline-block;
  margin: -4px 0.4rem 0;
  width: 42px;
  height: 22px;
  border-radius: 34px;
  background-color: #49b1f5;
  vertical-align: middle;
  cursor: pointer;
  -webkit-transition: 0.4s;
  -moz-transition: 0.4s;
  -o-transition: 0.4s;
  -ms-transition: 0.4s;
  transition: 0.4s;
}
#post-comment .comment-head #comment-switch .switch-btn:before {
  position: absolute;
  bottom: 4px;
  left: 4px;
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background-color: #fff;
  content: '';
  -webkit-transition: 0.4s;
  -moz-transition: 0.4s;
  -o-transition: 0.4s;
  -ms-transition: 0.4s;
  transition: 0.4s;
}
#post-comment .comment-head #comment-switch .switch-btn.move {
  background-color: #ff7242;
}
#post-comment .comment-head #comment-switch .switch-btn.move:before {
  -webkit-transform: translateX(20px);
  -moz-transform: translateX(20px);
  -o-transform: translateX(20px);
  -ms-transform: translateX(20px);
  transform: translateX(20px);
}
#post-comment .comment-wrap > div:nth-child(2) {
  display: none;
}
#footer {
  position: relative;
  background: #49b1f5;
  background-attachment: local;
  background-position: bottom;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
}
#footer-wrap {
  position: relative;
  padding: 2rem 1rem;
  color: var(--light-grey);
  text-align: center;
}
#footer-wrap a {
  color: var(--light-grey);
}
#footer-wrap a:hover {
  text-decoration: underline;
}
#footer-wrap .footer-separator {
  margin: 0 0.2rem;
}
#footer-wrap .icp-icon {
  padding: 0 4px;
  vertical-align: text-bottom;
  max-height: 1.4em;
  width: auto;
}
#page-header {
  position: relative;
  width: 100%;
  background-color: #49b1f5;
  background-position: center center;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  background-size: cover;
  background-repeat: no-repeat;
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
}
#page-header.full_page {
  height: 100vh;
  background-attachment: fixed;
}
#page-header.full_page #site-info {
  position: absolute;
  top: 43%;
  padding: 0 0.5rem;
  width: 100%;
}
#page-header #site-title,
#page-header #site-subtitle,
#page-header #scroll-down .scroll-down-effects {
  text-align: center;
  text-shadow: 0.1rem 0.1rem 0.2rem rgba(0,0,0,0.15);
  line-height: 1.5;
}
#page-header #site-title {
  margin: 0;
  color: var(--white);
  font-size: 1.85em;
}
@media screen and (min-width: 768px) {
  #page-header #site-title {
    font-size: 2.85em;
  }
}
#page-header #site-subtitle {
  color: var(--light-grey);
  font-size: 1.15em;
}
@media screen and (min-width: 768px) {
  #page-header #site-subtitle {
    font-size: 1.72em;
  }
}
#page-header #site_social_icons {
  display: none;
  margin: 0 auto;
  width: 15rem;
  text-align: center;
}
@media screen and (max-width: 768px) {
  #page-header #site_social_icons {
    display: block;
  }
}
#page-header #site_social_icons .social-icon {
  margin: 0 0.5rem;
  color: var(--light-grey);
  text-shadow: 0.1rem 0.1rem 0.2rem rgba(0,0,0,0.15);
  font-size: 1.43em;
  cursor: pointer;
}
#page-header #scroll-down {
  position: absolute;
  bottom: 0;
  width: 100%;
  cursor: pointer;
}
#page-header #scroll-down .scroll-down-effects {
  position: relative;
  width: 100%;
  color: var(--light-grey);
  font-size: 30px;
}
#page-header.not-home-page {
  height: 20rem;
}
@media screen and (max-width: 768px) {
  #page-header.not-home-page {
    height: 14rem;
  }
}
#page-header #page-site-info {
  position: absolute;
  top: 10rem;
  padding: 0 0.5rem;
  width: 100%;
}
@media screen and (max-width: 768px) {
  #page-header #page-site-info {
    top: 7rem;
  }
}
#page-header.post-bg {
  height: 20rem;
}
@media screen and (max-width: 768px) {
  #page-header.post-bg {
    height: 18rem;
  }
}
#page-header.post-bg:before {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
  content: '';
}
#page-header #post-info {
  position: absolute;
  bottom: 5rem;
  padding: 0 8%;
  width: 100%;
  text-align: center;
}
@media screen and (max-width: 900px) {
  #page-header #post-info {
    bottom: 1.5rem;
    text-align: left;
  }
}
@media screen and (max-width: 768px) {
  #page-header #post-info {
    bottom: 1.1rem;
    padding: 0 1.1rem;
  }
}
#page-header.not-top-img {
  margin-bottom: 0.5rem;
  height: 60px;
  background: 0;
}
#page-header.not-top-img #nav {
  background: rgba(255,255,255,0.8);
  -webkit-box-shadow: 0 5px 6px -5px rgba(133,133,133,0.6);
  box-shadow: 0 5px 6px -5px rgba(133,133,133,0.6);
}
#page-header.not-top-img #nav a {
  color: var(--font-color);
  text-shadow: none;
}
#page-header.nav-fixed #nav {
  position: fixed;
  top: -60px;
  z-index: 91;
  background: rgba(255,255,255,0.8);
  -webkit-box-shadow: 0 5px 6px -5px rgba(133,133,133,0.6);
  box-shadow: 0 5px 6px -5px rgba(133,133,133,0.6);
  -webkit-transition: -webkit-transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
  -moz-transition: -moz-transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
  -o-transition: -o-transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
  -ms-transition: -ms-transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
  transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
}
#page-header.nav-fixed #nav a,
#page-header.nav-fixed #nav #site-name,
#page-header.nav-fixed #nav #toggle-menu {
  color: var(--font-color);
  text-shadow: none;
}
#page-header.nav-fixed #nav a:hover,
#page-header.nav-fixed #nav #site-name:hover,
#page-header.nav-fixed #nav #toggle-menu:hover {
  color: #49b1f5;
}
#page-header.nav-visible #nav {
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
  -webkit-transform: translate3d(0, 100%, 0);
  -moz-transform: translate3d(0, 100%, 0);
  -o-transform: translate3d(0, 100%, 0);
  -ms-transform: translate3d(0, 100%, 0);
  transform: translate3d(0, 100%, 0);
}
#page-header.nav-visible + .layout > .aside-content > .sticky_layout {
  top: 70px;
  -webkit-transition: top 0.5s;
  -moz-transition: top 0.5s;
  -o-transition: top 0.5s;
  -ms-transition: top 0.5s;
  transition: top 0.5s;
}
_::-webkit-full-page-media,
_:future,
:root #page-header.full_page {
  background-attachment: scroll !important;
}
#page h1.page-title {
  margin: 0.4rem 0 1rem;
}
#post > #post-info {
  margin-bottom: 1.5rem;
}
#post > #post-info .post-title {
  padding-bottom: 0.2rem;
  border-bottom: 1px solid var(--light-grey);
  color: var(--text-highlight-color);
}
#post > #post-info .post-title .post-edit-link {
  float: right;
}
#post > #post-info #post-meta,
#post > #post-info #post-meta a {
  color: #78818a;
}
#post-info .post-title {
  margin-bottom: 0.4rem;
  color: var(--white);
  font-weight: normal;
  font-size: 2.5em;
  line-height: 1.5;
  -webkit-line-clamp: 3;
}
@media screen and (max-width: 768px) {
  #post-info .post-title {
    font-size: 1.72em;
  }
}
#post-info .post-title .post-edit-link {
  padding-left: 0.5rem;
}
#post-info #post-meta {
  color: var(--light-grey);
  font-size: 95%;
}
@media screen and (min-width: 768px) {
  #post-info #post-meta > .meta-secondline > span:first-child {
    display: none;
  }
}
@media screen and (max-width: 768px) {
  #post-info #post-meta {
    font-size: 90%;
  }
  #post-info #post-meta > .meta-firstline,
  #post-info #post-meta > .meta-secondline {
    display: inline;
  }
}
#post-info #post-meta .post-meta-separator {
  margin: 0 0.25rem;
}
#post-info #post-meta .post-meta-icon {
  margin-right: 0.2rem;
}
#post-info #post-meta .post-meta-label {
  margin-right: 0.2rem;
}
#post-info #post-meta a {
  color: var(--light-grey);
  -webkit-transition: all 0.3s ease-out;
  -moz-transition: all 0.3s ease-out;
  -o-transition: all 0.3s ease-out;
  -ms-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
}
#post-info #post-meta a:hover {
  color: #49b1f5;
  text-decoration: underline;
}
#post-info #post-meta time {
  display: none;
}
#nav {
  position: absolute;
  top: 0;
  z-index: 90;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  padding: 0 36px;
  width: 100%;
  height: 60px;
  font-size: 1.3em;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
}
@media screen and (max-width: 768px) {
  #nav {
    padding: 0 16px;
  }
}
#nav.show {
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
#nav #blog_name {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -o-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}
#nav #toggle-menu {
  display: none;
  padding: 0.1rem 0 0 0.3rem;
  vertical-align: top;
}
#nav #toggle-menu:hover {
  color: var(--white);
}
#nav a {
  color: var(--light-grey);
}
#nav a:hover {
  color: var(--white);
}
#nav #site-name {
  text-shadow: 0.1rem 0.1rem 0.2rem rgba(0,0,0,0.15);
  font-weight: bold;
  cursor: pointer;
}
#nav .menus_items {
  display: inline;
}
#nav .menus_items .menus_item {
  position: relative;
  display: inline-block;
  padding: 0 0 0 0.7rem;
}
#nav .menus_items .menus_item:hover .menus_item_child {
  display: block;
}
#nav .menus_items .menus_item:hover i.expand {
  -webkit-transform: rotate(180deg) !important;
  -moz-transform: rotate(180deg) !important;
  -o-transform: rotate(180deg) !important;
  -ms-transform: rotate(180deg) !important;
  transform: rotate(180deg) !important;
}
#nav .menus_items .menus_item i.expand {
  padding: 4px;
  -webkit-transition: -webkit-transform 0.3s;
  -moz-transition: -moz-transform 0.3s;
  -o-transition: -o-transform 0.3s;
  -ms-transition: -ms-transform 0.3s;
  transition: transform 0.3s;
}
#nav .menus_items .menus_item .menus_item_child {
  position: absolute;
  right: 0;
  display: none;
  margin-top: 8px;
  padding: 0;
  width: max-content;
  background-color: var(--sidebar-bg);
  -webkit-box-shadow: 0 5px 20px -4px rgba(0,0,0,0.5);
  box-shadow: 0 5px 20px -4px rgba(0,0,0,0.5);
  -webkit-animation: sub_menus 0.3s 0.1s ease both;
  -moz-animation: sub_menus 0.3s 0.1s ease both;
  -o-animation: sub_menus 0.3s 0.1s ease both;
  -ms-animation: sub_menus 0.3s 0.1s ease both;
  animation: sub_menus 0.3s 0.1s ease both;
}
#nav .menus_items .menus_item .menus_item_child:before {
  position: absolute;
  top: -8px;
  left: 0;
  width: 100%;
  height: 20px;
  content: '';
}
#nav .menus_items .menus_item .menus_item_child li {
  list-style: none;
}
#nav .menus_items .menus_item .menus_item_child li:hover {
  background: var(--text-bg-hover);
}
#nav .menus_items .menus_item .menus_item_child li a {
  display: inline-block;
  padding: 0.3rem 0.7rem;
  width: 100%;
  color: var(--font-color) !important;
  text-shadow: none !important;
}
#nav.hide-menu #toggle-menu {
  display: inline-block !important;
}
#nav.hide-menu #toggle-menu .site-page {
  font-size: inherit;
}
#nav.hide-menu .menus_items {
  position: absolute;
  left: 0;
  visibility: hidden;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
}
#nav.hide-menu #search-button span {
  display: none !important;
}
#nav #search-button {
  display: inline;
  padding: 0 0 0 0.7rem;
}
#nav .site-page {
  position: relative;
  padding-bottom: 0.3rem;
  text-shadow: 0.05rem 0.05rem 0.1rem rgba(0,0,0,0.3);
  font-size: 0.78em;
  cursor: pointer;
}
#nav .site-page:not(.child):after {
  position: absolute;
  bottom: 0;
  left: 0;
  z-index: -1;
  width: 0;
  height: 3px;
  background-color: #80c8f8;
  content: '';
  -webkit-transition: all 0.3s ease-in-out;
  -moz-transition: all 0.3s ease-in-out;
  -o-transition: all 0.3s ease-in-out;
  -ms-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
#nav .site-page:not(.child):hover:after {
  width: 100%;
}
#pagination {
  overflow: hidden;
  margin-top: 1rem;
  width: 100%;
}
#pagination .pagination {
  text-align: center;
}
#pagination .page-number {
  display: inline-block;
  margin: 0 0.2rem;
  min-width: 1.2rem;
  height: 1.2rem;
  text-align: center;
  line-height: 1.2rem;
  cursor: pointer;
}
#pagination .page-number.current {
  background: #00c4b6;
  color: var(--white);
  cursor: default;
}
#pagination img.prev-cover,
#pagination img.next-cover {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0.4;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
  filter: alpha(opacity=40);
  -webkit-transition: all 0.6s;
  -moz-transition: all 0.6s;
  -o-transition: all 0.6s;
  -ms-transition: all 0.6s;
  transition: all 0.6s;
  object-fit: cover;
}
#pagination .pagination-info {
  position: absolute;
  top: 50%;
  padding: 1rem 2rem;
  width: 100%;
  -webkit-transform: translate(0, -50%);
  -moz-transform: translate(0, -50%);
  -o-transform: translate(0, -50%);
  -ms-transform: translate(0, -50%);
  transform: translate(0, -50%);
}
#pagination .prev_info,
#pagination .next_info {
  color: var(--white);
  font-weight: 500;
}
#pagination .next-post .pagination-info {
  text-align: right;
}
#pagination .pull-full {
  width: 100% !important;
}
#pagination .prev-post .label,
#pagination .next-post .label {
  color: var(--light-grey);
  text-transform: uppercase;
  font-size: 90%;
}
#pagination .prev-post,
#pagination .next-post {
  width: 50%;
}
@media screen and (max-width: 768px) {
  #pagination .prev-post,
  #pagination .next-post {
    width: 100%;
  }
}
#pagination .prev-post a,
#pagination .next-post a {
  position: relative;
  display: block;
  overflow: hidden;
  height: 150px;
}
#pagination .prev-post:hover img.prev-cover,
#pagination .next-post:hover img.prev-cover,
#pagination .prev-post:hover img.next-cover,
#pagination .next-post:hover img.next-cover {
  opacity: 0.8;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
  filter: alpha(opacity=80);
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
#pagination.pagination-post {
  margin-top: 2rem;
  background: #000;
}
#article-container {
  word-wrap: break-word;
  overflow-wrap: break-word;
}
#article-container a {
  color: #99a9bf;
}
#article-container a:hover {
  text-decoration: underline;
}
#article-container img {
  display: block;
  margin: 0 auto 0.8rem;
}
#article-container p {
  margin: 0 0 0.8rem;
}
#article-container iframe {
  margin: 0 0 1rem;
}
#article-container kbd {
  margin: 0 3px;
  padding: 3px 5px;
  border: 1px solid #b4b4b4;
  border-radius: 3px;
  background-color: #f8f8f8;
  -webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.25), 0 2px 1px 0 rgba(255,255,255,0.6) inset;
  box-shadow: 0 1px 3px rgba(0,0,0,0.25), 0 2px 1px 0 rgba(255,255,255,0.6) inset;
  color: #34495e;
  white-space: nowrap;
  font-weight: 600;
  font-size: 0.9em;
  font-family: Monaco, 'Ubuntu Mono', monospace;
  line-height: 1em;
}
#article-container ol,
#article-container ul {
  margin-top: 0.4rem;
}
#article-container ol p,
#article-container ul p {
  margin: 0 0 0.5rem;
}
#article-container ol ol,
#article-container ul ol,
#article-container ol ul,
#article-container ul ul {
  padding-left: 0.5rem;
}
#article-container ol li,
#article-container ul li {
  position: relative;
  margin: 0.3rem 0;
  padding-left: 0.3rem;
}
#article-container.post-content h1,
#article-container.post-content h2,
#article-container.post-content h3,
#article-container.post-content h4,
#article-container.post-content h5,
#article-container.post-content h6 {
  -webkit-transition: all 0.2s ease-out;
  -moz-transition: all 0.2s ease-out;
  -o-transition: all 0.2s ease-out;
  -ms-transition: all 0.2s ease-out;
  transition: all 0.2s ease-out;
}
#article-container.post-content h1:before,
#article-container.post-content h2:before,
#article-container.post-content h3:before,
#article-container.post-content h4:before,
#article-container.post-content h5:before,
#article-container.post-content h6:before {
  position: absolute;
  top: calc(50% - 0.35rem);
  color: #f47466;
  content: '\f0c1';
  line-height: 1;
  -webkit-transition: all 0.2s ease-out;
  -moz-transition: all 0.2s ease-out;
  -o-transition: all 0.2s ease-out;
  -ms-transition: all 0.2s ease-out;
  transition: all 0.2s ease-out;
}
#article-container.post-content h1:hover:before,
#article-container.post-content h2:hover:before,
#article-container.post-content h3:hover:before,
#article-container.post-content h4:hover:before,
#article-container.post-content h5:hover:before,
#article-container.post-content h6:hover:before {
  color: #49b1f5;
}
#article-container.post-content h1 {
  padding-left: 1.4rem;
}
#article-container.post-content h1 code {
  font-size: 1rem;
}
#article-container.post-content h1:before {
  margin-left: -1.2rem;
  font-size: 1rem;
}
#article-container.post-content h1:hover {
  padding-left: 1.6rem;
}
#article-container.post-content h2 {
  padding-left: 1.3rem;
}
#article-container.post-content h2 code {
  font-size: 0.9rem;
}
#article-container.post-content h2:before {
  margin-left: -1.1rem;
  font-size: 0.9rem;
}
#article-container.post-content h2:hover {
  padding-left: 1.5rem;
}
#article-container.post-content h3 {
  padding-left: 1.2rem;
}
#article-container.post-content h3 code {
  font-size: 0.8rem;
}
#article-container.post-content h3:before {
  margin-left: -1rem;
  font-size: 0.8rem;
}
#article-container.post-content h3:hover {
  padding-left: 1.4rem;
}
#article-container.post-content h4 {
  padding-left: 1.1rem;
}
#article-container.post-content h4 code {
  font-size: 0.7rem;
}
#article-container.post-content h4:before {
  margin-left: -0.9rem;
  font-size: 0.7rem;
}
#article-container.post-content h4:hover {
  padding-left: 1.3rem;
}
#article-container.post-content h5 {
  padding-left: 1rem;
}
#article-container.post-content h5 code {
  font-size: 0.6rem;
}
#article-container.post-content h5:before {
  margin-left: -0.8rem;
  font-size: 0.6rem;
}
#article-container.post-content h5:hover {
  padding-left: 1.2rem;
}
#article-container.post-content h6 {
  padding-left: 1rem;
}
#article-container.post-content h6 code {
  font-size: 0.6rem;
}
#article-container.post-content h6:before {
  margin-left: -0.8rem;
  font-size: 0.6rem;
}
#article-container.post-content h6:hover {
  padding-left: 1.2rem;
}
#article-container.post-content ol,
#article-container.post-content ul {
  margin-top: 0.4rem;
  padding: 0 0 0 0.8rem;
  list-style: none;
  counter-reset: li;
}
@media screen and (max-width: 768px) {
  #article-container.post-content ol,
  #article-container.post-content ul {
    padding: 0 0 0 0.4rem;
  }
}
#article-container.post-content ol p,
#article-container.post-content ul p {
  margin: 0 0 0.5rem;
}
#article-container.post-content ol ol,
#article-container.post-content ul ol,
#article-container.post-content ol ul,
#article-container.post-content ul ul {
  padding-left: 0.6rem;
}
@media screen and (max-width: 768px) {
  #article-container.post-content ol ol,
  #article-container.post-content ul ol,
  #article-container.post-content ol ul,
  #article-container.post-content ul ul {
    padding-left: 0.2rem;
  }
}
#article-container.post-content ol li:not(.tab),
#article-container.post-content ul li:not(.tab) {
  position: relative;
  margin: 0.2rem 0;
}
#article-container.post-content ol li:hover:before,
#article-container.post-content ul li:hover:before {
  -webkit-transform: rotate(360deg);
  -moz-transform: rotate(360deg);
  -o-transform: rotate(360deg);
  -ms-transform: rotate(360deg);
  transform: rotate(360deg);
}
#article-container.post-content ol li:before,
#article-container.post-content ul li:before {
  position: absolute;
  top: 0;
  left: 0;
  background: #49b1f5;
  color: #fff;
  cursor: pointer;
  -webkit-transition: all 0.3s ease-out;
  -moz-transition: all 0.3s ease-out;
  -o-transition: all 0.3s ease-out;
  -ms-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
}
#article-container.post-content ol > li:not(.tab) {
  padding: 0.2em 0.2em 0.2em 1.8em;
}
#article-container.post-content ol > li:before {
  margin-top: 0.65em;
  width: 1.45em;
  height: 1.45em;
  border-radius: 0.725em;
  content: counter(li);
  counter-increment: li;
  text-align: center;
  font-size: 0.85em;
  line-height: 1.45em;
}
#article-container.post-content ul > li:not(.tab) {
  padding: 0.2em 0.2em 0.2em 1.4em;
}
#article-container.post-content ul > li:not(.tab):hover:before {
  border-color: #ff7242;
}
#article-container.post-content ul > li:not(.tab):before {
  top: 0.78em;
  width: 0.42em;
  height: 0.42em;
  border: 0.21em solid #49b1f5;
  border-radius: 0.42em;
  background: transparent;
  content: '';
  line-height: 0.42em;
}
#post .tag_share .post-meta__tag-list {
  display: inline-block;
}
#post .tag_share .post-meta__tags {
  display: inline-block;
  margin: 0.4rem 0.4rem 0.4rem 0;
  padding: 0 0.6rem;
  width: fit-content;
  border: 1px solid #49b1f5;
  border-radius: 0.6rem;
  color: #49b1f5;
  font-size: 0.85em;
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}
#post .tag_share .post-meta__tags:hover {
  background: #49b1f5;
  color: var(--white);
}
#post .tag_share .post_share {
  display: inline-block;
  float: right;
  margin: 0.4rem 0;
  width: fit-content;
}
#post .tag_share .post_share .social-share {
  font-size: 0.85em;
}
#post .tag_share .post_share .social-share .social-share-icon {
  margin: 0 4px;
  width: 1.85em;
  height: 1.85em;
  font-size: 1.2em;
  line-height: 1.85em;
}
#post .post-copyright {
  position: relative;
  margin: 2rem 0 0.5rem;
  padding: 0.5rem 0.8rem;
  border: 1px solid var(--light-grey);
  -webkit-transition: box-shadow 0.3s ease-in-out;
  -moz-transition: box-shadow 0.3s ease-in-out;
  -o-transition: box-shadow 0.3s ease-in-out;
  -ms-transition: box-shadow 0.3s ease-in-out;
  transition: box-shadow 0.3s ease-in-out;
}
#post .post-copyright:before {
  position: absolute;
  top: 0.1rem;
  right: 0.6rem;
  color: #49b1f5;
  content: '\f1f9';
  font-size: 1rem;
}
#post .post-copyright:hover {
  -webkit-box-shadow: 0 0 8px 0 rgba(232,237,250,0.6), 0 2px 4px 0 rgba(232,237,250,0.5);
  box-shadow: 0 0 8px 0 rgba(232,237,250,0.6), 0 2px 4px 0 rgba(232,237,250,0.5);
}
#post .post-copyright .post-copyright-meta {
  color: #49b1f5;
  font-weight: bold;
}
#post .post-copyright .post-copyright-info {
  padding-left: 0.3rem;
}
#post .post-copyright .post-copyright-info a {
  text-decoration: underline;
  word-break: break-word;
}
#post .post-copyright .post-copyright-info a:hover {
  text-decoration: none;
}
#post .post-outdate-notice {
  position: relative;
  margin: 0 0 1rem;
  padding: 0.5em 1.2em;
  border-radius: 3px;
  background-color: #ffe6e6;
  color: #f66;
  padding: 0.5em 1em 0.5em 2.6em;
  border-left: 5px solid #ff8080;
}
#post .post-outdate-notice:before {
  position: absolute;
  top: 50%;
  left: 0.9em;
  color: #ff8080;
  content: '\f071';
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
#post .ads-wrap {
  margin: 2rem 0;
}
.relatedPosts {
  margin-top: 2rem;
}
.relatedPosts > .headline {
  margin-bottom: 5px;
  font-weight: 700;
  font-size: 1.43em;
}
.relatedPosts > .relatedPosts-list > div {
  position: relative;
  display: inline-block;
  overflow: hidden;
  margin: 3px;
  width: calc(33.333% - 6px);
  height: 200px;
  background: #000;
  vertical-align: bottom;
}
.relatedPosts > .relatedPosts-list > div:hover .cover {
  opacity: 0.8;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
  filter: alpha(opacity=80);
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
@media screen and (max-width: 768px) {
  .relatedPosts > .relatedPosts-list > div {
    margin: 2px;
    width: calc(50% - 4px);
    height: 150px;
  }
}
@media screen and (max-width: 600px) {
  .relatedPosts > .relatedPosts-list > div {
    width: calc(100% - 4px);
  }
}
.relatedPosts > .relatedPosts-list .cover {
  width: 100%;
  height: 100%;
  opacity: 0.4;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
  filter: alpha(opacity=40);
  -webkit-transition: all 0.6s;
  -moz-transition: all 0.6s;
  -o-transition: all 0.6s;
  -ms-transition: all 0.6s;
  transition: all 0.6s;
  object-fit: cover;
}
.relatedPosts > .relatedPosts-list .content {
  position: absolute;
  top: 50%;
  padding: 0 1rem;
  width: 100%;
  -webkit-transform: translate(0, -50%);
  -moz-transform: translate(0, -50%);
  -o-transform: translate(0, -50%);
  -ms-transform: translate(0, -50%);
  transform: translate(0, -50%);
}
.relatedPosts > .relatedPosts-list .content .date {
  color: var(--light-grey);
  font-size: 90%;
}
.relatedPosts > .relatedPosts-list .content .title {
  color: var(--white);
  -webkit-line-clamp: 2;
}
.post-reward {
  position: relative;
  margin-top: 4rem;
  width: 100%;
  text-align: center;
}
.post-reward .reward-button {
  display: inline-block;
  padding: 0.2rem 1.2rem;
  background: var(--btn-bg);
  color: var(--btn-color);
  cursor: pointer;
  -webkit-transition: all 0.4s;
  -moz-transition: all 0.4s;
  -o-transition: all 0.4s;
  -ms-transition: all 0.4s;
  transition: all 0.4s;
}
.post-reward:hover > .reward-main {
  display: block;
}
.post-reward .reward-main {
  position: absolute;
  bottom: 40px;
  left: 0;
  z-index: 100;
  display: none;
  padding: 0 0 15px;
  width: 100%;
}
.post-reward .reward-main .reward-all {
  display: inline-block;
  margin: 0;
  padding: 1rem 0.5rem;
  border-radius: 4px;
  background: var(--reward-pop);
}
.post-reward .reward-main .reward-all:before {
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100%;
  height: 20px;
  content: '';
}
.post-reward .reward-main .reward-all:after {
  position: absolute;
  right: 0;
  bottom: 2px;
  left: 0;
  margin: 0 auto;
  width: 0;
  height: 0;
  border-top: 13px solid var(--reward-pop);
  border-right: 13px solid transparent;
  border-left: 13px solid transparent;
  content: '';
}
.post-reward .reward-main .reward-all .reward-item {
  display: inline-block;
  padding: 0 8px;
  list-style-type: none;
  vertical-align: top;
}
.post-reward .reward-main .reward-all .reward-item img {
  width: 130px;
  height: 130px;
}
.post-reward .reward-main .reward-all .reward-item .post-qr-code-desc {
  padding-top: 0.4rem;
  width: 130px;
  color: #858585;
}
#rightside {
  position: fixed;
  right: -38px;
  bottom: 40px;
  z-index: 100;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
}
#rightside #rightside-config-hide {
  -webkit-transition: -webkit-transform 0.4s;
  -moz-transition: -moz-transform 0.4s;
  -o-transition: -o-transform 0.4s;
  -ms-transition: -ms-transform 0.4s;
  transition: transform 0.4s;
  -webkit-transform: translate(35px, 0);
  -moz-transform: translate(35px, 0);
  -o-transform: translate(35px, 0);
  -ms-transform: translate(35px, 0);
  transform: translate(35px, 0);
}
#rightside #rightside-config-hide.show {
  -webkit-transform: translate(0, 0) !important;
  -moz-transform: translate(0, 0) !important;
  -o-transform: translate(0, 0) !important;
  -ms-transform: translate(0, 0) !important;
  transform: translate(0, 0) !important;
}
#rightside > div > button,
#rightside > div > a {
  display: block;
  margin-bottom: 2px;
  width: 30px;
  height: 30px;
  background-color: var(--btn-bg);
  color: var(--btn-color);
  text-align: center;
  font-size: 16px;
}
#rightside > div > button:hover,
#rightside > div > a:hover {
  background-color: var(--btn-hover-color);
}
#rightside #mobile-toc-button {
  display: none;
}
@media screen and (max-width: 900px) {
  #rightside #mobile-toc-button {
    display: block;
  }
}
@media screen and (max-width: 900px) {
  #rightside #hide-aside-btn {
    display: none;
  }
}
#sidebar #menu-mask {
  position: fixed;
  z-index: 102;
  display: none;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.8);
}
#sidebar #sidebar-menus {
  position: fixed;
  top: 0;
  right: -300px;
  z-index: 103;
  overflow-x: hidden;
  overflow-y: auto;
  width: 300px;
  height: 100%;
  background: var(--sidebar-bg);
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
}
#sidebar #sidebar-menus.open {
  -webkit-transform: translate3d(-100%, 0, 0);
  -moz-transform: translate3d(-100%, 0, 0);
  -o-transform: translate3d(-100%, 0, 0);
  -ms-transform: translate3d(-100%, 0, 0);
  transform: translate3d(-100%, 0, 0);
}
#sidebar #sidebar-menus > .author-avatar {
  padding: 1.3rem 1.5rem 0;
  text-align: center;
}
#sidebar #sidebar-menus > .author-avatar img {
  width: 110px;
  height: 110px;
  border-radius: 70px;
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  -o-transition: all 0.5s;
  -ms-transition: all 0.5s;
  transition: all 0.5s;
}
#sidebar #sidebar-menus > .author-avatar img:hover {
  -webkit-transform: rotate(360deg);
  -moz-transform: rotate(360deg);
  -o-transform: rotate(360deg);
  -ms-transform: rotate(360deg);
  transform: rotate(360deg);
}
#sidebar #sidebar-menus .site-data {
  display: table;
  padding: 0.6rem 0.5rem 0;
  width: 100%;
  table-layout: fixed;
}
#sidebar #sidebar-menus .site-data .data-item {
  display: table-cell;
}
#sidebar #sidebar-menus .site-data .data-item .data-item-link .length-num {
  color: var(--text-highlight-color);
  font-size: 1.28em;
}
#sidebar #sidebar-menus .site-data .data-item .data-item-link .headline {
  color: var(--font-color);
}
#sidebar #sidebar-menus hr {
  margin: 1rem auto;
}
#sidebar #sidebar-menus .menus_items {
  padding: 0 0.5rem 2rem;
}
#sidebar #sidebar-menus .menus_items .site-page {
  position: relative;
  display: block;
  padding: 0.3rem 1.5rem;
  color: var(--font-color);
  font-size: 1.15em;
  cursor: pointer;
}
#sidebar #sidebar-menus .menus_items .site-page i:first-child {
  width: 25%;
  text-align: left;
}
#sidebar #sidebar-menus .menus_items .site-page span {
  width: 75%;
}
#sidebar #sidebar-menus .menus_items .site-page span:hover {
  color: #49b1f5;
}
#sidebar #sidebar-menus .menus_items .expand {
  position: absolute;
  top: 0.78em;
  right: 0.4rem;
  -webkit-transition: -webkit-transform 0.3s;
  -moz-transition: -moz-transform 0.3s;
  -o-transition: -o-transform 0.3s;
  -ms-transition: -ms-transform 0.3s;
  transition: transform 0.3s;
}
#sidebar #sidebar-menus .menus_items .expand.hide {
  -webkit-transform: rotate(90deg) !important;
  -moz-transform: rotate(90deg) !important;
  -o-transform: rotate(90deg) !important;
  -ms-transform: rotate(90deg) !important;
  transform: rotate(90deg) !important;
}
#sidebar #sidebar-menus .menus_items .menus_item_child {
  margin: 0;
  list-style: none;
}
#vcomment,
#waline {
  font-size: 1.1em;
}
#vcomment .vbtn,
#waline .vbtn {
  border: none;
  background: var(--btn-bg);
  color: var(--btn-color);
}
#vcomment .vbtn:hover,
#waline .vbtn:hover {
  background: var(--btn-hover-color);
}
#vcomment .vimg,
#waline .vimg {
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
#vcomment .vimg:hover,
#waline .vimg:hover {
  -webkit-transform: rotate(360deg);
  -moz-transform: rotate(360deg);
  -o-transform: rotate(360deg);
  -ms-transform: rotate(360deg);
  transform: rotate(360deg);
}
#vcomment .vcards .vcard .vcontent.expand:before,
#waline .vcards .vcard .vcontent.expand:before,
#vcomment .vcards .vcard .vcontent.expand:after,
#waline .vcards .vcard .vcontent.expand:after {
  z-index: 22;
}
.fireworks {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 9999;
  pointer-events: none;
}
.medium-zoom-image--opened {
  z-index: 99999 !important;
  margin: 0 !important;
}
.medium-zoom-overlay {
  z-index: 99999 !important;
}
.mermaid {
  overflow: auto;
  margin: 0 0 1rem;
  background: #fff;
  text-align: center;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
.mermaid[data-processed] {
  opacity: 1;
  -ms-filter: none;
  filter: none;
}
.utterances,
.fb-comments iframe {
  width: 100% !important;
}
#gitalk-container .gt-meta {
  margin: 0 0 0.8em;
  padding: 0.3rem 0 0.8em;
}
.katex-wrap {
  overflow: auto;
}
.katex-wrap::-webkit-scrollbar {
  display: none;
}
.mathjax-overflow {
  overflow-x: auto;
  overflow-y: hidden;
}
mjx-container[jax='CHTML'][display='true'] {
  overflow-x: auto;
  overflow-y: hidden;
  padding-bottom: 0.3rem;
}
.aplayer {
  color: #4c4948;
}
#article-container .aplayer {
  margin: 0 0 1rem;
}
#article-container .aplayer ol,
#article-container .aplayer ul {
  margin: 0;
  padding: 0;
}
#article-container .aplayer ol li,
#article-container .aplayer ul li {
  margin: 0;
  padding: 0 15px;
}
#article-container .aplayer ol li:before,
#article-container .aplayer ul li:before {
  content: none;
}
#article-container .btn-center {
  margin: 0 0 1rem;
  text-align: center;
}
#article-container .btn-beautify {
  display: inline-block;
  margin: 0 0.2rem 0.3rem;
  padding: 0 1rem;
  background-color: #777;
  color: #fff;
  line-height: 2;
}
#article-container .btn-beautify i + span {
  margin-left: 0.3rem;
}
#article-container .btn-beautify:not(.block) + .btn-beautify:not(.block) {
  margin: 0 0.2rem 1rem;
}
#article-container .btn-beautify.block {
  display: block;
  margin: 0 0 1rem;
  width: fit-content;
  width: -moz-fit-content;
}
#article-container .btn-beautify.block.center {
  margin: 0 auto 1rem;
}
#article-container .btn-beautify.block.right {
  margin: 0 0 1rem auto;
}
#article-container .btn-beautify.larger {
  padding: 0.3rem 1.3rem;
}
#article-container .btn-beautify:hover {
  text-decoration: none;
}
#article-container .btn-beautify.blue {
  background-color: #428bca;
}
#article-container .btn-beautify.pink {
  background-color: #ff69b4;
}
#article-container .btn-beautify.red {
  background-color: #f00;
}
#article-container .btn-beautify.purple {
  background-color: #6f42c1;
}
#article-container .btn-beautify.orange {
  background-color: #ff8c00;
}
#article-container .btn-beautify.green {
  background-color: #5cb85c;
}
#article-container .btn-beautify.outline {
  border: 1px solid transparent;
  border-color: #777;
  background-color: transparent;
  color: #777;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
#article-container .btn-beautify.outline.button--animated:before {
  background: #777;
}
#article-container .btn-beautify.outline:hover {
  color: #fff !important;
}
#article-container .btn-beautify.outline.blue {
  border-color: #428bca;
  color: #428bca;
}
#article-container .btn-beautify.outline.blue.button--animated:before {
  background: #428bca;
}
#article-container .btn-beautify.outline.pink {
  border-color: #ff69b4;
  color: #ff69b4;
}
#article-container .btn-beautify.outline.pink.button--animated:before {
  background: #ff69b4;
}
#article-container .btn-beautify.outline.red {
  border-color: #f00;
  color: #f00;
}
#article-container .btn-beautify.outline.red.button--animated:before {
  background: #f00;
}
#article-container .btn-beautify.outline.purple {
  border-color: #6f42c1;
  color: #6f42c1;
}
#article-container .btn-beautify.outline.purple.button--animated:before {
  background: #6f42c1;
}
#article-container .btn-beautify.outline.orange {
  border-color: #ff8c00;
  color: #ff8c00;
}
#article-container .btn-beautify.outline.orange.button--animated:before {
  background: #ff8c00;
}
#article-container .btn-beautify.outline.green {
  border-color: #5cb85c;
  color: #5cb85c;
}
#article-container .btn-beautify.outline.green.button--animated:before {
  background: #5cb85c;
}
figure.gallery-group {
  position: relative;
  float: left;
  overflow: hidden;
  margin: 0.3rem 0.2rem;
  width: calc(50% - 0.4rem);
  height: 250px;
  border-radius: 8px;
  background: #000;
  -webkit-transform: translate3d(0, 0, 0);
}
@media screen and (max-width: 600px) {
  figure.gallery-group {
    width: calc(100% - 0.4rem);
  }
}
figure.gallery-group:hover img {
  opacity: 0.4;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
  filter: alpha(opacity=40);
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}
figure.gallery-group:hover .gallery-group-name::after {
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}
figure.gallery-group:hover p {
  opacity: 1;
  -ms-filter: none;
  filter: none;
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}
figure.gallery-group img {
  position: relative;
  margin: 0 !important;
  max-width: none;
  width: calc(100% + 20px);
  height: 250px;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  backface-visibility: hidden;
  opacity: 0.8;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
  filter: alpha(opacity=80);
  -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
  -moz-transition: opacity 0.35s, -moz-transform 0.35s;
  -o-transition: opacity 0.35s, -o-transform 0.35s;
  -ms-transition: opacity 0.35s, -ms-transform 0.35s;
  transition: opacity 0.35s, transform 0.35s;
  -webkit-transform: translate3d(-10px, 0, 0);
  -moz-transform: translate3d(-10px, 0, 0);
  -o-transform: translate3d(-10px, 0, 0);
  -ms-transform: translate3d(-10px, 0, 0);
  transform: translate3d(-10px, 0, 0);
  object-fit: cover;
}
figure.gallery-group figcaption {
  position: absolute;
  top: 0;
  left: 0;
  padding: 1.5rem;
  width: 100%;
  height: 100%;
  color: #fff;
  text-transform: uppercase;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  backface-visibility: hidden;
}
figure.gallery-group figcaption > a {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
}
figure.gallery-group p {
  margin: 0;
  padding: 0.4rem 0 0;
  letter-spacing: 1px;
  font-size: 1.1em;
  line-height: 1.5;
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  -webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
  -moz-transition: opacity 0.35s, -moz-transform 0.35s;
  -o-transition: opacity 0.35s, -o-transform 0.35s;
  -ms-transition: opacity 0.35s, -ms-transform 0.35s;
  transition: opacity 0.35s, transform 0.35s;
  -webkit-transform: translate3d(100%, 0, 0);
  -moz-transform: translate3d(100%, 0, 0);
  -o-transform: translate3d(100%, 0, 0);
  -ms-transform: translate3d(100%, 0, 0);
  transform: translate3d(100%, 0, 0);
  -webkit-line-clamp: 4;
}
figure.gallery-group .gallery-group-name {
  position: relative;
  margin: 0;
  padding: 0.4rem 0;
  font-weight: bold;
  font-size: 1.65em;
  line-height: 1.5;
  -webkit-line-clamp: 2;
}
figure.gallery-group .gallery-group-name:after {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  background: #fff;
  content: '';
  -webkit-transition: -webkit-transform 0.35s;
  -moz-transition: -moz-transform 0.35s;
  -o-transition: -o-transform 0.35s;
  -ms-transition: -ms-transform 0.35s;
  transition: transform 0.35s;
  -webkit-transform: translate3d(-100%, 0, 0);
  -moz-transform: translate3d(-100%, 0, 0);
  -o-transform: translate3d(-100%, 0, 0);
  -ms-transform: translate3d(-100%, 0, 0);
  transform: translate3d(-100%, 0, 0);
}
.gallery-group-main {
  overflow: auto;
  padding: 0 0 0.8rem;
}
.justified-gallery {
  margin: 0 0 0.8rem;
}
.justified-gallery img {
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
}
.justified-gallery .img-alt {
  display: none;
}
.justified-gallery .fancybox {
  width: auto;
  text-align: inherit;
}
blockquote.pullquote {
  position: relative;
  max-width: 45%;
  font-size: 110%;
}
blockquote.pullquote.left {
  float: left;
  margin: 1em 0.5em 0 0;
}
blockquote.pullquote.right {
  float: right;
  margin: 1em 0 0 0.5rem;
}
.video-container {
  position: relative;
  overflow: hidden;
  margin-bottom: 0.8rem;
  padding-top: 56.25%;
  height: 0;
}
.video-container iframe {
  position: absolute;
  top: 0;
  left: 0;
  margin-top: 0;
  width: 100%;
  height: 100%;
}
.hide-inline > .hide-button,
.hide-block > .hide-button {
  display: inline-block;
  padding: 0.3rem 1rem;
  background: #49b1f5;
  color: var(--white);
}
.hide-inline > .hide-button.open,
.hide-block > .hide-button.open {
  display: none;
}
.hide-inline > .hide-button.open + div,
.hide-block > .hide-button.open + div {
  display: block;
}
.hide-inline > .hide-button.open + span,
.hide-block > .hide-button.open + span {
  display: inline;
}
.hide-inline > .hide-content,
.hide-block > .hide-content {
  display: none;
}
.hide-inline > .hide-button {
  margin: 0 0.3rem;
}
.hide-inline > .hide-content {
  margin: 0 0.3rem;
}
.hide-block {
  margin: 0 0 0.8rem;
}
.hide-toggle {
  margin-bottom: 1rem;
  border: 1px solid #f0f0f0;
}
.hide-toggle > .hide-button {
  padding: 0.3rem 0.5rem;
  background: #f0f0f0;
  color: #1f2d3d;
  cursor: pointer;
}
.hide-toggle > .hide-button > i {
  font-size: 1.2em;
  -webkit-transition: all 0.3s;
  -moz-transition: all 0.3s;
  -o-transition: all 0.3s;
  -ms-transition: all 0.3s;
  transition: all 0.3s;
}
.hide-toggle > .hide-button.open i {
  -webkit-transform: rotate(90deg);
  -moz-transform: rotate(90deg);
  -o-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}
.hide-toggle > .hide-button.open + div {
  display: block;
}
.hide-toggle > .hide-content {
  display: none;
  margin: 1.5rem 1.2rem;
}
#article-container .inline-img {
  display: inline;
  margin: 0 3px;
  height: 1.1em;
  vertical-align: text-bottom;
}
.hl-label {
  padding: 2px 4px;
  border-radius: 3px;
  color: #fff;
}
.hl-label.default {
  background-color: #777;
}
.hl-label.blue {
  background-color: #428bca;
}
.hl-label.pink {
  background-color: #ff69b4;
}
.hl-label.red {
  background-color: #f00;
}
.hl-label.purple {
  background-color: #6f42c1;
}
.hl-label.orange {
  background-color: #ff8c00;
}
.hl-label.green {
  background-color: #5cb85c;
}
.note {
  position: relative;
  margin: 0 0 1rem;
  padding: 15px;
  border-radius: 3px;
}
.note.icon {
  padding-left: 2.25rem;
}
.note > .note-icon {
  position: absolute;
  top: calc(50% - 0.4rem);
  left: 0.7rem;
  font-size: larger;
}
.note.blue:not(.disabled) {
  border-left-color: #428bca !important;
}
.note.blue:not(.disabled).modern {
  border-left-color: transparent !important;
  color: #428bca;
}
.note.blue:not(.disabled):not(.simple) {
  background: #e3eef7 !important;
}
.note.blue > .note-icon {
  color: #428bca;
}
.note.pink:not(.disabled) {
  border-left-color: #ff69b4 !important;
}
.note.pink:not(.disabled).modern {
  border-left-color: transparent !important;
  color: #ff69b4;
}
.note.pink:not(.disabled):not(.simple) {
  background: #ffe9f4 !important;
}
.note.pink > .note-icon {
  color: #ff69b4;
}
.note.red:not(.disabled) {
  border-left-color: #f00 !important;
}
.note.red:not(.disabled).modern {
  border-left-color: transparent !important;
  color: #f00;
}
.note.red:not(.disabled):not(.simple) {
  background: #ffd9d9 !important;
}
.note.red > .note-icon {
  color: #f00;
}
.note.purple:not(.disabled) {
  border-left-color: #6f42c1 !important;
}
.note.purple:not(.disabled).modern {
  border-left-color: transparent !important;
  color: #6f42c1;
}
.note.purple:not(.disabled):not(.simple) {
  background: #e9e3f6 !important;
}
.note.purple > .note-icon {
  color: #6f42c1;
}
.note.orange:not(.disabled) {
  border-left-color: #ff8c00 !important;
}
.note.orange:not(.disabled).modern {
  border-left-color: transparent !important;
  color: #ff8c00;
}
.note.orange:not(.disabled):not(.simple) {
  background: #ffeed9 !important;
}
.note.orange > .note-icon {
  color: #ff8c00;
}
.note.green:not(.disabled) {
  border-left-color: #5cb85c !important;
}
.note.green:not(.disabled).modern {
  border-left-color: transparent !important;
  color: #5cb85c;
}
.note.green:not(.disabled):not(.simple) {
  background: #e7f4e7 !important;
}
.note.green > .note-icon {
  color: #5cb85c;
}
.note.simple {
  border: 1px solid #eee;
  border-left-width: 5px;
}
.note.modern {
  border: 1px solid transparent !important;
  background-color: #f5f5f5;
  color: #4c4948;
}
.note.flat {
  border: initial;
  border-left: 5px solid #eee;
  background-color: #f9f9f9;
  color: #4c4948;
}
.note h2,
.note h3,
.note h4,
.note h5,
.note h6 {
  margin-top: 3px;
  margin-bottom: 0;
  padding-top: 0 !important;
  border-bottom: initial;
}
.note p:first-child,
.note ul:first-child,
.note ol:first-child,
.note table:first-child,
.note pre:first-child,
.note blockquote:first-child,
.note img:first-child {
  margin-top: 0 !important;
}
.note p:last-child,
.note ul:last-child,
.note ol:last-child,
.note table:last-child,
.note pre:last-child,
.note blockquote:last-child,
.note img:last-child {
  margin-bottom: 0 !important;
}
.note:not(.no-icon) {
  padding-left: 2.25rem;
}
.note:not(.no-icon)::before {
  position: absolute;
  top: calc(50% - 0.8rem);
  left: 0.7rem;
  font-size: larger;
}
.note.default.flat {
  background: #f7f7f7;
}
.note.default.modern {
  border-color: #e1e1e1;
  background: #f3f3f3;
  color: #666;
}
.note.default.modern a:not(.btn) {
  color: #666;
}
.note.default.modern a:not(.btn):hover {
  color: #454545;
}
.note.default:not(.modern) {
  border-left-color: #777;
}
.note.default:not(.modern) h2,
.note.default:not(.modern) h3,
.note.default:not(.modern) h4,
.note.default:not(.modern) h5,
.note.default:not(.modern) h6 {
  color: #777;
}
.note.default:not(.no-icon)::before {
  content: '\f0a9';
}
.note.default:not(.no-icon):not(.modern)::before {
  color: #777;
}
.note.primary.flat {
  background: #f5f0fa;
}
.note.primary.modern {
  border-color: #e1c2ff;
  background: #f3daff;
  color: #6f42c1;
}
.note.primary.modern a:not(.btn) {
  color: #6f42c1;
}
.note.primary.modern a:not(.btn):hover {
  color: #453298;
}
.note.primary:not(.modern) {
  border-left-color: #6f42c1;
}
.note.primary:not(.modern) h2,
.note.primary:not(.modern) h3,
.note.primary:not(.modern) h4,
.note.primary:not(.modern) h5,
.note.primary:not(.modern) h6 {
  color: #6f42c1;
}
.note.primary:not(.no-icon)::before {
  content: '\f055';
}
.note.primary:not(.no-icon):not(.modern)::before {
  color: #6f42c1;
}
.note.info.flat {
  background: #eef7fa;
}
.note.info.modern {
  border-color: #b3e5ef;
  background: #d9edf7;
  color: #31708f;
}
.note.info.modern a:not(.btn) {
  color: #31708f;
}
.note.info.modern a:not(.btn):hover {
  color: #215761;
}
.note.info:not(.modern) {
  border-left-color: #428bca;
}
.note.info:not(.modern) h2,
.note.info:not(.modern) h3,
.note.info:not(.modern) h4,
.note.info:not(.modern) h5,
.note.info:not(.modern) h6 {
  color: #428bca;
}
.note.info:not(.no-icon)::before {
  content: '\f05a';
}
.note.info:not(.no-icon):not(.modern)::before {
  color: #428bca;
}
.note.success.flat {
  background: #eff8f0;
}
.note.success.modern {
  border-color: #d0e6be;
  background: #dff0d8;
  color: #3c763d;
}
.note.success.modern a:not(.btn) {
  color: #3c763d;
}
.note.success.modern a:not(.btn):hover {
  color: #32562c;
}
.note.success:not(.modern) {
  border-left-color: #5cb85c;
}
.note.success:not(.modern) h2,
.note.success:not(.modern) h3,
.note.success:not(.modern) h4,
.note.success:not(.modern) h5,
.note.success:not(.modern) h6 {
  color: #5cb85c;
}
.note.success:not(.no-icon)::before {
  content: '\f058';
}
.note.success:not(.no-icon):not(.modern)::before {
  color: #5cb85c;
}
.note.warning.flat {
  background: #fdf8ea;
}
.note.warning.modern {
  border-color: #fae4cd;
  background: #fcf4e3;
  color: #8a6d3b;
}
.note.warning.modern a:not(.btn) {
  color: #8a6d3b;
}
.note.warning.modern a:not(.btn):hover {
  color: #714f30;
}
.note.warning:not(.modern) {
  border-left-color: #f0ad4e;
}
.note.warning:not(.modern) h2,
.note.warning:not(.modern) h3,
.note.warning:not(.modern) h4,
.note.warning:not(.modern) h5,
.note.warning:not(.modern) h6 {
  color: #f0ad4e;
}
.note.warning:not(.no-icon)::before {
  content: '\f06a';
}
.note.warning:not(.no-icon):not(.modern)::before {
  color: #f0ad4e;
}
.note.danger.flat {
  background: #fcf1f2;
}
.note.danger.modern {
  border-color: #ebcdd2;
  background: #f2dfdf;
  color: #a94442;
}
.note.danger.modern a:not(.btn) {
  color: #a94442;
}
.note.danger.modern a:not(.btn):hover {
  color: #84333f;
}
.note.danger:not(.modern) {
  border-left-color: #d9534f;
}
.note.danger:not(.modern) h2,
.note.danger:not(.modern) h3,
.note.danger:not(.modern) h4,
.note.danger:not(.modern) h5,
.note.danger:not(.modern) h6 {
  color: #d9534f;
}
.note.danger:not(.no-icon)::before {
  content: '\f056';
}
.note.danger:not(.no-icon):not(.modern)::before {
  color: #d9534f;
}
#article-container .tabs {
  position: relative;
  margin: 0 0 1rem;
  border-right: 1px solid var(--tab-border-color);
  border-bottom: 1px solid var(--tab-border-color);
  border-left: 1px solid var(--tab-border-color);
}
#article-container .tabs > .nav-tabs {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;
  background: var(--tab-botton-bg);
}
#article-container .tabs > .nav-tabs > .tab {
  margin: 0;
  padding: 0;
  list-style: none;
}
@media screen and (max-width: 768px) {
  #article-container .tabs > .nav-tabs > .tab {
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    -o-box-flex: 1;
    -ms-box-flex: 1;
    box-flex: 1;
    -webkit-flex-grow: 1;
    flex-grow: 1;
  }
}
#article-container .tabs > .nav-tabs > .tab button {
  display: block;
  padding: 0.5rem 1rem;
  width: 100%;
  border-top: 2px solid var(--tab-border-color);
  background: var(--tab-botton-bg);
  color: var(--tab-botton-color);
  line-height: 2;
  -webkit-transition: all 0.4s;
  -moz-transition: all 0.4s;
  -o-transition: all 0.4s;
  -ms-transition: all 0.4s;
  transition: all 0.4s;
}
#article-container .tabs > .nav-tabs > .tab button i {
  width: 1.5em;
}
#article-container .tabs > .nav-tabs > .tab.active button {
  border-top: 2px solid #49b1f5;
  background: var(--tab-button-active-bg);
  cursor: default;
}
#article-container .tabs > .nav-tabs > .tab:not(.active) button:hover {
  border-top: 2px solid var(--tab-button-hover-bg);
  background: var(--tab-button-hover-bg);
}
#article-container .tabs > .tab-contents .tab-item-content {
  position: relative;
  display: none;
  padding: 1.8rem 1.2rem;
}
@media screen and (max-width: 768px) {
  #article-container .tabs > .tab-contents .tab-item-content {
    padding: 1.2rem 0.7rem;
  }
}
#article-container .tabs > .tab-contents .tab-item-content.active {
  display: block;
  -webkit-animation: tabshow 0.5s;
  -moz-animation: tabshow 0.5s;
  -o-animation: tabshow 0.5s;
  -ms-animation: tabshow 0.5s;
  animation: tabshow 0.5s;
}
#article-container .tabs .tab-to-top {
  position: relative;
  display: block;
  margin: 0 0 0 auto;
  color: #99a9bf;
}
@-moz-keyframes tabshow {
  0% {
    -webkit-transform: translateY(15px);
    -moz-transform: translateY(15px);
    -o-transform: translateY(15px);
    -ms-transform: translateY(15px);
    transform: translateY(15px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-webkit-keyframes tabshow {
  0% {
    -webkit-transform: translateY(15px);
    -moz-transform: translateY(15px);
    -o-transform: translateY(15px);
    -ms-transform: translateY(15px);
    transform: translateY(15px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@-o-keyframes tabshow {
  0% {
    -webkit-transform: translateY(15px);
    -moz-transform: translateY(15px);
    -o-transform: translateY(15px);
    -ms-transform: translateY(15px);
    transform: translateY(15px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
@keyframes tabshow {
  0% {
    -webkit-transform: translateY(15px);
    -moz-transform: translateY(15px);
    -o-transform: translateY(15px);
    -ms-transform: translateY(15px);
    transform: translateY(15px);
  }
  100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -o-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }
}
[data-theme='dark'] {
  --global-bg: #0d0d0d;
  --font-color: rgba(255,255,255,0.7);
  --hr-border: rgba(255,255,255,0.4);
  --hr-before-color: rgba(255,255,255,0.7);
  --search-bg: #121212;
  --search-input-color: rgba(255,255,255,0.7);
  --search-result-title: rgba(255,255,255,0.9);
  --preloader-bg: #0d0d0d;
  --preloader-color: rgba(255,255,255,0.7);
  --tab-border-color: #2c2c2c;
  --tab-botton-bg: #2c2c2c;
  --tab-botton-color: rgba(255,255,255,0.7);
  --tab-button-hover-bg: #383838;
  --tab-button-active-bg: #121212;
  --card-bg: #121212;
  --sidebar-bg: #121212;
  --btn-hover-color: #787878;
  --btn-color: rgba(255,255,255,0.7);
  --btn-bg: #1f1f1f;
  --text-bg-hover: #383838;
  --light-grey: rgba(255,255,255,0.7);
  --white: rgba(255,255,255,0.9);
  --text-highlight-color: rgba(255,255,255,0.9);
  --blockquote-color: rgba(255,255,255,0.7);
  --blockquote-bg: #2c2c2c;
  --reward-pop: #2c2c2c;
  --toc-link-color: rgba(255,255,255,0.6);
  --hl-color: rgba(255,255,255,0.7);
  --hl-bg: #171717;
  --hltools-bg: #1a1a1a;
  --hltools-color: #90a4ae;
  --hlnumber-bg: #171717;
  --hlnumber-color: rgba(255,255,255,0.4);
  --hlscrollbar-bg: #1f1f1f;
  --hlexpand-bg: linear-gradient(180deg, rgba(23,23,23,0.6), rgba(23,23,23,0.9));
}
[data-theme='dark'] #web_bg:before,
[data-theme='dark'] #footer:before,
[data-theme='dark'] #page-header:before {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.7);
  content: '';
}
[data-theme='dark'] #article-container code {
  background: #2c2c2c;
}
[data-theme='dark'] #article-container pre > code {
  background: #171717;
}
[data-theme='dark'] #article-container figure.highlight {
  -webkit-box-shadow: none;
  box-shadow: none;
}
[data-theme='dark'] #article-container .note code {
  background: rgba(27,31,35,0.05);
}
[data-theme='dark'] #article-container .aplayer {
  filter: brightness(0.8);
}
[data-theme='dark'] #article-container kbd {
  border-color: #696969;
  background-color: #525252;
  color: #e2f1ff;
}
[data-theme='dark'] #page-header.nav-fixed > #nav,
[data-theme='dark'] #page-header.not-top-img > #nav {
  background: rgba(18,18,18,0.8);
  -webkit-box-shadow: 0 5px 6px -5px rgba(133,133,133,0);
  box-shadow: 0 5px 6px -5px rgba(133,133,133,0);
}
[data-theme='dark'] #post-comment #comment-switch {
  background: #2c2c2c !important;
}
[data-theme='dark'] #post-comment #comment-switch .switch-btn {
  filter: brightness(0.8);
}
[data-theme='dark'] .note {
  filter: brightness(0.8);
}
[data-theme='dark'] .hide-button,
[data-theme='dark'] .btn-beautify,
[data-theme='dark'] .mermaid,
[data-theme='dark'] .hl-label,
[data-theme='dark'] .post-outdate-notice,
[data-theme='dark'] .error-img,
[data-theme='dark'] #article-container iframe,
[data-theme='dark'] .gist,
[data-theme='dark'] .ads-wrap {
  filter: brightness(0.8);
}
[data-theme='dark'] img {
  filter: brightness(0.8);
}
[data-theme='dark'] #aside-content .aside-list > .aside-list-item:not(:last-child) {
  border-bottom: 1px dashed rgba(255,255,255,0.1);
}
[data-theme='dark'] #gitalk-container {
  filter: brightness(0.8);
}
[data-theme='dark'] #gitalk-container svg {
  fill: rgba(255,255,255,0.9) !important;
}
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-tab-active,
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-no-comment {
  color: rgba(255,255,255,0.7);
}
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-order-label {
  background-color: #1f1f1f;
}
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-post-body {
  color: rgba(255,255,255,0.7);
}
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-post-body code,
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-post-body pre {
  background: #2c2c2c;
}
[data-theme='dark'] #disqus_thread #dsqjs .dsqjs-post-body blockquote {
  color: rgba(255,255,255,0.7);
}
[data-theme='dark'] #artitalk_main #lazy {
  background: #121212;
}
[data-theme='dark'] #operare_artitalk .c2 {
  background: #121212;
}
.read-mode {
  --font-color: #4c4948;
  --readmode-light-color: #fff;
  --white: #4c4948;
  --light-grey: #4c4948;
  --gray: #d6dbdf;
  --hr-border: #d6dbdf;
  --hr-before-color: #b9c2c9;
  --highlight-bg: #f7f7f7;
  --exit-btn-bg: #c0c0c0;
  --exit-btn-color: #fff;
  --exit-btn-hover: #8d8d8d;
}
[data-theme='dark'] .read-mode {
  --font-color: rgba(255,255,255,0.7);
  --readmode-light-color: #0d0d0d;
  --white: rgba(255,255,255,0.9);
  --light-grey: rgba(255,255,255,0.7);
  --gray: rgba(255,255,255,0.7);
  --hr-border: rgba(255,255,255,0.5);
  --hr-before-color: rgba(255,255,255,0.7);
  --highlight-bg: #171717;
  --exit-btn-bg: #1f1f1f;
  --exit-btn-color: rgba(255,255,255,0.9);
  --exit-btn-hover: #525252;
}
.read-mode {
  background: var(--readmode-light-color);
}
.read-mode .exit-readmode {
  position: fixed;
  top: 30px;
  right: 30px;
  width: 40px;
  height: 40px;
  border-radius: 8px;
  background: var(--exit-btn-bg);
  color: var(--exit-btn-color);
  font-size: 16px;
  -webkit-transition: background 0.3s;
  -moz-transition: background 0.3s;
  -o-transition: background 0.3s;
  -ms-transition: background 0.3s;
  transition: background 0.3s;
}
.read-mode .exit-readmode:hover {
  background: var(--exit-btn-hover);
}
.read-mode #aside-content {
  display: none;
}
.read-mode #page-header.post-bg {
  background-color: transparent;
  background-image: none !important;
}
.read-mode #page-header.post-bg:before {
  opacity: 0;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
}
.read-mode #page-header.post-bg > #post-info {
  text-align: center;
}
.read-mode #post {
  margin: 0 auto;
  background: transparent;
  -webkit-box-shadow: none;
  box-shadow: none;
}
.read-mode #post:hover {
  -webkit-box-shadow: none;
  box-shadow: none;
}
.read-mode > canvas {
  display: none !important;
}
.read-mode .highlight-tools,
.read-mode #footer,
.read-mode #post > *:not(#post-info):not(.post-content),
.read-mode #nav,
.read-mode .post-outdate-notice,
.read-mode #web_bg,
.read-mode #rightside,
.read-mode .not-top-img {
  display: none !important;
}
.read-mode #article-container a {
  color: #99a9bf;
}
.read-mode #article-container pre,
.read-mode #article-container .highlight:not(.js-file-line-container) {
  background: var(--highlight-bg) !important;
}
.read-mode #article-container pre *,
.read-mode #article-container .highlight:not(.js-file-line-container) * {
  color: var(--font-color) !important;
}
.read-mode #article-container figure.highlight {
  border-radius: 0 !important;
  -webkit-box-shadow: none !important;
  box-shadow: none !important;
}
.read-mode #article-container figure.highlight > :not(.highlight-tools) {
  display: block !important;
}
.read-mode #article-container figure.highlight .line:before {
  color: var(--font-color) !important;
}
.read-mode #article-container figure.highlight .hljs {
  background: var(-highlight-bg) !important;
}
.read-mode #article-container h1,
.read-mode #article-container h2,
.read-mode #article-container h3,
.read-mode #article-container h4,
.read-mode #article-container h5,
.read-mode #article-container h6 {
  padding: 0;
}
.read-mode #article-container h1:before,
.read-mode #article-container h2:before,
.read-mode #article-container h3:before,
.read-mode #article-container h4:before,
.read-mode #article-container h5:before,
.read-mode #article-container h6:before {
  content: '';
}
.read-mode #article-container h1:hover,
.read-mode #article-container h2:hover,
.read-mode #article-container h3:hover,
.read-mode #article-container h4:hover,
.read-mode #article-container h5:hover,
.read-mode #article-container h6:hover {
  padding: 0;
}
.read-mode #article-container ul:hover:before,
.read-mode #article-container li:hover:before,
.read-mode #article-container ol:hover:before {
  -webkit-transform: none !important;
  -moz-transform: none !important;
  -o-transform: none !important;
  -ms-transform: none !important;
  transform: none !important;
}
.read-mode #article-container ol:before,
.read-mode #article-container li:before {
  background: transparent !important;
  color: var(--font-color) !important;
}
.read-mode #article-container ul >li:before {
  border: 0.15rem solid var(--gray) !important;
}
.read-mode #article-container .tabs {
  border: 2px solid var(--tab-border-color);
}
.read-mode #article-container .tabs > .nav-tabs {
  background: transparent;
}
.read-mode #article-container .tabs > .nav-tabs > .tab {
  border-bottom: 0;
}
.read-mode #article-container .tabs > .nav-tabs > .tab button {
  border-top: none !important;
  background: transparent;
}
.read-mode #article-container .tabs > .nav-tabs > .tab button:hover {
  background: none !important;
}
.read-mode #article-container .tabs > .nav-tabs > .tab.active button {
  text-decoration: underline;
}
.read-mode #article-container .tabs > .tab-contents .tab-item-content.active {
  -webkit-animation: none;
  -moz-animation: none;
  -o-animation: none;
  -ms-animation: none;
  animation: none;
}
.read-mode #article-container code {
  color: var(--font-color);
}
.read-mode #article-container blockquote {
  border-left: 0.2rem solid var(--gray);
  background-color: var(--readmode-light-color);
}
.read-mode #article-container kbd {
  border: 1px solid var(--gray);
  background-color: transparent;
  -webkit-box-shadow: none;
  box-shadow: none;
  color: var(--font-color);
}
.read-mode #article-container .hide-toggle {
  border: 1px solid var(--gray) !important;
}
.read-mode #article-container .hide-button,
.read-mode #article-container .btn-beautify,
.read-mode #article-container .hl-label {
  border: 1px solid var(--gray) !important;
  background: var(--readmode-light-color) !important;
  color: var(--font-color) !important;
}
.read-mode #article-container .button--animated:before {
  background: var(--readmode-light-color) !important;
}
.read-mode #article-container .note {
  border: 2px solid var(--gray);
  border-left-color: var(--gray) !important;
  filter: none;
  background-color: var(--readmode-light-color) !important;
  color: var(--font-color);
}
.read-mode #article-container .note:before,
.read-mode #article-container .note .note-icon {
  color: var(--font-color);
}
.search-dialog {
  position: fixed;
  top: 5rem;
  left: 50%;
  z-index: 1001;
  display: none;
  margin-left: -15rem;
  padding: 1rem;
  width: 30rem;
  background: var(--search-bg);
}
@media screen and (max-width: 768px) {
  .search-dialog {
    top: 0;
    left: 0;
    margin: 0;
    width: 100%;
    height: 100%;
  }
}
.search-dialog hr {
  margin: 1rem auto;
}
.search-dialog span.search-close-button {
  position: absolute;
  top: 0.8rem;
  right: 1rem;
  color: #858585;
  font-size: 1.4em;
  line-height: 1;
  cursor: pointer;
  -webkit-transition: color 0.2s ease-in-out;
  -moz-transition: color 0.2s ease-in-out;
  -o-transition: color 0.2s ease-in-out;
  -ms-transition: color 0.2s ease-in-out;
  transition: color 0.2s ease-in-out;
}
.search-dialog span.search-close-button:hover {
  color: #49b1f5;
}
.search-dialog__title {
  padding: 0 0 0.7rem;
  color: #49b1f5;
  font-size: 1.4em;
  line-height: 1;
}
#search-mask {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  display: none;
  background: rgba(0,0,0,0.6);
}
#local-search .search-dialog {
  -webkit-animation: titlescale 0.5s;
  -moz-animation: titlescale 0.5s;
  -o-animation: titlescale 0.5s;
  -ms-animation: titlescale 0.5s;
  animation: titlescale 0.5s;
}
#local-search .search-dialog .local-search-box {
  margin: 0 auto;
  max-width: 100%;
  width: 100%;
}
#local-search .search-dialog .local-search-box input {
  padding: 0.25rem 0.7rem;
  width: 100%;
  outline: none;
  border: 2px solid #49b1f5;
  border-radius: 2rem;
  background: var(--search-bg);
  color: var(--search-input-color);
  -webkit-appearance: none;
}
#local-search .search-dialog .local-search__hit-item {
  position: relative;
  padding-left: 1.2rem;
  line-height: 1.7;
}
#local-search .search-dialog .local-search__hit-item:hover:before {
  border-color: #ff7242;
}
#local-search .search-dialog .local-search__hit-item:before {
  position: absolute;
  top: 0.45em;
  left: 0;
  width: 0.5em;
  height: 0.5em;
  border: 0.15rem solid #49b1f5;
  border-radius: 0.5em;
  background: transparent;
  content: '';
  line-height: 0.5em;
  -webkit-transition: all 0.2s ease-in-out;
  -moz-transition: all 0.2s ease-in-out;
  -o-transition: all 0.2s ease-in-out;
  -ms-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}
#local-search .search-dialog .local-search__hit-item a {
  display: block;
  color: var(--search-result-title);
  font-weight: 600;
  cursor: pointer;
}
#local-search .search-dialog .local-search__hit-item a:hover {
  color: #49b1f5;
}
#local-search .search-dialog .local-search__hit-item .search-result {
  margin: 0 0 0.4rem;
  word-break: break-all;
}
#local-search .search-dialog .local-search__hit-item .search-keyword {
  color: #f47466;
  font-weight: bold;
}
#local-search .search-dialog .search-result-list {
  overflow-y: auto;
  max-height: 10.5rem;
}
@media screen and (max-width: 768px) {
  #local-search .search-dialog .search-result-list {
    padding-bottom: 2rem;
    max-height: 75vh !important;
  }
}
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/utils.js</url>
    <content><![CDATA[const btf = {
  debounce: function (func, wait, immediate) {
    let timeout
    return function () {
      const context = this
      const args = arguments
      const later = function () {
        timeout = null
        if (!immediate) func.apply(context, args)
      }
      const callNow = immediate && !timeout
      clearTimeout(timeout)
      timeout = setTimeout(later, wait)
      if (callNow) func.apply(context, args)
    }
  },

  throttle: function (func, wait, options) {
    let timeout, context, args
    let previous = 0
    if (!options) options = {}

    const later = function () {
      previous = options.leading === false ? 0 : new Date().getTime()
      timeout = null
      func.apply(context, args)
      if (!timeout) context = args = null
    }

    const throttled = function () {
      const now = new Date().getTime()
      if (!previous && options.leading === false) previous = now
      const remaining = wait - (now - previous)
      context = this
      args = arguments
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout)
          timeout = null
        }
        previous = now
        func.apply(context, args)
        if (!timeout) context = args = null
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining)
      }
    }

    return throttled
  },

  sidebarPaddingR: () => {
    const innerWidth = window.innerWidth
    const clientWidth = document.body.clientWidth
    const paddingRight = innerWidth - clientWidth
    if (innerWidth !== clientWidth) {
      document.body.style.paddingRight = paddingRight + 'px'
    }
  },

  snackbarShow: (text, showAction, duration) => {
    const sa = (typeof showAction !== 'undefined') ? showAction : false
    const dur = (typeof duration !== 'undefined') ? duration : 2000
    const position = GLOBAL_CONFIG.Snackbar.position
    const bg = document.documentElement.getAttribute('data-theme') === 'light' ? GLOBAL_CONFIG.Snackbar.bgLight : GLOBAL_CONFIG.Snackbar.bgDark
    Snackbar.show({
      text: text,
      backgroundColor: bg,
      showAction: sa,
      duration: dur,
      pos: position
    })
  },

  initJustifiedGallery: function (selector) {
    if (!(selector instanceof jQuery)) {
      selector = $(selector)
    }
    selector.each(function (i, o) {
      if ($(this).is(':visible')) {
        $(this).justifiedGallery({
          rowHeight: 220,
          margins: 4
        })
      }
    })
  },

  diffDate: (d, more = false) => {
    const dateNow = new Date()
    const datePost = new Date(d)
    const dateDiff = dateNow.getTime() - datePost.getTime()
    const minute = 1000 * 60
    const hour = minute * 60
    const day = hour * 24
    const month = day * 30

    let result
    if (more) {
      const monthCount = dateDiff / month
      const dayCount = dateDiff / day
      const hourCount = dateDiff / hour
      const minuteCount = dateDiff / minute

      if (monthCount > 12) {
        result = datePost.toLocaleDateString().replace(/\//g, '-')
      } else if (monthCount >= 1) {
        result = parseInt(monthCount) + ' ' + GLOBAL_CONFIG.date_suffix.month
      } else if (dayCount >= 1) {
        result = parseInt(dayCount) + ' ' + GLOBAL_CONFIG.date_suffix.day
      } else if (hourCount >= 1) {
        result = parseInt(hourCount) + ' ' + GLOBAL_CONFIG.date_suffix.hour
      } else if (minuteCount >= 1) {
        result = parseInt(minuteCount) + ' ' + GLOBAL_CONFIG.date_suffix.min
      } else {
        result = GLOBAL_CONFIG.date_suffix.just
      }
    } else {
      result = parseInt(dateDiff / day)
    }
    return result
  },

  loadComment: (dom, callback) => {
    if ('IntersectionObserver' in window) {
      const observerItem = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          callback()
          observerItem.disconnect()
        }
      }, { threshold: [0] })
      observerItem.observe(dom)
    } else {
      callback()
    }
  },

  scrollToDest: (pos, time) => {
    if (pos < 0 || time < 0) {
      return
    }

    const currentPos = window.scrollY || window.screenTop
    if (currentPos > pos) pos = pos - 70

    if ('CSS' in window && CSS.supports('scroll-behavior', 'smooth')) {
      window.scrollTo({
        top: pos,
        behavior: 'smooth'
      })
      return
    }

    let start = null
    time = time || 500
    window.requestAnimationFrame(function step (currentTime) {
      start = !start ? currentTime : start
      if (currentPos < pos) {
        const progress = currentTime - start
        window.scrollTo(0, ((pos - currentPos) * progress / time) + currentPos)
        if (progress < time) {
          window.requestAnimationFrame(step)
        } else {
          window.scrollTo(0, pos)
        }
      } else {
        const progress = currentTime - start
        window.scrollTo(0, currentPos - ((currentPos - pos) * progress / time))
        if (progress < time) {
          window.requestAnimationFrame(step)
        } else {
          window.scrollTo(0, pos)
        }
      }
    })
  },

  fadeIn: (ele, time) => {
    ele.style.cssText = `display:block;animation: to_show ${time}s`
  },

  fadeOut: (ele, time) => {
    ele.addEventListener('animationend', function f () {
      ele.style.cssText = "display: none; animation: '' "
      ele.removeEventListener('animationend', f)
    })
    ele.style.animation = `to_hide ${time}s`
  },

  getParents: (elem, selector) => {
    for (; elem && elem !== document; elem = elem.parentNode) {
      if (elem.matches(selector)) return elem
    }
    return null
  },

  siblings: (ele, selector) => {
    return [...ele.parentNode.children].filter((child) => {
      if (selector) {
        return child !== ele && child.matches(selector)
      }
      return child !== ele
    })
  },

  /**
   *
   * @param {*} selector
   * @param {*} eleType the type of create element
   * @param {*} id id
   * @param {*} cn class name
   */
  wrap: function (selector, eleType, id = '', cn = '') {
    const creatEle = document.createElement(eleType)
    if (id) creatEle.id = id
    if (cn) creatEle.className = cn
    selector.parentNode.insertBefore(creatEle, selector)
    creatEle.appendChild(selector)
  },

  unwrap: function (el) {
    const elParentNode = el.parentNode
    if (elParentNode !== document.body) {
      elParentNode.parentNode.insertBefore(el, elParentNode)
      elParentNode.parentNode.removeChild(elParentNode)
    }
  },

  isJqueryLoad: (fn) => {
    if (typeof jQuery === 'undefined') {
      getScript(GLOBAL_CONFIG.source.jQuery).then(fn)
    } else {
      fn()
    }
  },

  isHidden: (ele) => ele.offsetHeight === 0 && ele.offsetWidth === 0,

  getEleTop: (ele) => {
    let actualTop = ele.offsetTop
    let current = ele.offsetParent

    while (current !== null) {
      actualTop += current.offsetTop
      current = current.offsetParent
    }

    return actualTop
  }

}
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/var.css</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/tw_cn.js</url>
    <content><![CDATA[/* eslint-disable no-undef */
document.addEventListener('DOMContentLoaded', function () {
  const translate = GLOBAL_CONFIG.translate
  const snackbarData = GLOBAL_CONFIG.Snackbar
  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文
  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0
  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字
  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改
  let currentEncoding = defaultEncoding
  const targetEncodingCookie = 'translate-chn-cht'
  let targetEncoding =
  saveToLocal.get(targetEncodingCookie) === undefined
    ? defaultEncoding
    : Number(saveToLocal.get('translate-chn-cht'))
  let translateButtonObject
  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined

  function translateText (txt) {
    if (txt === '' || txt == null) return ''
    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)
    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt
  }
  function translateBody (fobj) {
    let objs
    if (typeof fobj === 'object') objs = fobj.childNodes
    else objs = document.body.childNodes
    for (let i = 0; i < objs.length; i++) {
      const obj = objs.item(i)
      if (
        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||
      obj === translateButtonObject
      ) { continue }
      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }
      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)
      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)
      if (
        obj.tagName === 'INPUT' &&
      obj.value !== '' &&
      obj.type !== 'text' &&
      obj.type !== 'hidden'
      ) { obj.value = translateText(obj.value) }
      if (obj.nodeType === 3) obj.data = translateText(obj.data)
      else translateBody(obj)
    }
  }
  function translatePage () {
    if (targetEncoding === 1) {
      currentEncoding = 1
      targetEncoding = 2
      translateButtonObject.innerHTML = msgToTraditionalChinese
      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)
      translateBody()
      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)
    } else if (targetEncoding === 2) {
      currentEncoding = 2
      targetEncoding = 1
      translateButtonObject.innerHTML = msgToSimplifiedChinese
      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)
      translateBody()
      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)
    }
  }
  function JTPYStr () {
    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'
  }
  function FTPYStr () {
    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'
  }
  function Traditionalized (cc) {
    let str = ''
    const ss = JTPYStr()
    const tt = FTPYStr()
    for (let i = 0; i < cc.length; i++) {
      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)
    }
    return str
  }
  function Simplized (cc) {
    let str = ''
    const ss = JTPYStr()
    const tt = FTPYStr()
    for (let i = 0; i < cc.length; i++) {
      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)
    }
    return str
  }
  function translateInitialization () {
    translateButtonObject = document.getElementById('translateLink')
    if (translateButtonObject) {
      if (currentEncoding !== targetEncoding) {
        setTimeout(translateBody, translateDelay)
        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese
        else translateButtonObject.innerHTML = msgToTraditionalChinese
      }
      translateButtonObject.addEventListener('click', translatePage, false)
    }
  }
  translateInitialization()
  document.addEventListener('pjax:complete', translateInitialization)
})
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/main.js</url>
    <content><![CDATA[document.addEventListener('DOMContentLoaded', function () {
  const $blogName = document.getElementById('site-name')
  let blogNameWidth = $blogName && $blogName.offsetWidth
  const $menusEle = document.querySelector('#menus .menus_items')
  let menusWidth = $menusEle && $menusEle.offsetWidth
  const $searchEle = document.querySelector('#search-button')
  let searchWidth = $searchEle && $searchEle.offsetWidth

  const adjustMenu = (change = false) => {
    if (change) {
      blogNameWidth = $blogName && $blogName.offsetWidth
      menusWidth = $menusEle && $menusEle.offsetWidth
      searchWidth = $searchEle && $searchEle.offsetWidth
    }
    const $nav = document.getElementById('nav')
    let t
    if (window.innerWidth < 768) t = true
    else t = blogNameWidth + menusWidth + searchWidth > $nav.offsetWidth - 120

    if (t) {
      $nav.classList.add('hide-menu')
    } else {
      $nav.classList.remove('hide-menu')
    }
  }

  // 初始化header
  const initAdjust = () => {
    adjustMenu()
    document.getElementById('nav').classList.add('show')
  }

  // sidebar menus
  const sidebarFn = () => {
    const $toggleMenu = document.getElementById('toggle-menu')
    const $mobileSidebarMenus = document.getElementById('sidebar-menus')
    const $menuMask = document.getElementById('menu-mask')
    const $body = document.body

    function openMobileSidebar () {
      btf.sidebarPaddingR()
      $body.style.overflow = 'hidden'
      btf.fadeIn($menuMask, 0.5)
      $mobileSidebarMenus.classList.add('open')
    }

    function closeMobileSidebar () {
      $body.style.overflow = ''
      $body.style.paddingRight = ''
      btf.fadeOut($menuMask, 0.5)
      $mobileSidebarMenus.classList.remove('open')
    }

    $toggleMenu.addEventListener('click', openMobileSidebar)

    $menuMask.addEventListener('click', e => {
      if ($mobileSidebarMenus.classList.contains('open')) {
        closeMobileSidebar()
      }
    })

    window.addEventListener('resize', e => {
      if (btf.isHidden($toggleMenu)) {
        if ($mobileSidebarMenus.classList.contains('open')) closeMobileSidebar()
      }
    })
  }

  /**
 * 首頁top_img底下的箭頭
 */
  const scrollDownInIndex = () => {
    const $scrollDownEle = document.getElementById('scroll-down')
    $scrollDownEle && $scrollDownEle.addEventListener('click', function () {
      btf.scrollToDest(document.getElementById('content-inner').offsetTop, 300)
    })
  }

  /**
 * 代碼
 * 只適用於Hexo默認的代碼渲染
 */
  const addHighlightTool = function () {
    const highLight = GLOBAL_CONFIG.highlight
    if (!highLight) return

    const isHighlightCopy = highLight.highlightCopy
    const isHighlightLang = highLight.highlightLang
    const isHighlightShrink = GLOBAL_CONFIG_SITE.isHighlightShrink
    const highlightHeightLimit = highLight.highlightHeightLimit
    const isShowTool = isHighlightCopy || isHighlightLang || isHighlightShrink !== undefined
    const $figureHighlight = highLight.plugin === 'highlighjs' ? document.querySelectorAll('figure.highlight') : document.querySelectorAll('pre[class*="language-"]')

    if (!((isShowTool || highlightHeightLimit) && $figureHighlight.length)) return

    const isPrismjs = highLight.plugin === 'prismjs'

    let highlightShrinkEle = ''
    let highlightCopyEle = ''
    const highlightShrinkClass = isHighlightShrink === true ? 'closed' : ''

    if (isHighlightShrink !== undefined) {
      highlightShrinkEle = `<i class="fas fa-angle-down expand ${highlightShrinkClass}"></i>`
    }

    if (isHighlightCopy) {
      highlightCopyEle = '<div class="copy-notice"></div><i class="fas fa-paste copy-button"></i>'
    }

    const copy = (text, ctx) => {
      if (document.queryCommandSupported && document.queryCommandSupported('copy')) {
        document.execCommand('copy')
        if (GLOBAL_CONFIG.Snackbar !== undefined) {
          btf.snackbarShow(GLOBAL_CONFIG.copy.success)
        } else {
          const prevEle = ctx.previousElementSibling
          prevEle.innerText = GLOBAL_CONFIG.copy.success
          prevEle.style.opacity = 1
          setTimeout(() => { prevEle.style.opacity = 0 }, 700)
        }
      } else {
        if (GLOBAL_CONFIG.Snackbar !== undefined) {
          btf.snackbarShow(GLOBAL_CONFIG.copy.noSupport)
        } else {
          ctx.previousElementSibling.innerText = GLOBAL_CONFIG.copy.noSupport
        }
      }
    }

    // click events
    const highlightCopyFn = (ele) => {
      const $buttonParent = ele.parentNode
      $buttonParent.classList.add('copy-true')
      const selection = window.getSelection()
      const range = document.createRange()
      if (isPrismjs) range.selectNodeContents($buttonParent.querySelectorAll('pre code')[0])
      else range.selectNodeContents($buttonParent.querySelectorAll('table .code pre')[0])
      selection.removeAllRanges()
      selection.addRange(range)
      const text = selection.toString()
      copy(text, ele.lastChild)
      selection.removeAllRanges()
      $buttonParent.classList.remove('copy-true')
    }

    const highlightShrinkFn = (ele) => {
      const $nextEle = [...ele.parentNode.children].slice(1)
      ele.firstChild.classList.toggle('closed')
      if (btf.isHidden($nextEle[$nextEle.length - 1])) {
        $nextEle.forEach(e => { e.style.display = 'block' })
      } else {
        $nextEle.forEach(e => { e.style.display = 'none' })
      }
    }

    const highlightToolsFn = function (e) {
      const $target = e.target.classList
      if ($target.contains('expand')) highlightShrinkFn(this)
      else if ($target.contains('copy-button')) highlightCopyFn(this)
    }

    const expandCode = function () {
      this.classList.toggle('expand-done')
    }

    function createEle (lang, item, service) {
      const fragment = document.createDocumentFragment()

      if (isShowTool) {
        const hlTools = document.createElement('div')
        hlTools.className = `highlight-tools ${highlightShrinkClass}`
        hlTools.innerHTML = highlightShrinkEle + lang + highlightCopyEle
        hlTools.addEventListener('click', highlightToolsFn)
        fragment.appendChild(hlTools)
      }

      if (highlightHeightLimit && item.offsetHeight > highlightHeightLimit + 30) {
        const ele = document.createElement('div')
        ele.className = 'code-expand-btn'
        ele.innerHTML = '<i class="fas fa-angle-double-down"></i>'
        ele.addEventListener('click', expandCode)
        fragment.appendChild(ele)
      }

      if (service === 'hl') {
        item.insertBefore(fragment, item.firstChild)
      } else {
        item.parentNode.insertBefore(fragment, item)
      }
    }

    if (isHighlightLang) {
      if (isPrismjs) {
        $figureHighlight.forEach(function (item) {
          const langName = item.getAttribute('data-language') ? item.getAttribute('data-language') : 'Code'
          const highlightLangEle = `<div class="code-lang">${langName}</div>`
          btf.wrap(item, 'figure', '', 'highlight')
          createEle(highlightLangEle, item)
        })
      } else {
        $figureHighlight.forEach(function (item) {
          let langName = item.getAttribute('class').split(' ')[1]
          if (langName === 'plain' || langName === undefined) langName = 'Code'
          const highlightLangEle = `<div class="code-lang">${langName}</div>`
          createEle(highlightLangEle, item, 'hl')
        })
      }
    } else {
      if (isPrismjs) {
        $figureHighlight.forEach(function (item) {
          btf.wrap(item, 'figure', '', 'highlight')
          createEle('', item)
        })
      } else {
        $figureHighlight.forEach(function (item) {
          createEle('', item, 'hl')
        })
      }
    }
  }

  /**
 * PhotoFigcaption
 */
  function addPhotoFigcaption () {
    document.querySelectorAll('#article-container img').forEach(function (item) {
      const parentEle = item.parentNode
      if (!parentEle.parentNode.classList.contains('justified-gallery')) {
        const ele = document.createElement('div')
        ele.className = 'img-alt is-center'
        ele.textContent = item.getAttribute('alt')
        parentEle.insertBefore(ele, item.nextSibling)
      }
    })
  }

  /**
 * justified-gallery 圖庫排版
 * 需要 jQuery
 */

  let detectJgJsLoad = false
  const runJustifiedGallery = function (ele) {
    const $justifiedGallery = $(ele)
    const $imgList = $justifiedGallery.find('img')
    $imgList.unwrap()
    if ($imgList.length) {
      $imgList.each(function (i, o) {
        if ($(o).attr('data-lazy-src')) $(o).attr('src', $(o).attr('data-lazy-src'))
        $(o).wrap('<div></div>')
      })
    }

    if (detectJgJsLoad) btf.initJustifiedGallery($justifiedGallery)
    else {
      $('head').append(`<link rel="stylesheet" type="text/css" href="${GLOBAL_CONFIG.source.justifiedGallery.css}">`)
      $.getScript(`${GLOBAL_CONFIG.source.justifiedGallery.js}`, function () {
        btf.initJustifiedGallery($justifiedGallery)
      })
      detectJgJsLoad = true
    }
  }

  /**
 * fancybox和 mediumZoom
 */
  const addFancybox = function (ele) {
    const runFancybox = (ele) => {
      ele.each(function (i, o) {
        const $this = $(o)
        const lazyloadSrc = $this.attr('data-lazy-src') || $this.attr('src')
        const dataCaption = $this.attr('alt') || ''
        $this.wrap(`<a href="${lazyloadSrc}" data-fancybox="group" data-caption="${dataCaption}" class="fancybox"></a>`)
      })

      $().fancybox({
        selector: '[data-fancybox]',
        loop: true,
        transitionEffect: 'slide',
        protect: true,
        buttons: ['slideShow', 'fullScreen', 'thumbs', 'close'],
        hash: false
      })
    }

    if (typeof $.fancybox === 'undefined') {
      $('head').append(`<link rel="stylesheet" type="text/css" href="${GLOBAL_CONFIG.source.fancybox.css}">`)
      $.getScript(`${GLOBAL_CONFIG.source.fancybox.js}`, function () {
        runFancybox($(ele))
      })
    } else {
      runFancybox($(ele))
    }
  }

  const addMediumZoom = () => {
    const zoom = mediumZoom(document.querySelectorAll('#article-container :not(a)>img'))
    zoom.on('open', e => {
      const photoBg = document.documentElement.getAttribute('data-theme') === 'dark' ? '#121212' : '#fff'
      zoom.update({
        background: photoBg
      })
    })
  }

  const jqLoadAndRun = () => {
    const $fancyboxEle = GLOBAL_CONFIG.lightbox === 'fancybox'
      ? document.querySelectorAll('#article-container :not(a):not(.gallery-group) > img, #article-container > img')
      : []
    const fbLengthNoZero = $fancyboxEle.length > 0
    const $jgEle = document.querySelectorAll('#article-container .justified-gallery')
    const jgLengthNoZero = $jgEle.length > 0

    if (jgLengthNoZero || fbLengthNoZero) {
      btf.isJqueryLoad(() => {
        jgLengthNoZero && runJustifiedGallery($jgEle)
        fbLengthNoZero && addFancybox($fancyboxEle)
      })
    }
  }

  /**
 * 滾動處理
 */
  const scrollFn = function () {
    const $rightside = document.getElementById('rightside')
    const innerHeight = window.innerHeight + 56

    // 當滾動條小于 56 的時候
    if (document.body.scrollHeight <= innerHeight) {
      $rightside.style.cssText = 'opacity: 1; transform: translateX(-38px)'
      return
    }

    let initTop = 0
    let isChatShow = true
    const $header = document.getElementById('page-header')
    const isChatBtnHide = typeof chatBtnHide === 'function'
    const isChatBtnShow = typeof chatBtnShow === 'function'
    window.addEventListener('scroll', btf.throttle(function (e) {
      const currentTop = window.scrollY || document.documentElement.scrollTop
      const isDown = scrollDirection(currentTop)
      if (currentTop > 56) {
        if (isDown) {
          if ($header.classList.contains('nav-visible')) $header.classList.remove('nav-visible')
          if (isChatBtnShow && isChatShow === true) {
            chatBtnHide()
            isChatShow = false
          }
        } else {
          if (!$header.classList.contains('nav-visible')) $header.classList.add('nav-visible')
          if (isChatBtnHide && isChatShow === false) {
            chatBtnShow()
            isChatShow = true
          }
        }
        $header.classList.add('nav-fixed')
        if (window.getComputedStyle($rightside).getPropertyValue('opacity') === '0') {
          $rightside.style.cssText = 'opacity: 1; transform: translateX(-38px)'
        }
      } else {
        if (currentTop === 0) {
          $header.classList.remove('nav-fixed', 'nav-visible')
        }
        $rightside.style.cssText = "opacity: ''; transform: ''"
      }

      if (document.body.scrollHeight <= innerHeight) {
        $rightside.style.cssText = 'opacity: 1; transform: translateX(-38px)'
      }
    }, 200))

    // find the scroll direction
    function scrollDirection (currentTop) {
      const result = currentTop > initTop // true is down & false is up
      initTop = currentTop
      return result
    }
  }

  /**
 *  toc
 */
  const tocFn = function () {
    const $cardTocLayout = document.getElementById('card-toc')
    const $cardToc = $cardTocLayout.getElementsByClassName('toc-content')[0]
    const $tocLink = $cardToc.querySelectorAll('.toc-link')
    const $article = document.getElementById('article-container')

    // main of scroll
    window.tocScrollFn = function () {
      return btf.throttle(function () {
        const currentTop = window.scrollY || document.documentElement.scrollTop
        scrollPercent(currentTop)
        findHeadPosition(currentTop)
      }, 100)()
    }
    window.addEventListener('scroll', tocScrollFn)

    const scrollPercent = function (currentTop) {
      const docHeight = $article.clientHeight
      const winHeight = document.documentElement.clientHeight
      const headerHeight = $article.offsetTop
      const contentMath = (docHeight > winHeight) ? (docHeight - winHeight) : (document.documentElement.scrollHeight - winHeight)
      const scrollPercent = (currentTop - headerHeight) / (contentMath)
      const scrollPercentRounded = Math.round(scrollPercent * 100)
      const percentage = (scrollPercentRounded > 100) ? 100 : (scrollPercentRounded <= 0) ? 0 : scrollPercentRounded
      $cardToc.setAttribute('progress-percentage', percentage)
    }

    // anchor
    const isAnchor = GLOBAL_CONFIG.isanchor
    const updateAnchor = function (anchor) {
      if (window.history.replaceState && anchor !== window.location.hash) {
        if (!anchor) anchor = location.pathname
        const title = GLOBAL_CONFIG_SITE.title
        window.history.replaceState({
          url: location.href,
          title: title
        }, title, anchor)
      }
    }

    const mobileToc = {
      open: () => {
        $cardTocLayout.style.cssText = 'animation: toc-open .3s; opacity: 1; right: 45px'
      },

      close: () => {
        $cardTocLayout.style.animation = 'toc-close .2s'
        setTimeout(() => {
          $cardTocLayout.style.cssText = "opacity:''; animation: ''; right: ''"
        }, 100)
      }
    }

    document.getElementById('mobile-toc-button').addEventListener('click', () => {
      if (window.getComputedStyle($cardTocLayout).getPropertyValue('opacity') === '0') mobileToc.open()
      else mobileToc.close()
    })

    // toc元素點擊
    $cardToc.addEventListener('click', (e) => {
      e.preventDefault()
      const $target = e.target.classList.contains('toc-link')
        ? e.target
        : e.target.parentElement
      btf.scrollToDest(btf.getEleTop(document.getElementById(decodeURI($target.getAttribute('href')).replace('#', ''))), 300)
      if (window.innerWidth < 900) {
        mobileToc.close()
      }
    })

    const autoScrollToc = function (item) {
      const activePosition = item.getBoundingClientRect().top
      const sidebarScrollTop = $cardToc.scrollTop
      if (activePosition > (document.documentElement.clientHeight - 100)) {
        $cardToc.scrollTop = sidebarScrollTop + 150
      }
      if (activePosition < 100) {
        $cardToc.scrollTop = sidebarScrollTop - 150
      }
    }

    // find head position & add active class
    const list = $article.querySelectorAll('h1,h2,h3,h4,h5,h6')
    let detectItem = ''
    const findHeadPosition = function (top) {
      if ($tocLink.length === 0 || top === 0) {
        return false
      }

      let currentId = ''
      let currentIndex = ''

      list.forEach(function (ele, index) {
        if (top > btf.getEleTop(ele) - 80) {
          currentId = '#' + encodeURI(ele.getAttribute('id'))
          currentIndex = index
        }
      })

      if (detectItem === currentIndex) return

      if (isAnchor) updateAnchor(currentId)

      if (currentId === '') {
        $cardToc.querySelectorAll('.active').forEach(i => { i.classList.remove('active') })
        detectItem = currentIndex
        return
      }

      detectItem = currentIndex

      $cardToc.querySelectorAll('.active').forEach(item => { item.classList.remove('active') })
      const currentActive = $tocLink[currentIndex]
      currentActive.classList.add('active')

      setTimeout(() => {
        autoScrollToc(currentActive)
      }, 0)

      let parent = currentActive.parentNode

      for (; !parent.matches('.toc'); parent = parent.parentNode) {
        if (parent.matches('li')) parent.classList.add('active')
      }
    }
  }

  /**
 * Rightside
 */
  const rightSideFn = {
    switchReadMode: () => { // read-mode
      const $body = document.body
      $body.classList.add('read-mode')
      const newEle = document.createElement('button')
      newEle.type = 'button'
      newEle.className = 'fas fa-sign-out-alt exit-readmode'
      $body.appendChild(newEle)

      function clickFn () {
        $body.classList.remove('read-mode')
        newEle.remove()
        newEle.removeEventListener('click', clickFn)
      }

      newEle.addEventListener('click', clickFn)
    },
    switchDarkMode: () => { // Switch Between Light And Dark Mode
      const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'
      if (nowMode === 'light') {
        activateDarkMode()
        saveToLocal.set('theme', 'dark', 2)
        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)
      } else {
        activateLightMode()
        saveToLocal.set('theme', 'light', 2)
        GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)
      }
      // handle some cases
      typeof utterancesTheme === 'function' && utterancesTheme()
      typeof FB === 'object' && window.loadFBComment()
      window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200)
    },
    showOrHideBtn: () => { // rightside 點擊設置 按鈕 展開
      document.getElementById('rightside-config-hide').classList.toggle('show')
    },
    scrollToTop: () => { // Back to top
      btf.scrollToDest(0, 500)
    },
    hideAsideBtn: () => { // Hide aside
      const $htmlDom = document.documentElement.classList
      $htmlDom.contains('hide-aside')
        ? saveToLocal.set('aside-status', 'show', 2)
        : saveToLocal.set('aside-status', 'hide', 2)
      $htmlDom.toggle('hide-aside')
    },

    adjustFontSize: (plus) => {
      const fontSizeVal = parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('--global-font-size'))
      let newValue = ''
      if (plus) {
        if (fontSizeVal >= 20) return
        newValue = fontSizeVal + 1
        document.documentElement.style.setProperty('--global-font-size', newValue + 'px')
        !document.getElementById('nav').classList.contains('hide-menu') && adjustMenu(true)
      } else {
        if (fontSizeVal <= 10) return
        newValue = fontSizeVal - 1
        document.documentElement.style.setProperty('--global-font-size', newValue + 'px')
        document.getElementById('nav').classList.contains('hide-menu') && adjustMenu(true)
      }

      saveToLocal.set('global-font-size', newValue, 2)
      // document.getElementById('font-text').innerText = newValue
    }
  }

  document.getElementById('rightside').addEventListener('click', function (e) {
    const $target = e.target.id || e.target.parentNode.id
    switch ($target) {
      case 'go-up':
        rightSideFn.scrollToTop()
        break
      case 'rightside_config':
        rightSideFn.showOrHideBtn()
        break
      case 'readmode':
        rightSideFn.switchReadMode()
        break
      case 'darkmode':
        rightSideFn.switchDarkMode()
        break
      case 'hide-aside-btn':
        rightSideFn.hideAsideBtn()
        break
      case 'font-plus':
        rightSideFn.adjustFontSize(true)
        break
      case 'font-minus':
        rightSideFn.adjustFontSize()
        break
      default:
        break
    }
  })

  /**
 * menu
 * 側邊欄sub-menu 展開/收縮
 * 解決menus在觸摸屏下，滑動屏幕menus_item_child不消失的問題（手機hover的bug)
 */
  const clickFnOfSubMenu = function () {
    document.querySelectorAll('#sidebar-menus .expand').forEach(function (e) {
      e.addEventListener('click', function () {
        this.classList.toggle('hide')
        const $dom = this.parentNode.nextElementSibling
        if (btf.isHidden($dom)) {
          $dom.style.display = 'block'
        } else {
          $dom.style.display = 'none'
        }
      })
    })

    window.addEventListener('touchmove', function (e) {
      const $menusChild = document.querySelectorAll('#nav .menus_item_child')
      $menusChild.forEach(item => {
        if (!btf.isHidden(item)) item.style.display = 'none'
      })
    })
  }

  /**
 * 複製時加上版權信息
 */
  const addCopyright = () => {
    const copyright = GLOBAL_CONFIG.copyright
    document.body.oncopy = (e) => {
      e.preventDefault()
      let textFont; const copyFont = window.getSelection(0).toString()
      if (copyFont.length > copyright.limitCount) {
        textFont = copyFont + '\n' + '\n' + '\n' +
        copyright.languages.author + '\n' +
        copyright.languages.link + window.location.href + '\n' +
        copyright.languages.source + '\n' +
        copyright.languages.info
      } else {
        textFont = copyFont
      }
      if (e.clipboardData) {
        return e.clipboardData.setData('text', textFont)
      } else {
        return window.clipboardData.setData('text', textFont)
      }
    }
  }

  /**
 * 網頁運行時間
 */
  const addRuntime = () => {
    const $runtimeCount = document.getElementById('runtimeshow')
    if ($runtimeCount) {
      const publishDate = $runtimeCount.getAttribute('data-publishDate')
      $runtimeCount.innerText = btf.diffDate(publishDate) + ' ' + GLOBAL_CONFIG.runtime
    }
  }

  /**
 * 最後一次更新時間
 */
  const addLastPushDate = () => {
    const $lastPushDateItem = document.getElementById('last-push-date')
    if ($lastPushDateItem) {
      const lastPushDate = $lastPushDateItem.getAttribute('data-lastPushDate')
      $lastPushDateItem.innerText = btf.diffDate(lastPushDate, true)
    }
  }

  /**
 * table overflow
 */
  const addTableWrap = function () {
    const $table = document.querySelectorAll('#article-container :not(.highlight) > table, #article-container > table')
    if ($table.length) {
      $table.forEach(item => {
        btf.wrap(item, 'div', '', 'table-wrap')
      })
    }
  }

  /**
 * tag-hide
 */
  const clickFnOfTagHide = function () {
    const $hideInline = document.querySelectorAll('#article-container .hide-button')
    if ($hideInline.length) {
      $hideInline.forEach(function (item) {
        item.addEventListener('click', function (e) {
          const $this = this
          const $hideContent = $this.nextElementSibling
          $this.classList.toggle('open')
          if ($this.classList.contains('open')) {
            if ($hideContent.querySelectorAll('.justified-gallery').length > 0) {
              btf.initJustifiedGallery($hideContent.querySelectorAll('.justified-gallery'))
            }
          }
        })
      })
    }
  }

  const tabsFn = {
    clickFnOfTabs: function () {
      document.querySelectorAll('#article-container .tab > button').forEach(function (item) {
        item.addEventListener('click', function (e) {
          const $this = this
          const $tabItem = $this.parentNode

          if (!$tabItem.classList.contains('active')) {
            const $tabContent = $tabItem.parentNode.nextElementSibling
            const $siblings = btf.siblings($tabItem, '.active')[0]
            $siblings && $siblings.classList.remove('active')
            $tabItem.classList.add('active')
            const tabId = $this.getAttribute('data-href').replace('#', '')
            const childList = [...$tabContent.children]
            childList.forEach(item => {
              if (item.id === tabId) item.classList.add('active')
              else item.classList.remove('active')
            })
            const $isTabJustifiedGallery = $tabContent.querySelectorAll(`#${tabId} .justified-gallery`)
            if ($isTabJustifiedGallery.length > 0) {
              btf.initJustifiedGallery($isTabJustifiedGallery)
            }
          }
        })
      })
    },
    backToTop: () => {
      document.querySelectorAll('#article-container .tabs .tab-to-top').forEach(function (item) {
        item.addEventListener('click', function () {
          btf.scrollToDest(btf.getEleTop(btf.getParents(this, '.tabs')), 300)
        })
      })
    }
  }

  const toggleCardCategory = function () {
    const $cardCategory = document.querySelectorAll('#aside-cat-list .card-category-list-item.parent i')
    if ($cardCategory.length) {
      $cardCategory.forEach(function (item) {
        item.addEventListener('click', function (e) {
          e.preventDefault()
          const $this = this
          $this.classList.toggle('expand')
          const $parentEle = $this.parentNode.nextElementSibling
          if (btf.isHidden($parentEle)) {
            $parentEle.style.display = 'block'
          } else {
            $parentEle.style.display = 'none'
          }
        })
      })
    }
  }

  const switchComments = function () {
    let switchDone = false
    const $switchBtn = document.querySelector('#comment-switch > .switch-btn')
    $switchBtn && $switchBtn.addEventListener('click', function () {
      this.classList.toggle('move')
      document.querySelectorAll('#post-comment > .comment-wrap > div').forEach(function (item) {
        if (btf.isHidden(item)) {
          item.style.cssText = 'display: block;animation: tabshow .5s'
        } else {
          item.style.cssText = "display: none;animation: ''"
        }
      })

      if (!switchDone && typeof loadOtherComment === 'function') {
        switchDone = true
        loadOtherComment()
      }
    })
  }

  const addPostOutdateNotice = function () {
    const data = GLOBAL_CONFIG.noticeOutdate
    const diffDay = btf.diffDate(GLOBAL_CONFIG_SITE.postUpdate)
    if (diffDay >= data.limitDay) {
      const ele = document.createElement('div')
      ele.className = 'post-outdate-notice'
      ele.textContent = data.messagePrev + ' ' + diffDay + ' ' + data.messageNext
      const $targetEle = document.getElementById('article-container')
      if (data.position === 'top') {
        $targetEle.insertBefore(ele, $targetEle.firstChild)
      } else {
        $targetEle.appendChild(ele)
      }
    }
  }

  const lazyloadImg = () => {
    window.lazyLoadInstance = new LazyLoad({
      elements_selector: 'img',
      threshold: 0,
      data_src: 'lazy-src'
    })
  }

  const relativeDate = function (selector) {
    selector.forEach(item => {
      const $this = item
      const timeVal = $this.getAttribute('datetime')
      $this.innerText = btf.diffDate(timeVal, true)
      $this.style.display = 'inline'
    })
  }

  const unRefreshFn = function () {
    window.addEventListener('resize', adjustMenu)
    window.addEventListener('orientationchange', () => { setTimeout(adjustMenu(true), 100) })

    clickFnOfSubMenu()
    GLOBAL_CONFIG.islazyload && lazyloadImg()
    GLOBAL_CONFIG.copyright !== undefined && addCopyright()
  }

  window.refreshFn = function () {
    initAdjust()

    if (GLOBAL_CONFIG_SITE.isPost) {
      GLOBAL_CONFIG_SITE.isToc && tocFn()
      GLOBAL_CONFIG.noticeOutdate !== undefined && addPostOutdateNotice()
      GLOBAL_CONFIG.relativeDate.post && relativeDate(document.querySelectorAll('#post-meta time'))
    } else {
      GLOBAL_CONFIG.relativeDate.homepage && relativeDate(document.querySelectorAll('#recent-posts time'))
      GLOBAL_CONFIG.runtime && addRuntime()
      addLastPushDate()
      toggleCardCategory()
    }

    sidebarFn()
    GLOBAL_CONFIG_SITE.isHome && scrollDownInIndex()
    addHighlightTool()
    GLOBAL_CONFIG.isPhotoFigcaption && addPhotoFigcaption()
    jqLoadAndRun()
    GLOBAL_CONFIG.lightbox === 'mediumZoom' && addMediumZoom()
    scrollFn()
    addTableWrap()
    clickFnOfTagHide()
    tabsFn.clickFnOfTabs()
    tabsFn.backToTop()
    switchComments()
  }

  refreshFn()
  unRefreshFn()
})
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/search/algolia.js</url>
    <content><![CDATA[window.addEventListener('load', () => {
  const openSearch = () => {
    document.body.style.cssText = 'width: 100%;overflow: hidden'
    document.querySelector('#algolia-search .search-dialog').style.display = 'block'
    document.querySelector('#algolia-search .ais-search-box--input').focus()
    btf.fadeIn(document.getElementById('search-mask'), 0.5)
    // shortcut: ESC
    document.addEventListener('keydown', function f (event) {
      if (event.code === 'Escape') {
        closeSearch()
        document.removeEventListener('keydown', f)
      }
    })
  }

  const closeSearch = () => {
    document.body.style.cssText = "width: '';overflow: ''"
    const $searchDialog = document.querySelector('#algolia-search .search-dialog')
    $searchDialog.style.animation = 'search_close .5s'
    setTimeout(() => { $searchDialog.style.cssText = "display: none; animation: ''" }, 500)
    btf.fadeOut(document.getElementById('search-mask'), 0.5)
  }

  const searchClickFn = () => {
    document.querySelector('#search-button > .search').addEventListener('click', openSearch)
    document.getElementById('search-mask').addEventListener('click', closeSearch)
    document.querySelector('#algolia-search .search-close-button').addEventListener('click', closeSearch)
  }

  searchClickFn()

  window.addEventListener('pjax:complete', function () {
    getComputedStyle(document.querySelector('#algolia-search .search-dialog')).display === 'block' && closeSearch()
    searchClickFn()
  })

  const algolia = GLOBAL_CONFIG.algolia
  const isAlgoliaValid = algolia.appId && algolia.apiKey && algolia.indexName
  if (!isAlgoliaValid) {
    return console.error('Algolia setting is invalid!')
  }

  const search = instantsearch({
    appId: algolia.appId,
    apiKey: algolia.apiKey,
    indexName: algolia.indexName,
    searchParameters: {
      hitsPerPage: algolia.hits.per_page || 10
    },
    searchFunction: function (helper) {
      const searchInput = document.querySelector('#algolia-search-input input')

      if (searchInput.value) {
        helper.search()
      }
    }
  })

  search.addWidget(
    instantsearch.widgets.searchBox({
      container: '#algolia-search-input',
      reset: false,
      magnifier: false,
      placeholder: GLOBAL_CONFIG.algolia.languages.input_placeholder
    })
  )
  search.addWidget(
    instantsearch.widgets.hits({
      container: '#algolia-hits',
      templates: {
        item: function (data) {
          const link = data.permalink ? data.permalink : (GLOBAL_CONFIG.root + data.path)
          return (
            '<a href="' + link + '" class="algolia-hit-item-link">' +
            data._highlightResult.title.value +
            '</a>'
          )
        },
        empty: function (data) {
          return (
            '<div id="algolia-hits-empty">' +
            GLOBAL_CONFIG.algolia.languages.hits_empty.replace(/\$\{query}/, data.query) +
            '</div>'
          )
        }
      },
      cssClasses: {
        item: 'algolia-hit-item'
      }
    })
  )

  search.addWidget(
    instantsearch.widgets.stats({
      container: '#algolia-stats',
      templates: {
        body: function (data) {
          const stats = GLOBAL_CONFIG.algolia.languages.hits_stats
            .replace(/\$\{hits}/, data.nbHits)
            .replace(/\$\{time}/, data.processingTimeMS)
          return (
            '<hr>' +
            stats +
            '<span class="algolia-logo pull-right">' +
            '  <img src="' + GLOBAL_CONFIG.root + 'img/algolia.svg" alt="Algolia" />' +
            '</span>'
          )
        }
      }
    })
  )

  search.addWidget(
    instantsearch.widgets.pagination({
      container: '#algolia-pagination',
      scrollTo: false,
      showFirstLast: false,
      labels: {
        first: '<i class="fas fa-angle-double-left"></i>',
        last: '<i class="fas fa-angle-double-right"></i>',
        previous: '<i class="fas fa-angle-left"></i>',
        next: '<i class="fas fa-angle-right"></i>'
      },
      cssClasses: {
        root: 'pagination',
        item: 'pagination-item',
        link: 'page-number',
        active: 'current',
        disabled: 'disabled-item'
      }
    })
  )
  search.start()

  window.pjax && search.on('render', () => {
    window.pjax.refresh(document.getElementById('algolia-hits'))
  })
})
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/search/local-search.js</url>
    <content><![CDATA[window.addEventListener('load', () => {
  let loadFlag = false
  const openSearch = function () {
    document.body.style.cssText = 'width: 100%;overflow: hidden'
    document.querySelector('#local-search .search-dialog').style.display = 'block'
    document.querySelector('#local-search-input input').focus()
    btf.fadeIn(document.getElementById('search-mask'), 0.5)
    if (!loadFlag) {
      search(GLOBAL_CONFIG.localSearch.path)
      loadFlag = true
    }
    // shortcut: ESC
    document.addEventListener('keydown', function f (event) {
      if (event.code === 'Escape') {
        closeSearch()
        document.removeEventListener('keydown', f)
      }
    })
  }

  const closeSearch = function () {
    document.body.style.cssText = "width: '';overflow: ''"
    const $searchDialog = document.querySelector('#local-search .search-dialog')
    $searchDialog.style.animation = 'search_close .5s'
    setTimeout(() => { $searchDialog.style.cssText = "display: none; animation: ''" }, 500)
    btf.fadeOut(document.getElementById('search-mask'), 0.5)
  }

  // click function
  const searchClickFn = () => {
    document.querySelector('#search-button > .search').addEventListener('click', openSearch)
    document.getElementById('search-mask').addEventListener('click', closeSearch)
    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)
  }

  searchClickFn()

  // pjax
  window.addEventListener('pjax:complete', function () {
    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()
    searchClickFn()
  })

  function search (path) {
    fetch(GLOBAL_CONFIG.root + path)
      .then(response => response.text())
      .then(str => new window.DOMParser().parseFromString(str, 'text/xml'))
      .then(data => {
        const datas = [...data.querySelectorAll('entry')].map(function (item) {
          return {
            title: item.querySelector('title').textContent,
            content: item.querySelector('content').textContent,
            url: item.querySelector('url').textContent
          }
        })

        const $input = document.querySelector('#local-search-input input')
        const $resultContent = document.getElementById('local-search-results')
        $input.addEventListener('input', function () {
          let str = '<div class="search-result-list">'
          const keywords = this.value.trim().toLowerCase().split(/[\s]+/)
          $resultContent.innerHTML = ''
          if (this.value.trim().length <= 0) return
          let count = 0
          // perform local searching
          datas.forEach(function (data) {
            let isMatch = true
            if (!data.title || data.title.trim() === '') {
              data.title = 'Untitled'
            }
            let dataTitle = data.title.trim().toLowerCase()
            const dataContent = data.content.trim().replace(/<[^>]+>/g, '').toLowerCase()
            const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url
            let indexTitle = -1
            let indexContent = -1
            let firstOccur = -1
            // only match artiles with not empty titles and contents
            if (dataTitle !== '' || dataContent !== '') {
              keywords.forEach(function (keyword, i) {
                indexTitle = dataTitle.indexOf(keyword)
                indexContent = dataContent.indexOf(keyword)
                if (indexTitle < 0 && indexContent < 0) {
                  isMatch = false
                } else {
                  if (indexContent < 0) {
                    indexContent = 0
                  }
                  if (i === 0) {
                    firstOccur = indexContent
                  }
                }
              })
            } else {
              isMatch = false
            }

            // show search results
            if (isMatch) {
              const content = data.content.trim().replace(/<[^>]+>/g, '')
              if (firstOccur >= 0) {
                // cut out 130 characters
                let start = firstOccur - 30
                let end = firstOccur + 100

                if (start < 0) {
                  start = 0
                }

                if (start === 0) {
                  end = 100
                }

                if (end > content.length) {
                  end = content.length
                }

                let matchContent = content.substring(start, end)

                // highlight all keywords
                keywords.forEach(function (keyword) {
                  const regS = new RegExp(keyword, 'gi')
                  matchContent = matchContent.replace(regS, '<span class="search-keyword">' + keyword + '</span>')
                  dataTitle = dataTitle.replace(regS, '<span class="search-keyword">' + keyword + '</span>')
                })

                str += '<div class="local-search__hit-item"><a href="' + dataUrl + '" class="search-result-title">' + dataTitle + '</a>'
                count += 1

                if (dataContent !== '') {
                  str += '<p class="search-result">' + matchContent + '...</p>'
                }
              }
              str += '</div>'
            }
          })
          if (count === 0) {
            str += '<div id="local-search__hits-empty">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\$\{query}/, this.value.trim()) +
              '</div>'
          }
          str += '</div>'
          $resultContent.innerHTML = str
          window.pjax && window.pjax.refresh($resultContent)
        })
      })
  }
})
]]></content>
  </entry>
</search>
